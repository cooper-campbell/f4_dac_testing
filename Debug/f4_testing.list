
f4_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000059a4  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08005b30  08005b30  00015b30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b98  08005b98  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08005b98  08005b98  00015b98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005ba0  08005ba0  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005ba0  08005ba0  00015ba0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08005ba4  08005ba4  00015ba4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08005ba8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034b8  20000074  08005c1c  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000352c  08005c1c  0002352c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea98  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000252a  00000000  00000000  0002eb3c  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bc0  00000000  00000000  00031068  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a98  00000000  00000000  00031c28  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021b19  00000000  00000000  000326c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b6aa  00000000  00000000  000541d9  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5ae9  00000000  00000000  0005f883  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0012536c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003394  00000000  00000000  001253e8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005b14 	.word	0x08005b14

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	08005b14 	.word	0x08005b14

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_uldivmod>:
 8000af0:	b953      	cbnz	r3, 8000b08 <__aeabi_uldivmod+0x18>
 8000af2:	b94a      	cbnz	r2, 8000b08 <__aeabi_uldivmod+0x18>
 8000af4:	2900      	cmp	r1, #0
 8000af6:	bf08      	it	eq
 8000af8:	2800      	cmpeq	r0, #0
 8000afa:	bf1c      	itt	ne
 8000afc:	f04f 31ff 	movne.w	r1, #4294967295
 8000b00:	f04f 30ff 	movne.w	r0, #4294967295
 8000b04:	f000 b972 	b.w	8000dec <__aeabi_idiv0>
 8000b08:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b0c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b10:	f000 f806 	bl	8000b20 <__udivmoddi4>
 8000b14:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b18:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b1c:	b004      	add	sp, #16
 8000b1e:	4770      	bx	lr

08000b20 <__udivmoddi4>:
 8000b20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b24:	9e08      	ldr	r6, [sp, #32]
 8000b26:	4604      	mov	r4, r0
 8000b28:	4688      	mov	r8, r1
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d14b      	bne.n	8000bc6 <__udivmoddi4+0xa6>
 8000b2e:	428a      	cmp	r2, r1
 8000b30:	4615      	mov	r5, r2
 8000b32:	d967      	bls.n	8000c04 <__udivmoddi4+0xe4>
 8000b34:	fab2 f282 	clz	r2, r2
 8000b38:	b14a      	cbz	r2, 8000b4e <__udivmoddi4+0x2e>
 8000b3a:	f1c2 0720 	rsb	r7, r2, #32
 8000b3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b42:	fa20 f707 	lsr.w	r7, r0, r7
 8000b46:	4095      	lsls	r5, r2
 8000b48:	ea47 0803 	orr.w	r8, r7, r3
 8000b4c:	4094      	lsls	r4, r2
 8000b4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b52:	0c23      	lsrs	r3, r4, #16
 8000b54:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b58:	fa1f fc85 	uxth.w	ip, r5
 8000b5c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000b60:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000b64:	fb07 f10c 	mul.w	r1, r7, ip
 8000b68:	4299      	cmp	r1, r3
 8000b6a:	d909      	bls.n	8000b80 <__udivmoddi4+0x60>
 8000b6c:	18eb      	adds	r3, r5, r3
 8000b6e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000b72:	f080 811b 	bcs.w	8000dac <__udivmoddi4+0x28c>
 8000b76:	4299      	cmp	r1, r3
 8000b78:	f240 8118 	bls.w	8000dac <__udivmoddi4+0x28c>
 8000b7c:	3f02      	subs	r7, #2
 8000b7e:	442b      	add	r3, r5
 8000b80:	1a5b      	subs	r3, r3, r1
 8000b82:	b2a4      	uxth	r4, r4
 8000b84:	fbb3 f0fe 	udiv	r0, r3, lr
 8000b88:	fb0e 3310 	mls	r3, lr, r0, r3
 8000b8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b90:	fb00 fc0c 	mul.w	ip, r0, ip
 8000b94:	45a4      	cmp	ip, r4
 8000b96:	d909      	bls.n	8000bac <__udivmoddi4+0x8c>
 8000b98:	192c      	adds	r4, r5, r4
 8000b9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000b9e:	f080 8107 	bcs.w	8000db0 <__udivmoddi4+0x290>
 8000ba2:	45a4      	cmp	ip, r4
 8000ba4:	f240 8104 	bls.w	8000db0 <__udivmoddi4+0x290>
 8000ba8:	3802      	subs	r0, #2
 8000baa:	442c      	add	r4, r5
 8000bac:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bb0:	eba4 040c 	sub.w	r4, r4, ip
 8000bb4:	2700      	movs	r7, #0
 8000bb6:	b11e      	cbz	r6, 8000bc0 <__udivmoddi4+0xa0>
 8000bb8:	40d4      	lsrs	r4, r2
 8000bba:	2300      	movs	r3, #0
 8000bbc:	e9c6 4300 	strd	r4, r3, [r6]
 8000bc0:	4639      	mov	r1, r7
 8000bc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bc6:	428b      	cmp	r3, r1
 8000bc8:	d909      	bls.n	8000bde <__udivmoddi4+0xbe>
 8000bca:	2e00      	cmp	r6, #0
 8000bcc:	f000 80eb 	beq.w	8000da6 <__udivmoddi4+0x286>
 8000bd0:	2700      	movs	r7, #0
 8000bd2:	e9c6 0100 	strd	r0, r1, [r6]
 8000bd6:	4638      	mov	r0, r7
 8000bd8:	4639      	mov	r1, r7
 8000bda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000bde:	fab3 f783 	clz	r7, r3
 8000be2:	2f00      	cmp	r7, #0
 8000be4:	d147      	bne.n	8000c76 <__udivmoddi4+0x156>
 8000be6:	428b      	cmp	r3, r1
 8000be8:	d302      	bcc.n	8000bf0 <__udivmoddi4+0xd0>
 8000bea:	4282      	cmp	r2, r0
 8000bec:	f200 80fa 	bhi.w	8000de4 <__udivmoddi4+0x2c4>
 8000bf0:	1a84      	subs	r4, r0, r2
 8000bf2:	eb61 0303 	sbc.w	r3, r1, r3
 8000bf6:	2001      	movs	r0, #1
 8000bf8:	4698      	mov	r8, r3
 8000bfa:	2e00      	cmp	r6, #0
 8000bfc:	d0e0      	beq.n	8000bc0 <__udivmoddi4+0xa0>
 8000bfe:	e9c6 4800 	strd	r4, r8, [r6]
 8000c02:	e7dd      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000c04:	b902      	cbnz	r2, 8000c08 <__udivmoddi4+0xe8>
 8000c06:	deff      	udf	#255	; 0xff
 8000c08:	fab2 f282 	clz	r2, r2
 8000c0c:	2a00      	cmp	r2, #0
 8000c0e:	f040 808f 	bne.w	8000d30 <__udivmoddi4+0x210>
 8000c12:	1b49      	subs	r1, r1, r5
 8000c14:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c18:	fa1f f885 	uxth.w	r8, r5
 8000c1c:	2701      	movs	r7, #1
 8000c1e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c22:	0c23      	lsrs	r3, r4, #16
 8000c24:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c28:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c2c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c30:	4299      	cmp	r1, r3
 8000c32:	d907      	bls.n	8000c44 <__udivmoddi4+0x124>
 8000c34:	18eb      	adds	r3, r5, r3
 8000c36:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c3a:	d202      	bcs.n	8000c42 <__udivmoddi4+0x122>
 8000c3c:	4299      	cmp	r1, r3
 8000c3e:	f200 80cd 	bhi.w	8000ddc <__udivmoddi4+0x2bc>
 8000c42:	4684      	mov	ip, r0
 8000c44:	1a59      	subs	r1, r3, r1
 8000c46:	b2a3      	uxth	r3, r4
 8000c48:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c4c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c50:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c54:	fb08 f800 	mul.w	r8, r8, r0
 8000c58:	45a0      	cmp	r8, r4
 8000c5a:	d907      	bls.n	8000c6c <__udivmoddi4+0x14c>
 8000c5c:	192c      	adds	r4, r5, r4
 8000c5e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c62:	d202      	bcs.n	8000c6a <__udivmoddi4+0x14a>
 8000c64:	45a0      	cmp	r8, r4
 8000c66:	f200 80b6 	bhi.w	8000dd6 <__udivmoddi4+0x2b6>
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	eba4 0408 	sub.w	r4, r4, r8
 8000c70:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c74:	e79f      	b.n	8000bb6 <__udivmoddi4+0x96>
 8000c76:	f1c7 0c20 	rsb	ip, r7, #32
 8000c7a:	40bb      	lsls	r3, r7
 8000c7c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000c80:	ea4e 0e03 	orr.w	lr, lr, r3
 8000c84:	fa01 f407 	lsl.w	r4, r1, r7
 8000c88:	fa20 f50c 	lsr.w	r5, r0, ip
 8000c8c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000c90:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000c94:	4325      	orrs	r5, r4
 8000c96:	fbb3 f9f8 	udiv	r9, r3, r8
 8000c9a:	0c2c      	lsrs	r4, r5, #16
 8000c9c:	fb08 3319 	mls	r3, r8, r9, r3
 8000ca0:	fa1f fa8e 	uxth.w	sl, lr
 8000ca4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ca8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cac:	429c      	cmp	r4, r3
 8000cae:	fa02 f207 	lsl.w	r2, r2, r7
 8000cb2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cb6:	d90b      	bls.n	8000cd0 <__udivmoddi4+0x1b0>
 8000cb8:	eb1e 0303 	adds.w	r3, lr, r3
 8000cbc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000cc0:	f080 8087 	bcs.w	8000dd2 <__udivmoddi4+0x2b2>
 8000cc4:	429c      	cmp	r4, r3
 8000cc6:	f240 8084 	bls.w	8000dd2 <__udivmoddi4+0x2b2>
 8000cca:	f1a9 0902 	sub.w	r9, r9, #2
 8000cce:	4473      	add	r3, lr
 8000cd0:	1b1b      	subs	r3, r3, r4
 8000cd2:	b2ad      	uxth	r5, r5
 8000cd4:	fbb3 f0f8 	udiv	r0, r3, r8
 8000cd8:	fb08 3310 	mls	r3, r8, r0, r3
 8000cdc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000ce0:	fb00 fa0a 	mul.w	sl, r0, sl
 8000ce4:	45a2      	cmp	sl, r4
 8000ce6:	d908      	bls.n	8000cfa <__udivmoddi4+0x1da>
 8000ce8:	eb1e 0404 	adds.w	r4, lr, r4
 8000cec:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cf0:	d26b      	bcs.n	8000dca <__udivmoddi4+0x2aa>
 8000cf2:	45a2      	cmp	sl, r4
 8000cf4:	d969      	bls.n	8000dca <__udivmoddi4+0x2aa>
 8000cf6:	3802      	subs	r0, #2
 8000cf8:	4474      	add	r4, lr
 8000cfa:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000cfe:	fba0 8902 	umull	r8, r9, r0, r2
 8000d02:	eba4 040a 	sub.w	r4, r4, sl
 8000d06:	454c      	cmp	r4, r9
 8000d08:	46c2      	mov	sl, r8
 8000d0a:	464b      	mov	r3, r9
 8000d0c:	d354      	bcc.n	8000db8 <__udivmoddi4+0x298>
 8000d0e:	d051      	beq.n	8000db4 <__udivmoddi4+0x294>
 8000d10:	2e00      	cmp	r6, #0
 8000d12:	d069      	beq.n	8000de8 <__udivmoddi4+0x2c8>
 8000d14:	ebb1 050a 	subs.w	r5, r1, sl
 8000d18:	eb64 0403 	sbc.w	r4, r4, r3
 8000d1c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d20:	40fd      	lsrs	r5, r7
 8000d22:	40fc      	lsrs	r4, r7
 8000d24:	ea4c 0505 	orr.w	r5, ip, r5
 8000d28:	e9c6 5400 	strd	r5, r4, [r6]
 8000d2c:	2700      	movs	r7, #0
 8000d2e:	e747      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000d30:	f1c2 0320 	rsb	r3, r2, #32
 8000d34:	fa20 f703 	lsr.w	r7, r0, r3
 8000d38:	4095      	lsls	r5, r2
 8000d3a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d3e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d42:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d46:	4338      	orrs	r0, r7
 8000d48:	0c01      	lsrs	r1, r0, #16
 8000d4a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d4e:	fa1f f885 	uxth.w	r8, r5
 8000d52:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d56:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d5a:	fb07 f308 	mul.w	r3, r7, r8
 8000d5e:	428b      	cmp	r3, r1
 8000d60:	fa04 f402 	lsl.w	r4, r4, r2
 8000d64:	d907      	bls.n	8000d76 <__udivmoddi4+0x256>
 8000d66:	1869      	adds	r1, r5, r1
 8000d68:	f107 3cff 	add.w	ip, r7, #4294967295
 8000d6c:	d22f      	bcs.n	8000dce <__udivmoddi4+0x2ae>
 8000d6e:	428b      	cmp	r3, r1
 8000d70:	d92d      	bls.n	8000dce <__udivmoddi4+0x2ae>
 8000d72:	3f02      	subs	r7, #2
 8000d74:	4429      	add	r1, r5
 8000d76:	1acb      	subs	r3, r1, r3
 8000d78:	b281      	uxth	r1, r0
 8000d7a:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d7e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d82:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d86:	fb00 f308 	mul.w	r3, r0, r8
 8000d8a:	428b      	cmp	r3, r1
 8000d8c:	d907      	bls.n	8000d9e <__udivmoddi4+0x27e>
 8000d8e:	1869      	adds	r1, r5, r1
 8000d90:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d94:	d217      	bcs.n	8000dc6 <__udivmoddi4+0x2a6>
 8000d96:	428b      	cmp	r3, r1
 8000d98:	d915      	bls.n	8000dc6 <__udivmoddi4+0x2a6>
 8000d9a:	3802      	subs	r0, #2
 8000d9c:	4429      	add	r1, r5
 8000d9e:	1ac9      	subs	r1, r1, r3
 8000da0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000da4:	e73b      	b.n	8000c1e <__udivmoddi4+0xfe>
 8000da6:	4637      	mov	r7, r6
 8000da8:	4630      	mov	r0, r6
 8000daa:	e709      	b.n	8000bc0 <__udivmoddi4+0xa0>
 8000dac:	4607      	mov	r7, r0
 8000dae:	e6e7      	b.n	8000b80 <__udivmoddi4+0x60>
 8000db0:	4618      	mov	r0, r3
 8000db2:	e6fb      	b.n	8000bac <__udivmoddi4+0x8c>
 8000db4:	4541      	cmp	r1, r8
 8000db6:	d2ab      	bcs.n	8000d10 <__udivmoddi4+0x1f0>
 8000db8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dbc:	eb69 020e 	sbc.w	r2, r9, lr
 8000dc0:	3801      	subs	r0, #1
 8000dc2:	4613      	mov	r3, r2
 8000dc4:	e7a4      	b.n	8000d10 <__udivmoddi4+0x1f0>
 8000dc6:	4660      	mov	r0, ip
 8000dc8:	e7e9      	b.n	8000d9e <__udivmoddi4+0x27e>
 8000dca:	4618      	mov	r0, r3
 8000dcc:	e795      	b.n	8000cfa <__udivmoddi4+0x1da>
 8000dce:	4667      	mov	r7, ip
 8000dd0:	e7d1      	b.n	8000d76 <__udivmoddi4+0x256>
 8000dd2:	4681      	mov	r9, r0
 8000dd4:	e77c      	b.n	8000cd0 <__udivmoddi4+0x1b0>
 8000dd6:	3802      	subs	r0, #2
 8000dd8:	442c      	add	r4, r5
 8000dda:	e747      	b.n	8000c6c <__udivmoddi4+0x14c>
 8000ddc:	f1ac 0c02 	sub.w	ip, ip, #2
 8000de0:	442b      	add	r3, r5
 8000de2:	e72f      	b.n	8000c44 <__udivmoddi4+0x124>
 8000de4:	4638      	mov	r0, r7
 8000de6:	e708      	b.n	8000bfa <__udivmoddi4+0xda>
 8000de8:	4637      	mov	r7, r6
 8000dea:	e6e9      	b.n	8000bc0 <__udivmoddi4+0xa0>

08000dec <__aeabi_idiv0>:
 8000dec:	4770      	bx	lr
 8000dee:	bf00      	nop

08000df0 <HAL_SPI_RxCpltCallback>:

//HAL_StatusTypeDef HAL_SPI_Receive (SPI_HandleTypeDef * hspi, uint8_t * pData, uint16_t Size,uint32_t Timeout);
//HAL_StatusTypeDef HAL_SPI_Receive_IT (SPI_HandleTypeDef * hspi, uint8_t * pData, uint16_t Size);
//HAL_StatusTypeDef HAL_SPI_Receive_DMA (SPI_HandleTypeDef * hspi, uint8_t * pData, uint16_t Size);

void HAL_SPI_RxCpltCallback (SPI_HandleTypeDef * hspi) {
 8000df0:	b580      	push	{r7, lr}
 8000df2:	b082      	sub	sp, #8
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
//	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
	HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_13);
 8000df8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dfc:	4803      	ldr	r0, [pc, #12]	; (8000e0c <HAL_SPI_RxCpltCallback+0x1c>)
 8000dfe:	f001 fc26 	bl	800264e <HAL_GPIO_TogglePin>
//	gen_square();
//	while(1);
//	  HAL_Delay(500);
}
 8000e02:	bf00      	nop
 8000e04:	3708      	adds	r7, #8
 8000e06:	46bd      	mov	sp, r7
 8000e08:	bd80      	pop	{r7, pc}
 8000e0a:	bf00      	nop
 8000e0c:	40020c00 	.word	0x40020c00

08000e10 <gen_square>:
	int x;
	for(x=0; x<N; x++)
		wavetable[x] = 32767 + 32767 * sin(2 * M_PI * x / N);
}

void gen_square(void) {
 8000e10:	b480      	push	{r7}
 8000e12:	b083      	sub	sp, #12
 8000e14:	af00      	add	r7, sp, #0
	int x;
	for(x=0; x<N/2; x++)
 8000e16:	2300      	movs	r3, #0
 8000e18:	607b      	str	r3, [r7, #4]
 8000e1a:	e008      	b.n	8000e2e <gen_square+0x1e>
		wavetable[x] = 2 * 32767;
 8000e1c:	4a11      	ldr	r2, [pc, #68]	; (8000e64 <gen_square+0x54>)
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	f64f 71fe 	movw	r1, #65534	; 0xfffe
 8000e24:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(x=0; x<N/2; x++)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3301      	adds	r3, #1
 8000e2c:	607b      	str	r3, [r7, #4]
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8000e34:	ddf2      	ble.n	8000e1c <gen_square+0xc>
	for(x=N/2; x<N; x++)
 8000e36:	f240 3369 	movw	r3, #873	; 0x369
 8000e3a:	607b      	str	r3, [r7, #4]
 8000e3c:	e007      	b.n	8000e4e <gen_square+0x3e>
		wavetable[x] = 0;
 8000e3e:	4a09      	ldr	r2, [pc, #36]	; (8000e64 <gen_square+0x54>)
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	2100      	movs	r1, #0
 8000e44:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(x=N/2; x<N; x++)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3301      	adds	r3, #1
 8000e4c:	607b      	str	r3, [r7, #4]
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	f240 62d1 	movw	r2, #1745	; 0x6d1
 8000e54:	4293      	cmp	r3, r2
 8000e56:	ddf2      	ble.n	8000e3e <gen_square+0x2e>
}
 8000e58:	bf00      	nop
 8000e5a:	370c      	adds	r7, #12
 8000e5c:	46bd      	mov	sp, r7
 8000e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e62:	4770      	bx	lr
 8000e64:	20002354 	.word	0x20002354

08000e68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e68:	b580      	push	{r7, lr}
 8000e6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e6c:	f000 fd28 	bl	80018c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e70:	f000 f846 	bl	8000f00 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e74:	f000 f97e 	bl	8001174 <MX_GPIO_Init>
  MX_DMA_Init();
 8000e78:	f000 f946 	bl	8001108 <MX_DMA_Init>
  MX_USB_OTG_FS_HCD_Init();
 8000e7c:	f000 f922 	bl	80010c4 <MX_USB_OTG_FS_HCD_Init>
  MX_I2S2_Init();
 8000e80:	f000 f8be 	bl	8001000 <MX_I2S2_Init>
  MX_SPI1_Init();
 8000e84:	f000 f8ea 	bl	800105c <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//  gen_sine();
  gen_square();
 8000e88:	f7ff ffc2 	bl	8000e10 <gen_square>
//  gen_sawtooth();
  init_note_steps();
 8000e8c:	f000 fa74 	bl	8001378 <init_note_steps>

//  active_notes[active_count++] = 0; //lowest
//  active_notes[active_count++] = 87; //highest
//  active_notes[active_count++] = 66; // DS2
  active_notes[active_count++] = 34; //
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <main+0x74>)
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	1c5a      	adds	r2, r3, #1
 8000e96:	4911      	ldr	r1, [pc, #68]	; (8000edc <main+0x74>)
 8000e98:	600a      	str	r2, [r1, #0]
 8000e9a:	4a11      	ldr	r2, [pc, #68]	; (8000ee0 <main+0x78>)
 8000e9c:	2122      	movs	r1, #34	; 0x22
 8000e9e:	54d1      	strb	r1, [r2, r3]
  active_notes[active_count++] = 56;
  active_notes[active_count++] = 82;
  active_notes[active_count++] = 22;
  */

  fill_buffer(buffer, BUFFERSIZE);
 8000ea0:	4b10      	ldr	r3, [pc, #64]	; (8000ee4 <main+0x7c>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4810      	ldr	r0, [pc, #64]	; (8000ee8 <main+0x80>)
 8000ea8:	f000 f9ee 	bl	8001288 <fill_buffer>

  HAL_SPI_Receive_DMA(&hspi1, (uint8_t *) wavetable, TABLESIZE);
 8000eac:	4b0f      	ldr	r3, [pc, #60]	; (8000eec <main+0x84>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	461a      	mov	r2, r3
 8000eb4:	490e      	ldr	r1, [pc, #56]	; (8000ef0 <main+0x88>)
 8000eb6:	480f      	ldr	r0, [pc, #60]	; (8000ef4 <main+0x8c>)
 8000eb8:	f002 ffc0 	bl	8003e3c <HAL_SPI_Receive_DMA>
  HAL_GPIO_TogglePin(GPIOD, GPIO_PIN_12);
 8000ebc:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000ec0:	480d      	ldr	r0, [pc, #52]	; (8000ef8 <main+0x90>)
 8000ec2:	f001 fbc4 	bl	800264e <HAL_GPIO_TogglePin>

  HAL_I2S_Transmit_DMA(&hi2s2, buffer, BUFFERSIZE);
 8000ec6:	4b07      	ldr	r3, [pc, #28]	; (8000ee4 <main+0x7c>)
 8000ec8:	681b      	ldr	r3, [r3, #0]
 8000eca:	b29b      	uxth	r3, r3
 8000ecc:	461a      	mov	r2, r3
 8000ece:	4906      	ldr	r1, [pc, #24]	; (8000ee8 <main+0x80>)
 8000ed0:	480a      	ldr	r0, [pc, #40]	; (8000efc <main+0x94>)
 8000ed2:	f001 fd91 	bl	80029f8 <HAL_I2S_Transmit_DMA>
//	  HAL_Delay(500);

	  /* use pushbutton to generate sound */
//	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) active_count = 3;
//	  else active_count = 0;
	  asm("wfi");
 8000ed6:	bf30      	wfi
 8000ed8:	e7fd      	b.n	8000ed6 <main+0x6e>
 8000eda:	bf00      	nop
 8000edc:	20000090 	.word	0x20000090
 8000ee0:	2000351c 	.word	0x2000351c
 8000ee4:	08005b34 	.word	0x08005b34
 8000ee8:	20000094 	.word	0x20000094
 8000eec:	08005b30 	.word	0x08005b30
 8000ef0:	20002354 	.word	0x20002354
 8000ef4:	200030f8 	.word	0x200030f8
 8000ef8:	40020c00 	.word	0x40020c00
 8000efc:	200034d4 	.word	0x200034d4

08000f00 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	b098      	sub	sp, #96	; 0x60
 8000f04:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f06:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f0a:	2230      	movs	r2, #48	; 0x30
 8000f0c:	2100      	movs	r1, #0
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f003 fda0 	bl	8004a54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f14:	f107 031c 	add.w	r3, r7, #28
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f24:	f107 030c 	add.w	r3, r7, #12
 8000f28:	2200      	movs	r2, #0
 8000f2a:	601a      	str	r2, [r3, #0]
 8000f2c:	605a      	str	r2, [r3, #4]
 8000f2e:	609a      	str	r2, [r3, #8]
 8000f30:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f32:	2300      	movs	r3, #0
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	4b30      	ldr	r3, [pc, #192]	; (8000ff8 <SystemClock_Config+0xf8>)
 8000f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f3a:	4a2f      	ldr	r2, [pc, #188]	; (8000ff8 <SystemClock_Config+0xf8>)
 8000f3c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f40:	6413      	str	r3, [r2, #64]	; 0x40
 8000f42:	4b2d      	ldr	r3, [pc, #180]	; (8000ff8 <SystemClock_Config+0xf8>)
 8000f44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f4a:	60bb      	str	r3, [r7, #8]
 8000f4c:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f4e:	2300      	movs	r3, #0
 8000f50:	607b      	str	r3, [r7, #4]
 8000f52:	4b2a      	ldr	r3, [pc, #168]	; (8000ffc <SystemClock_Config+0xfc>)
 8000f54:	681b      	ldr	r3, [r3, #0]
 8000f56:	4a29      	ldr	r2, [pc, #164]	; (8000ffc <SystemClock_Config+0xfc>)
 8000f58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f5c:	6013      	str	r3, [r2, #0]
 8000f5e:	4b27      	ldr	r3, [pc, #156]	; (8000ffc <SystemClock_Config+0xfc>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f66:	607b      	str	r3, [r7, #4]
 8000f68:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f6e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f72:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f74:	2302      	movs	r3, #2
 8000f76:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f78:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f7c:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000f7e:	2304      	movs	r3, #4
 8000f80:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000f82:	2348      	movs	r3, #72	; 0x48
 8000f84:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f86:	2302      	movs	r3, #2
 8000f88:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000f8a:	2303      	movs	r3, #3
 8000f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f8e:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f92:	4618      	mov	r0, r3
 8000f94:	f002 f982 	bl	800329c <HAL_RCC_OscConfig>
 8000f98:	4603      	mov	r3, r0
 8000f9a:	2b00      	cmp	r3, #0
 8000f9c:	d001      	beq.n	8000fa2 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 8000f9e:	f000 f96f 	bl	8001280 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fa2:	230f      	movs	r3, #15
 8000fa4:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000faa:	2300      	movs	r3, #0
 8000fac:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fb2:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000fb8:	f107 031c 	add.w	r3, r7, #28
 8000fbc:	2102      	movs	r1, #2
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	f002 fbdc 	bl	800377c <HAL_RCC_ClockConfig>
 8000fc4:	4603      	mov	r3, r0
 8000fc6:	2b00      	cmp	r3, #0
 8000fc8:	d001      	beq.n	8000fce <SystemClock_Config+0xce>
  {
    Error_Handler();
 8000fca:	f000 f959 	bl	8001280 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 8000fd2:	2360      	movs	r3, #96	; 0x60
 8000fd4:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8000fd6:	2305      	movs	r3, #5
 8000fd8:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	4618      	mov	r0, r3
 8000fe0:	f002 fd8a 	bl	8003af8 <HAL_RCCEx_PeriphCLKConfig>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <SystemClock_Config+0xee>
  {
    Error_Handler();
 8000fea:	f000 f949 	bl	8001280 <Error_Handler>
  }
}
 8000fee:	bf00      	nop
 8000ff0:	3760      	adds	r7, #96	; 0x60
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	bd80      	pop	{r7, pc}
 8000ff6:	bf00      	nop
 8000ff8:	40023800 	.word	0x40023800
 8000ffc:	40007000 	.word	0x40007000

08001000 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8001004:	4b13      	ldr	r3, [pc, #76]	; (8001054 <MX_I2S2_Init+0x54>)
 8001006:	4a14      	ldr	r2, [pc, #80]	; (8001058 <MX_I2S2_Init+0x58>)
 8001008:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 800100a:	4b12      	ldr	r3, [pc, #72]	; (8001054 <MX_I2S2_Init+0x54>)
 800100c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001010:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8001012:	4b10      	ldr	r3, [pc, #64]	; (8001054 <MX_I2S2_Init+0x54>)
 8001014:	2200      	movs	r2, #0
 8001016:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001018:	4b0e      	ldr	r3, [pc, #56]	; (8001054 <MX_I2S2_Init+0x54>)
 800101a:	2200      	movs	r2, #0
 800101c:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 800101e:	4b0d      	ldr	r3, [pc, #52]	; (8001054 <MX_I2S2_Init+0x54>)
 8001020:	2200      	movs	r2, #0
 8001022:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 8001024:	4b0b      	ldr	r3, [pc, #44]	; (8001054 <MX_I2S2_Init+0x54>)
 8001026:	f64b 3280 	movw	r2, #48000	; 0xbb80
 800102a:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 800102c:	4b09      	ldr	r3, [pc, #36]	; (8001054 <MX_I2S2_Init+0x54>)
 800102e:	2200      	movs	r2, #0
 8001030:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 8001032:	4b08      	ldr	r3, [pc, #32]	; (8001054 <MX_I2S2_Init+0x54>)
 8001034:	2200      	movs	r2, #0
 8001036:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 8001038:	4b06      	ldr	r3, [pc, #24]	; (8001054 <MX_I2S2_Init+0x54>)
 800103a:	2200      	movs	r2, #0
 800103c:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 800103e:	4805      	ldr	r0, [pc, #20]	; (8001054 <MX_I2S2_Init+0x54>)
 8001040:	f001 fb9a 	bl	8002778 <HAL_I2S_Init>
 8001044:	4603      	mov	r3, r0
 8001046:	2b00      	cmp	r3, #0
 8001048:	d001      	beq.n	800104e <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 800104a:	f000 f919 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 800104e:	bf00      	nop
 8001050:	bd80      	pop	{r7, pc}
 8001052:	bf00      	nop
 8001054:	200034d4 	.word	0x200034d4
 8001058:	40003800 	.word	0x40003800

0800105c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001060:	4b16      	ldr	r3, [pc, #88]	; (80010bc <MX_SPI1_Init+0x60>)
 8001062:	4a17      	ldr	r2, [pc, #92]	; (80010c0 <MX_SPI1_Init+0x64>)
 8001064:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 8001066:	4b15      	ldr	r3, [pc, #84]	; (80010bc <MX_SPI1_Init+0x60>)
 8001068:	2200      	movs	r2, #0
 800106a:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <MX_SPI1_Init+0x60>)
 800106e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001072:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 8001074:	4b11      	ldr	r3, [pc, #68]	; (80010bc <MX_SPI1_Init+0x60>)
 8001076:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800107a:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800107c:	4b0f      	ldr	r3, [pc, #60]	; (80010bc <MX_SPI1_Init+0x60>)
 800107e:	2200      	movs	r2, #0
 8001080:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001082:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_SPI1_Init+0x60>)
 8001084:	2200      	movs	r2, #0
 8001086:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 8001088:	4b0c      	ldr	r3, [pc, #48]	; (80010bc <MX_SPI1_Init+0x60>)
 800108a:	2200      	movs	r2, #0
 800108c:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800108e:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <MX_SPI1_Init+0x60>)
 8001090:	2200      	movs	r2, #0
 8001092:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_SPI1_Init+0x60>)
 8001096:	2200      	movs	r2, #0
 8001098:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <MX_SPI1_Init+0x60>)
 800109c:	2200      	movs	r2, #0
 800109e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_SPI1_Init+0x60>)
 80010a2:	220a      	movs	r2, #10
 80010a4:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_SPI1_Init+0x60>)
 80010a8:	f002 fe64 	bl	8003d74 <HAL_SPI_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 80010b2:	f000 f8e5 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	200030f8 	.word	0x200030f8
 80010c0:	40013000 	.word	0x40013000

080010c4 <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80010c8:	4b0e      	ldr	r3, [pc, #56]	; (8001104 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80010ca:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80010ce:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80010d0:	4b0c      	ldr	r3, [pc, #48]	; (8001104 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80010d2:	2208      	movs	r2, #8
 80010d4:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80010d6:	4b0b      	ldr	r3, [pc, #44]	; (8001104 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80010d8:	2201      	movs	r2, #1
 80010da:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80010dc:	4b09      	ldr	r3, [pc, #36]	; (8001104 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80010de:	2200      	movs	r2, #0
 80010e0:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80010e2:	4b08      	ldr	r3, [pc, #32]	; (8001104 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80010e4:	2202      	movs	r2, #2
 80010e6:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80010e8:	4b06      	ldr	r3, [pc, #24]	; (8001104 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80010ea:	2200      	movs	r2, #0
 80010ec:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 80010ee:	4805      	ldr	r0, [pc, #20]	; (8001104 <MX_USB_OTG_FS_HCD_Init+0x40>)
 80010f0:	f001 fae0 	bl	80026b4 <HAL_HCD_Init>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d001      	beq.n	80010fe <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 80010fa:	f000 f8c1 	bl	8001280 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80010fe:	bf00      	nop
 8001100:	bd80      	pop	{r7, pc}
 8001102:	bf00      	nop
 8001104:	20003150 	.word	0x20003150

08001108 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b082      	sub	sp, #8
 800110c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800110e:	2300      	movs	r3, #0
 8001110:	607b      	str	r3, [r7, #4]
 8001112:	4b17      	ldr	r3, [pc, #92]	; (8001170 <MX_DMA_Init+0x68>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	4a16      	ldr	r2, [pc, #88]	; (8001170 <MX_DMA_Init+0x68>)
 8001118:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800111c:	6313      	str	r3, [r2, #48]	; 0x30
 800111e:	4b14      	ldr	r3, [pc, #80]	; (8001170 <MX_DMA_Init+0x68>)
 8001120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001122:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001126:	607b      	str	r3, [r7, #4]
 8001128:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800112a:	2300      	movs	r3, #0
 800112c:	603b      	str	r3, [r7, #0]
 800112e:	4b10      	ldr	r3, [pc, #64]	; (8001170 <MX_DMA_Init+0x68>)
 8001130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001132:	4a0f      	ldr	r2, [pc, #60]	; (8001170 <MX_DMA_Init+0x68>)
 8001134:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001138:	6313      	str	r3, [r2, #48]	; 0x30
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <MX_DMA_Init+0x68>)
 800113c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800113e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001142:	603b      	str	r3, [r7, #0]
 8001144:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 8001146:	2200      	movs	r2, #0
 8001148:	2100      	movs	r1, #0
 800114a:	200f      	movs	r0, #15
 800114c:	f000 fd27 	bl	8001b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8001150:	200f      	movs	r0, #15
 8001152:	f000 fd40 	bl	8001bd6 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8001156:	2200      	movs	r2, #0
 8001158:	2100      	movs	r1, #0
 800115a:	2038      	movs	r0, #56	; 0x38
 800115c:	f000 fd1f 	bl	8001b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001160:	2038      	movs	r0, #56	; 0x38
 8001162:	f000 fd38 	bl	8001bd6 <HAL_NVIC_EnableIRQ>

}
 8001166:	bf00      	nop
 8001168:	3708      	adds	r7, #8
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800

08001174 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b08a      	sub	sp, #40	; 0x28
 8001178:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800117a:	f107 0314 	add.w	r3, r7, #20
 800117e:	2200      	movs	r2, #0
 8001180:	601a      	str	r2, [r3, #0]
 8001182:	605a      	str	r2, [r3, #4]
 8001184:	609a      	str	r2, [r3, #8]
 8001186:	60da      	str	r2, [r3, #12]
 8001188:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	613b      	str	r3, [r7, #16]
 800118e:	4b38      	ldr	r3, [pc, #224]	; (8001270 <MX_GPIO_Init+0xfc>)
 8001190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001192:	4a37      	ldr	r2, [pc, #220]	; (8001270 <MX_GPIO_Init+0xfc>)
 8001194:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001198:	6313      	str	r3, [r2, #48]	; 0x30
 800119a:	4b35      	ldr	r3, [pc, #212]	; (8001270 <MX_GPIO_Init+0xfc>)
 800119c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80011a2:	613b      	str	r3, [r7, #16]
 80011a4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011a6:	2300      	movs	r3, #0
 80011a8:	60fb      	str	r3, [r7, #12]
 80011aa:	4b31      	ldr	r3, [pc, #196]	; (8001270 <MX_GPIO_Init+0xfc>)
 80011ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ae:	4a30      	ldr	r2, [pc, #192]	; (8001270 <MX_GPIO_Init+0xfc>)
 80011b0:	f043 0304 	orr.w	r3, r3, #4
 80011b4:	6313      	str	r3, [r2, #48]	; 0x30
 80011b6:	4b2e      	ldr	r3, [pc, #184]	; (8001270 <MX_GPIO_Init+0xfc>)
 80011b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ba:	f003 0304 	and.w	r3, r3, #4
 80011be:	60fb      	str	r3, [r7, #12]
 80011c0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011c2:	2300      	movs	r3, #0
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	4b2a      	ldr	r3, [pc, #168]	; (8001270 <MX_GPIO_Init+0xfc>)
 80011c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ca:	4a29      	ldr	r2, [pc, #164]	; (8001270 <MX_GPIO_Init+0xfc>)
 80011cc:	f043 0301 	orr.w	r3, r3, #1
 80011d0:	6313      	str	r3, [r2, #48]	; 0x30
 80011d2:	4b27      	ldr	r3, [pc, #156]	; (8001270 <MX_GPIO_Init+0xfc>)
 80011d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d6:	f003 0301 	and.w	r3, r3, #1
 80011da:	60bb      	str	r3, [r7, #8]
 80011dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80011de:	2300      	movs	r3, #0
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	4b23      	ldr	r3, [pc, #140]	; (8001270 <MX_GPIO_Init+0xfc>)
 80011e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e6:	4a22      	ldr	r2, [pc, #136]	; (8001270 <MX_GPIO_Init+0xfc>)
 80011e8:	f043 0302 	orr.w	r3, r3, #2
 80011ec:	6313      	str	r3, [r2, #48]	; 0x30
 80011ee:	4b20      	ldr	r3, [pc, #128]	; (8001270 <MX_GPIO_Init+0xfc>)
 80011f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011f2:	f003 0302 	and.w	r3, r3, #2
 80011f6:	607b      	str	r3, [r7, #4]
 80011f8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011fa:	2300      	movs	r3, #0
 80011fc:	603b      	str	r3, [r7, #0]
 80011fe:	4b1c      	ldr	r3, [pc, #112]	; (8001270 <MX_GPIO_Init+0xfc>)
 8001200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001202:	4a1b      	ldr	r2, [pc, #108]	; (8001270 <MX_GPIO_Init+0xfc>)
 8001204:	f043 0308 	orr.w	r3, r3, #8
 8001208:	6313      	str	r3, [r2, #48]	; 0x30
 800120a:	4b19      	ldr	r3, [pc, #100]	; (8001270 <MX_GPIO_Init+0xfc>)
 800120c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120e:	f003 0308 	and.w	r3, r3, #8
 8001212:	603b      	str	r3, [r7, #0]
 8001214:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001216:	2200      	movs	r2, #0
 8001218:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 800121c:	4815      	ldr	r0, [pc, #84]	; (8001274 <MX_GPIO_Init+0x100>)
 800121e:	f001 f9fd 	bl	800261c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001222:	2301      	movs	r3, #1
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001226:	4b14      	ldr	r3, [pc, #80]	; (8001278 <MX_GPIO_Init+0x104>)
 8001228:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800122a:	2300      	movs	r3, #0
 800122c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800122e:	f107 0314 	add.w	r3, r7, #20
 8001232:	4619      	mov	r1, r3
 8001234:	4811      	ldr	r0, [pc, #68]	; (800127c <MX_GPIO_Init+0x108>)
 8001236:	f001 f857 	bl	80022e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 800123a:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 800123e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001240:	2301      	movs	r3, #1
 8001242:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001244:	2300      	movs	r3, #0
 8001246:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001248:	2300      	movs	r3, #0
 800124a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800124c:	f107 0314 	add.w	r3, r7, #20
 8001250:	4619      	mov	r1, r3
 8001252:	4808      	ldr	r0, [pc, #32]	; (8001274 <MX_GPIO_Init+0x100>)
 8001254:	f001 f848 	bl	80022e8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001258:	2200      	movs	r2, #0
 800125a:	2100      	movs	r1, #0
 800125c:	2006      	movs	r0, #6
 800125e:	f000 fc9e 	bl	8001b9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001262:	2006      	movs	r0, #6
 8001264:	f000 fcb7 	bl	8001bd6 <HAL_NVIC_EnableIRQ>

}
 8001268:	bf00      	nop
 800126a:	3728      	adds	r7, #40	; 0x28
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40023800 	.word	0x40023800
 8001274:	40020c00 	.word	0x40020c00
 8001278:	10110000 	.word	0x10110000
 800127c:	40020000 	.word	0x40020000

08001280 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001284:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001286:	e7fe      	b.n	8001286 <Error_Handler+0x6>

08001288 <fill_buffer>:
int active_count = 0;
int table_steps[88];
int table_indeces[88];


void fill_buffer(uint16_t * buffer, int num_samples) {
 8001288:	b480      	push	{r7}
 800128a:	b087      	sub	sp, #28
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
 8001290:	6039      	str	r1, [r7, #0]
	int i, j, note, sample;
	for (i = 0; i < num_samples; i+=2) {
 8001292:	2300      	movs	r3, #0
 8001294:	617b      	str	r3, [r7, #20]
 8001296:	e056      	b.n	8001346 <fill_buffer+0xbe>
		sample = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < active_count; j++) {
 800129c:	2300      	movs	r3, #0
 800129e:	613b      	str	r3, [r7, #16]
 80012a0:	e035      	b.n	800130e <fill_buffer+0x86>
			note = active_notes[j];
 80012a2:	4a2e      	ldr	r2, [pc, #184]	; (800135c <fill_buffer+0xd4>)
 80012a4:	693b      	ldr	r3, [r7, #16]
 80012a6:	4413      	add	r3, r2
 80012a8:	781b      	ldrb	r3, [r3, #0]
 80012aa:	60bb      	str	r3, [r7, #8]
			sample += wavetable[table_indeces[note] >> 16];
 80012ac:	4a2c      	ldr	r2, [pc, #176]	; (8001360 <fill_buffer+0xd8>)
 80012ae:	68bb      	ldr	r3, [r7, #8]
 80012b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012b4:	141b      	asrs	r3, r3, #16
 80012b6:	4a2b      	ldr	r2, [pc, #172]	; (8001364 <fill_buffer+0xdc>)
 80012b8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80012bc:	461a      	mov	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	4413      	add	r3, r2
 80012c2:	60fb      	str	r3, [r7, #12]
			table_indeces[note] += table_steps[note];
 80012c4:	4a26      	ldr	r2, [pc, #152]	; (8001360 <fill_buffer+0xd8>)
 80012c6:	68bb      	ldr	r3, [r7, #8]
 80012c8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012cc:	4926      	ldr	r1, [pc, #152]	; (8001368 <fill_buffer+0xe0>)
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80012d4:	441a      	add	r2, r3
 80012d6:	4922      	ldr	r1, [pc, #136]	; (8001360 <fill_buffer+0xd8>)
 80012d8:	68bb      	ldr	r3, [r7, #8]
 80012da:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if ((table_indeces[note] >> 16) >= TABLESIZE)
 80012de:	4a20      	ldr	r2, [pc, #128]	; (8001360 <fill_buffer+0xd8>)
 80012e0:	68bb      	ldr	r3, [r7, #8]
 80012e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012e6:	141a      	asrs	r2, r3, #16
 80012e8:	4b20      	ldr	r3, [pc, #128]	; (800136c <fill_buffer+0xe4>)
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	429a      	cmp	r2, r3
 80012ee:	db0b      	blt.n	8001308 <fill_buffer+0x80>
				table_indeces[note] -= TABLESIZE << 16;
 80012f0:	4a1b      	ldr	r2, [pc, #108]	; (8001360 <fill_buffer+0xd8>)
 80012f2:	68bb      	ldr	r3, [r7, #8]
 80012f4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80012f8:	4b1c      	ldr	r3, [pc, #112]	; (800136c <fill_buffer+0xe4>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	041b      	lsls	r3, r3, #16
 80012fe:	1ad2      	subs	r2, r2, r3
 8001300:	4917      	ldr	r1, [pc, #92]	; (8001360 <fill_buffer+0xd8>)
 8001302:	68bb      	ldr	r3, [r7, #8]
 8001304:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (j = 0; j < active_count; j++) {
 8001308:	693b      	ldr	r3, [r7, #16]
 800130a:	3301      	adds	r3, #1
 800130c:	613b      	str	r3, [r7, #16]
 800130e:	4b18      	ldr	r3, [pc, #96]	; (8001370 <fill_buffer+0xe8>)
 8001310:	681b      	ldr	r3, [r3, #0]
 8001312:	693a      	ldr	r2, [r7, #16]
 8001314:	429a      	cmp	r2, r3
 8001316:	dbc4      	blt.n	80012a2 <fill_buffer+0x1a>
		}
//		sample /= 16;
//		sample /= 32;
		sample /= 64;
 8001318:	68fb      	ldr	r3, [r7, #12]
 800131a:	2b00      	cmp	r3, #0
 800131c:	da00      	bge.n	8001320 <fill_buffer+0x98>
 800131e:	333f      	adds	r3, #63	; 0x3f
 8001320:	119b      	asrs	r3, r3, #6
 8001322:	60fb      	str	r3, [r7, #12]
//		sample /= 2;
//		if (sample > 0xffff)
//			while(1);
		//sample = 0xffff;
		buffer[i] = buffer[i+1] = sample;
 8001324:	697b      	ldr	r3, [r7, #20]
 8001326:	3301      	adds	r3, #1
 8001328:	005b      	lsls	r3, r3, #1
 800132a:	687a      	ldr	r2, [r7, #4]
 800132c:	4413      	add	r3, r2
 800132e:	68fa      	ldr	r2, [r7, #12]
 8001330:	b292      	uxth	r2, r2
 8001332:	801a      	strh	r2, [r3, #0]
 8001334:	697a      	ldr	r2, [r7, #20]
 8001336:	0052      	lsls	r2, r2, #1
 8001338:	6879      	ldr	r1, [r7, #4]
 800133a:	440a      	add	r2, r1
 800133c:	881b      	ldrh	r3, [r3, #0]
 800133e:	8013      	strh	r3, [r2, #0]
	for (i = 0; i < num_samples; i+=2) {
 8001340:	697b      	ldr	r3, [r7, #20]
 8001342:	3302      	adds	r3, #2
 8001344:	617b      	str	r3, [r7, #20]
 8001346:	697a      	ldr	r2, [r7, #20]
 8001348:	683b      	ldr	r3, [r7, #0]
 800134a:	429a      	cmp	r2, r3
 800134c:	dba4      	blt.n	8001298 <fill_buffer+0x10>
	}
}
 800134e:	bf00      	nop
 8001350:	371c      	adds	r7, #28
 8001352:	46bd      	mov	sp, r7
 8001354:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001358:	4770      	bx	lr
 800135a:	bf00      	nop
 800135c:	2000351c 	.word	0x2000351c
 8001360:	20002094 	.word	0x20002094
 8001364:	20002354 	.word	0x20002354
 8001368:	200021f4 	.word	0x200021f4
 800136c:	08005b30 	.word	0x08005b30
 8001370:	20000090 	.word	0x20000090
 8001374:	00000000 	.word	0x00000000

08001378 <init_note_steps>:

void init_note_steps(void) {
 8001378:	b590      	push	{r4, r7, lr}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
	double freq;
	for (int k = 0; k < 88; k++) {
 800137e:	2300      	movs	r3, #0
 8001380:	60fb      	str	r3, [r7, #12]
 8001382:	e040      	b.n	8001406 <init_note_steps+0x8e>
		freq = pow(1.05946309436, k - 48) * 440;
 8001384:	68fb      	ldr	r3, [r7, #12]
 8001386:	3b30      	subs	r3, #48	; 0x30
 8001388:	4618      	mov	r0, r3
 800138a:	f7ff f86f 	bl	800046c <__aeabi_i2d>
 800138e:	4603      	mov	r3, r0
 8001390:	460c      	mov	r4, r1
 8001392:	ec44 3b11 	vmov	d1, r3, r4
 8001396:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8001418 <init_note_steps+0xa0>
 800139a:	f003 fb63 	bl	8004a64 <pow>
 800139e:	ec51 0b10 	vmov	r0, r1, d0
 80013a2:	f04f 0200 	mov.w	r2, #0
 80013a6:	4b20      	ldr	r3, [pc, #128]	; (8001428 <init_note_steps+0xb0>)
 80013a8:	f7ff f8ca 	bl	8000540 <__aeabi_dmul>
 80013ac:	4603      	mov	r3, r0
 80013ae:	460c      	mov	r4, r1
 80013b0:	e9c7 3400 	strd	r3, r4, [r7]
		table_steps[k] = freq * TABLESIZE / 48000 * (1 << 16);
 80013b4:	4b1d      	ldr	r3, [pc, #116]	; (800142c <init_note_steps+0xb4>)
 80013b6:	681b      	ldr	r3, [r3, #0]
 80013b8:	4618      	mov	r0, r3
 80013ba:	f7ff f857 	bl	800046c <__aeabi_i2d>
 80013be:	e9d7 2300 	ldrd	r2, r3, [r7]
 80013c2:	f7ff f8bd 	bl	8000540 <__aeabi_dmul>
 80013c6:	4603      	mov	r3, r0
 80013c8:	460c      	mov	r4, r1
 80013ca:	4618      	mov	r0, r3
 80013cc:	4621      	mov	r1, r4
 80013ce:	a314      	add	r3, pc, #80	; (adr r3, 8001420 <init_note_steps+0xa8>)
 80013d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80013d4:	f7ff f9de 	bl	8000794 <__aeabi_ddiv>
 80013d8:	4603      	mov	r3, r0
 80013da:	460c      	mov	r4, r1
 80013dc:	4618      	mov	r0, r3
 80013de:	4621      	mov	r1, r4
 80013e0:	f04f 0200 	mov.w	r2, #0
 80013e4:	4b12      	ldr	r3, [pc, #72]	; (8001430 <init_note_steps+0xb8>)
 80013e6:	f7ff f8ab 	bl	8000540 <__aeabi_dmul>
 80013ea:	4603      	mov	r3, r0
 80013ec:	460c      	mov	r4, r1
 80013ee:	4618      	mov	r0, r3
 80013f0:	4621      	mov	r1, r4
 80013f2:	f7ff fb55 	bl	8000aa0 <__aeabi_d2iz>
 80013f6:	4601      	mov	r1, r0
 80013f8:	4a0e      	ldr	r2, [pc, #56]	; (8001434 <init_note_steps+0xbc>)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int k = 0; k < 88; k++) {
 8001400:	68fb      	ldr	r3, [r7, #12]
 8001402:	3301      	adds	r3, #1
 8001404:	60fb      	str	r3, [r7, #12]
 8001406:	68fb      	ldr	r3, [r7, #12]
 8001408:	2b57      	cmp	r3, #87	; 0x57
 800140a:	ddbb      	ble.n	8001384 <init_note_steps+0xc>
	}
}
 800140c:	bf00      	nop
 800140e:	3714      	adds	r7, #20
 8001410:	46bd      	mov	sp, r7
 8001412:	bd90      	pop	{r4, r7, pc}
 8001414:	f3af 8000 	nop.w
 8001418:	92d985c9 	.word	0x92d985c9
 800141c:	3ff0f38f 	.word	0x3ff0f38f
 8001420:	00000000 	.word	0x00000000
 8001424:	40e77000 	.word	0x40e77000
 8001428:	407b8000 	.word	0x407b8000
 800142c:	08005b30 	.word	0x08005b30
 8001430:	40f00000 	.word	0x40f00000
 8001434:	200021f4 	.word	0x200021f4

08001438 <HAL_I2S_TxHalfCpltCallback>:


void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001438:	b580      	push	{r7, lr}
 800143a:	b082      	sub	sp, #8
 800143c:	af00      	add	r7, sp, #0
 800143e:	6078      	str	r0, [r7, #4]
//	if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
//		active_count = 0;
	fill_buffer(&buffer[0], BUFSIZE / 2);
 8001440:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001444:	4803      	ldr	r0, [pc, #12]	; (8001454 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 8001446:	f7ff ff1f 	bl	8001288 <fill_buffer>
}
 800144a:	bf00      	nop
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000094 	.word	0x20000094

08001458 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 8001458:	b580      	push	{r7, lr}
 800145a:	b082      	sub	sp, #8
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
	fill_buffer(&buffer[BUFSIZE / 2], BUFSIZE / 2);
 8001460:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8001464:	4803      	ldr	r0, [pc, #12]	; (8001474 <HAL_I2S_TxCpltCallback+0x1c>)
 8001466:	f7ff ff0f 	bl	8001288 <fill_buffer>
}
 800146a:	bf00      	nop
 800146c:	3708      	adds	r7, #8
 800146e:	46bd      	mov	sp, r7
 8001470:	bd80      	pop	{r7, pc}
 8001472:	bf00      	nop
 8001474:	20000894 	.word	0x20000894

08001478 <HAL_GPIO_EXTI_Callback>:

 void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8001478:	b480      	push	{r7}
 800147a:	b083      	sub	sp, #12
 800147c:	af00      	add	r7, sp, #0
 800147e:	4603      	mov	r3, r0
 8001480:	80fb      	strh	r3, [r7, #6]
//	 for (int i = 1; i < active_count; i++)
//		 active_notes[i-1] = active_notes[i];
	 active_count--;
 8001482:	4b05      	ldr	r3, [pc, #20]	; (8001498 <HAL_GPIO_EXTI_Callback+0x20>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	3b01      	subs	r3, #1
 8001488:	4a03      	ldr	r2, [pc, #12]	; (8001498 <HAL_GPIO_EXTI_Callback+0x20>)
 800148a:	6013      	str	r3, [r2, #0]
 }
 800148c:	bf00      	nop
 800148e:	370c      	adds	r7, #12
 8001490:	46bd      	mov	sp, r7
 8001492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001496:	4770      	bx	lr
 8001498:	20000090 	.word	0x20000090

0800149c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800149c:	b480      	push	{r7}
 800149e:	b083      	sub	sp, #12
 80014a0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014a2:	2300      	movs	r3, #0
 80014a4:	607b      	str	r3, [r7, #4]
 80014a6:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <HAL_MspInit+0x4c>)
 80014a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014aa:	4a0f      	ldr	r2, [pc, #60]	; (80014e8 <HAL_MspInit+0x4c>)
 80014ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014b0:	6453      	str	r3, [r2, #68]	; 0x44
 80014b2:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <HAL_MspInit+0x4c>)
 80014b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80014ba:	607b      	str	r3, [r7, #4]
 80014bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014be:	2300      	movs	r3, #0
 80014c0:	603b      	str	r3, [r7, #0]
 80014c2:	4b09      	ldr	r3, [pc, #36]	; (80014e8 <HAL_MspInit+0x4c>)
 80014c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c6:	4a08      	ldr	r2, [pc, #32]	; (80014e8 <HAL_MspInit+0x4c>)
 80014c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014cc:	6413      	str	r3, [r2, #64]	; 0x40
 80014ce:	4b06      	ldr	r3, [pc, #24]	; (80014e8 <HAL_MspInit+0x4c>)
 80014d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	603b      	str	r3, [r7, #0]
 80014d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr
 80014e6:	bf00      	nop
 80014e8:	40023800 	.word	0x40023800

080014ec <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b08a      	sub	sp, #40	; 0x28
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014f4:	f107 0314 	add.w	r3, r7, #20
 80014f8:	2200      	movs	r2, #0
 80014fa:	601a      	str	r2, [r3, #0]
 80014fc:	605a      	str	r2, [r3, #4]
 80014fe:	609a      	str	r2, [r3, #8]
 8001500:	60da      	str	r2, [r3, #12]
 8001502:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a40      	ldr	r2, [pc, #256]	; (800160c <HAL_I2S_MspInit+0x120>)
 800150a:	4293      	cmp	r3, r2
 800150c:	d17a      	bne.n	8001604 <HAL_I2S_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800150e:	2300      	movs	r3, #0
 8001510:	613b      	str	r3, [r7, #16]
 8001512:	4b3f      	ldr	r3, [pc, #252]	; (8001610 <HAL_I2S_MspInit+0x124>)
 8001514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001516:	4a3e      	ldr	r2, [pc, #248]	; (8001610 <HAL_I2S_MspInit+0x124>)
 8001518:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800151c:	6413      	str	r3, [r2, #64]	; 0x40
 800151e:	4b3c      	ldr	r3, [pc, #240]	; (8001610 <HAL_I2S_MspInit+0x124>)
 8001520:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001522:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001526:	613b      	str	r3, [r7, #16]
 8001528:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800152a:	2300      	movs	r3, #0
 800152c:	60fb      	str	r3, [r7, #12]
 800152e:	4b38      	ldr	r3, [pc, #224]	; (8001610 <HAL_I2S_MspInit+0x124>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	4a37      	ldr	r2, [pc, #220]	; (8001610 <HAL_I2S_MspInit+0x124>)
 8001534:	f043 0304 	orr.w	r3, r3, #4
 8001538:	6313      	str	r3, [r2, #48]	; 0x30
 800153a:	4b35      	ldr	r3, [pc, #212]	; (8001610 <HAL_I2S_MspInit+0x124>)
 800153c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153e:	f003 0304 	and.w	r3, r3, #4
 8001542:	60fb      	str	r3, [r7, #12]
 8001544:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001546:	2300      	movs	r3, #0
 8001548:	60bb      	str	r3, [r7, #8]
 800154a:	4b31      	ldr	r3, [pc, #196]	; (8001610 <HAL_I2S_MspInit+0x124>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	4a30      	ldr	r2, [pc, #192]	; (8001610 <HAL_I2S_MspInit+0x124>)
 8001550:	f043 0302 	orr.w	r3, r3, #2
 8001554:	6313      	str	r3, [r2, #48]	; 0x30
 8001556:	4b2e      	ldr	r3, [pc, #184]	; (8001610 <HAL_I2S_MspInit+0x124>)
 8001558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155a:	f003 0302 	and.w	r3, r3, #2
 800155e:	60bb      	str	r3, [r7, #8]
 8001560:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001562:	2308      	movs	r3, #8
 8001564:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001566:	2302      	movs	r3, #2
 8001568:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156a:	2300      	movs	r3, #0
 800156c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800156e:	2300      	movs	r3, #0
 8001570:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001572:	2305      	movs	r3, #5
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001576:	f107 0314 	add.w	r3, r7, #20
 800157a:	4619      	mov	r1, r3
 800157c:	4825      	ldr	r0, [pc, #148]	; (8001614 <HAL_I2S_MspInit+0x128>)
 800157e:	f000 feb3 	bl	80022e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 8001582:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001586:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001588:	2302      	movs	r3, #2
 800158a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800158c:	2300      	movs	r3, #0
 800158e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001590:	2300      	movs	r3, #0
 8001592:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001594:	2305      	movs	r3, #5
 8001596:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	481e      	ldr	r0, [pc, #120]	; (8001618 <HAL_I2S_MspInit+0x12c>)
 80015a0:	f000 fea2 	bl	80022e8 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80015a4:	4b1d      	ldr	r3, [pc, #116]	; (800161c <HAL_I2S_MspInit+0x130>)
 80015a6:	4a1e      	ldr	r2, [pc, #120]	; (8001620 <HAL_I2S_MspInit+0x134>)
 80015a8:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80015aa:	4b1c      	ldr	r3, [pc, #112]	; (800161c <HAL_I2S_MspInit+0x130>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015b0:	4b1a      	ldr	r3, [pc, #104]	; (800161c <HAL_I2S_MspInit+0x130>)
 80015b2:	2240      	movs	r2, #64	; 0x40
 80015b4:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015b6:	4b19      	ldr	r3, [pc, #100]	; (800161c <HAL_I2S_MspInit+0x130>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80015bc:	4b17      	ldr	r3, [pc, #92]	; (800161c <HAL_I2S_MspInit+0x130>)
 80015be:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80015c2:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80015c4:	4b15      	ldr	r3, [pc, #84]	; (800161c <HAL_I2S_MspInit+0x130>)
 80015c6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80015ca:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80015cc:	4b13      	ldr	r3, [pc, #76]	; (800161c <HAL_I2S_MspInit+0x130>)
 80015ce:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80015d2:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 80015d4:	4b11      	ldr	r3, [pc, #68]	; (800161c <HAL_I2S_MspInit+0x130>)
 80015d6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80015da:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80015dc:	4b0f      	ldr	r3, [pc, #60]	; (800161c <HAL_I2S_MspInit+0x130>)
 80015de:	2200      	movs	r2, #0
 80015e0:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80015e2:	4b0e      	ldr	r3, [pc, #56]	; (800161c <HAL_I2S_MspInit+0x130>)
 80015e4:	2200      	movs	r2, #0
 80015e6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 80015e8:	480c      	ldr	r0, [pc, #48]	; (800161c <HAL_I2S_MspInit+0x130>)
 80015ea:	f000 fb0f 	bl	8001c0c <HAL_DMA_Init>
 80015ee:	4603      	mov	r3, r0
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d001      	beq.n	80015f8 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 80015f4:	f7ff fe44 	bl	8001280 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	4a08      	ldr	r2, [pc, #32]	; (800161c <HAL_I2S_MspInit+0x130>)
 80015fc:	639a      	str	r2, [r3, #56]	; 0x38
 80015fe:	4a07      	ldr	r2, [pc, #28]	; (800161c <HAL_I2S_MspInit+0x130>)
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001604:	bf00      	nop
 8001606:	3728      	adds	r7, #40	; 0x28
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}
 800160c:	40003800 	.word	0x40003800
 8001610:	40023800 	.word	0x40023800
 8001614:	40020800 	.word	0x40020800
 8001618:	40020400 	.word	0x40020400
 800161c:	20003474 	.word	0x20003474
 8001620:	40026070 	.word	0x40026070

08001624 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b08a      	sub	sp, #40	; 0x28
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800162c:	f107 0314 	add.w	r3, r7, #20
 8001630:	2200      	movs	r2, #0
 8001632:	601a      	str	r2, [r3, #0]
 8001634:	605a      	str	r2, [r3, #4]
 8001636:	609a      	str	r2, [r3, #8]
 8001638:	60da      	str	r2, [r3, #12]
 800163a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a31      	ldr	r2, [pc, #196]	; (8001708 <HAL_SPI_MspInit+0xe4>)
 8001642:	4293      	cmp	r3, r2
 8001644:	d15c      	bne.n	8001700 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001646:	2300      	movs	r3, #0
 8001648:	613b      	str	r3, [r7, #16]
 800164a:	4b30      	ldr	r3, [pc, #192]	; (800170c <HAL_SPI_MspInit+0xe8>)
 800164c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800164e:	4a2f      	ldr	r2, [pc, #188]	; (800170c <HAL_SPI_MspInit+0xe8>)
 8001650:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001654:	6453      	str	r3, [r2, #68]	; 0x44
 8001656:	4b2d      	ldr	r3, [pc, #180]	; (800170c <HAL_SPI_MspInit+0xe8>)
 8001658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800165a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800165e:	613b      	str	r3, [r7, #16]
 8001660:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001662:	2300      	movs	r3, #0
 8001664:	60fb      	str	r3, [r7, #12]
 8001666:	4b29      	ldr	r3, [pc, #164]	; (800170c <HAL_SPI_MspInit+0xe8>)
 8001668:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800166a:	4a28      	ldr	r2, [pc, #160]	; (800170c <HAL_SPI_MspInit+0xe8>)
 800166c:	f043 0301 	orr.w	r3, r3, #1
 8001670:	6313      	str	r3, [r2, #48]	; 0x30
 8001672:	4b26      	ldr	r3, [pc, #152]	; (800170c <HAL_SPI_MspInit+0xe8>)
 8001674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	60fb      	str	r3, [r7, #12]
 800167c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 800167e:	23b0      	movs	r3, #176	; 0xb0
 8001680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001682:	2302      	movs	r3, #2
 8001684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800168a:	2303      	movs	r3, #3
 800168c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800168e:	2305      	movs	r3, #5
 8001690:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001692:	f107 0314 	add.w	r3, r7, #20
 8001696:	4619      	mov	r1, r3
 8001698:	481d      	ldr	r0, [pc, #116]	; (8001710 <HAL_SPI_MspInit+0xec>)
 800169a:	f000 fe25 	bl	80022e8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 800169e:	4b1d      	ldr	r3, [pc, #116]	; (8001714 <HAL_SPI_MspInit+0xf0>)
 80016a0:	4a1d      	ldr	r2, [pc, #116]	; (8001718 <HAL_SPI_MspInit+0xf4>)
 80016a2:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <HAL_SPI_MspInit+0xf0>)
 80016a6:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80016aa:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016ac:	4b19      	ldr	r3, [pc, #100]	; (8001714 <HAL_SPI_MspInit+0xf0>)
 80016ae:	2200      	movs	r2, #0
 80016b0:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016b2:	4b18      	ldr	r3, [pc, #96]	; (8001714 <HAL_SPI_MspInit+0xf0>)
 80016b4:	2200      	movs	r2, #0
 80016b6:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80016b8:	4b16      	ldr	r3, [pc, #88]	; (8001714 <HAL_SPI_MspInit+0xf0>)
 80016ba:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80016be:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80016c0:	4b14      	ldr	r3, [pc, #80]	; (8001714 <HAL_SPI_MspInit+0xf0>)
 80016c2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80016c6:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80016c8:	4b12      	ldr	r3, [pc, #72]	; (8001714 <HAL_SPI_MspInit+0xf0>)
 80016ca:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80016ce:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 80016d0:	4b10      	ldr	r3, [pc, #64]	; (8001714 <HAL_SPI_MspInit+0xf0>)
 80016d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80016d6:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016d8:	4b0e      	ldr	r3, [pc, #56]	; (8001714 <HAL_SPI_MspInit+0xf0>)
 80016da:	2200      	movs	r2, #0
 80016dc:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80016de:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_SPI_MspInit+0xf0>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80016e4:	480b      	ldr	r0, [pc, #44]	; (8001714 <HAL_SPI_MspInit+0xf0>)
 80016e6:	f000 fa91 	bl	8001c0c <HAL_DMA_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 80016f0:	f7ff fdc6 	bl	8001280 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	4a07      	ldr	r2, [pc, #28]	; (8001714 <HAL_SPI_MspInit+0xf0>)
 80016f8:	64da      	str	r2, [r3, #76]	; 0x4c
 80016fa:	4a06      	ldr	r2, [pc, #24]	; (8001714 <HAL_SPI_MspInit+0xf0>)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001700:	bf00      	nop
 8001702:	3728      	adds	r7, #40	; 0x28
 8001704:	46bd      	mov	sp, r7
 8001706:	bd80      	pop	{r7, pc}
 8001708:	40013000 	.word	0x40013000
 800170c:	40023800 	.word	0x40023800
 8001710:	40020000 	.word	0x40020000
 8001714:	20003414 	.word	0x20003414
 8001718:	40026410 	.word	0x40026410

0800171c <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b08a      	sub	sp, #40	; 0x28
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001724:	f107 0314 	add.w	r3, r7, #20
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800173c:	d132      	bne.n	80017a4 <HAL_HCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	4b1a      	ldr	r3, [pc, #104]	; (80017ac <HAL_HCD_MspInit+0x90>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a19      	ldr	r2, [pc, #100]	; (80017ac <HAL_HCD_MspInit+0x90>)
 8001748:	f043 0301 	orr.w	r3, r3, #1
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b17      	ldr	r3, [pc, #92]	; (80017ac <HAL_HCD_MspInit+0x90>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0301 	and.w	r3, r3, #1
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800175a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800175e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800176c:	230a      	movs	r3, #10
 800176e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 0314 	add.w	r3, r7, #20
 8001774:	4619      	mov	r1, r3
 8001776:	480e      	ldr	r0, [pc, #56]	; (80017b0 <HAL_HCD_MspInit+0x94>)
 8001778:	f000 fdb6 	bl	80022e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800177c:	4b0b      	ldr	r3, [pc, #44]	; (80017ac <HAL_HCD_MspInit+0x90>)
 800177e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001780:	4a0a      	ldr	r2, [pc, #40]	; (80017ac <HAL_HCD_MspInit+0x90>)
 8001782:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001786:	6353      	str	r3, [r2, #52]	; 0x34
 8001788:	2300      	movs	r3, #0
 800178a:	60fb      	str	r3, [r7, #12]
 800178c:	4b07      	ldr	r3, [pc, #28]	; (80017ac <HAL_HCD_MspInit+0x90>)
 800178e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001790:	4a06      	ldr	r2, [pc, #24]	; (80017ac <HAL_HCD_MspInit+0x90>)
 8001792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001796:	6453      	str	r3, [r2, #68]	; 0x44
 8001798:	4b04      	ldr	r3, [pc, #16]	; (80017ac <HAL_HCD_MspInit+0x90>)
 800179a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800179c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017a0:	60fb      	str	r3, [r7, #12]
 80017a2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80017a4:	bf00      	nop
 80017a6:	3728      	adds	r7, #40	; 0x28
 80017a8:	46bd      	mov	sp, r7
 80017aa:	bd80      	pop	{r7, pc}
 80017ac:	40023800 	.word	0x40023800
 80017b0:	40020000 	.word	0x40020000

080017b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017b4:	b480      	push	{r7}
 80017b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017b8:	e7fe      	b.n	80017b8 <NMI_Handler+0x4>

080017ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017ba:	b480      	push	{r7}
 80017bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017be:	e7fe      	b.n	80017be <HardFault_Handler+0x4>

080017c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017c4:	e7fe      	b.n	80017c4 <MemManage_Handler+0x4>

080017c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017c6:	b480      	push	{r7}
 80017c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ca:	e7fe      	b.n	80017ca <BusFault_Handler+0x4>

080017cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017cc:	b480      	push	{r7}
 80017ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017d0:	e7fe      	b.n	80017d0 <UsageFault_Handler+0x4>

080017d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017d2:	b480      	push	{r7}
 80017d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017d6:	bf00      	nop
 80017d8:	46bd      	mov	sp, r7
 80017da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017de:	4770      	bx	lr

080017e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr

080017ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017ee:	b480      	push	{r7}
 80017f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017f2:	bf00      	nop
 80017f4:	46bd      	mov	sp, r7
 80017f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fa:	4770      	bx	lr

080017fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001800:	f000 f8b0 	bl	8001964 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001804:	bf00      	nop
 8001806:	bd80      	pop	{r7, pc}

08001808 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 800180c:	2001      	movs	r0, #1
 800180e:	f000 ff39 	bl	8002684 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	bd80      	pop	{r7, pc}
	...

08001818 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001818:	b580      	push	{r7, lr}
 800181a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 800181c:	4802      	ldr	r0, [pc, #8]	; (8001828 <DMA1_Stream4_IRQHandler+0x10>)
 800181e:	f000 fafb 	bl	8001e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001822:	bf00      	nop
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	20003474 	.word	0x20003474

0800182c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800182c:	b580      	push	{r7, lr}
 800182e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001830:	4802      	ldr	r0, [pc, #8]	; (800183c <DMA2_Stream0_IRQHandler+0x10>)
 8001832:	f000 faf1 	bl	8001e18 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20003414 	.word	0x20003414

08001840 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001840:	b480      	push	{r7}
 8001842:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001844:	4b08      	ldr	r3, [pc, #32]	; (8001868 <SystemInit+0x28>)
 8001846:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800184a:	4a07      	ldr	r2, [pc, #28]	; (8001868 <SystemInit+0x28>)
 800184c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001850:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001854:	4b04      	ldr	r3, [pc, #16]	; (8001868 <SystemInit+0x28>)
 8001856:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800185a:	609a      	str	r2, [r3, #8]
#endif
}
 800185c:	bf00      	nop
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800186c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8001870:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8001872:	e003      	b.n	800187c <LoopCopyDataInit>

08001874 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8001874:	4b0c      	ldr	r3, [pc, #48]	; (80018a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8001876:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8001878:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800187a:	3104      	adds	r1, #4

0800187c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800187c:	480b      	ldr	r0, [pc, #44]	; (80018ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800187e:	4b0c      	ldr	r3, [pc, #48]	; (80018b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8001880:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8001882:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8001884:	d3f6      	bcc.n	8001874 <CopyDataInit>
  ldr  r2, =_sbss
 8001886:	4a0b      	ldr	r2, [pc, #44]	; (80018b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8001888:	e002      	b.n	8001890 <LoopFillZerobss>

0800188a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800188a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800188c:	f842 3b04 	str.w	r3, [r2], #4

08001890 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8001892:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8001894:	d3f9      	bcc.n	800188a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8001896:	f7ff ffd3 	bl	8001840 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800189a:	f003 f8b7 	bl	8004a0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800189e:	f7ff fae3 	bl	8000e68 <main>
  bx  lr    
 80018a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018a4:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80018a8:	08005ba8 	.word	0x08005ba8
  ldr  r0, =_sdata
 80018ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018b0:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80018b4:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 80018b8:	2000352c 	.word	0x2000352c

080018bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80018bc:	e7fe      	b.n	80018bc <ADC_IRQHandler>
	...

080018c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80018c4:	4b0e      	ldr	r3, [pc, #56]	; (8001900 <HAL_Init+0x40>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a0d      	ldr	r2, [pc, #52]	; (8001900 <HAL_Init+0x40>)
 80018ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80018ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018d0:	4b0b      	ldr	r3, [pc, #44]	; (8001900 <HAL_Init+0x40>)
 80018d2:	681b      	ldr	r3, [r3, #0]
 80018d4:	4a0a      	ldr	r2, [pc, #40]	; (8001900 <HAL_Init+0x40>)
 80018d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018dc:	4b08      	ldr	r3, [pc, #32]	; (8001900 <HAL_Init+0x40>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4a07      	ldr	r2, [pc, #28]	; (8001900 <HAL_Init+0x40>)
 80018e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e8:	2003      	movs	r0, #3
 80018ea:	f000 f94d 	bl	8001b88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018ee:	2000      	movs	r0, #0
 80018f0:	f000 f808 	bl	8001904 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018f4:	f7ff fdd2 	bl	800149c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018f8:	2300      	movs	r3, #0
}
 80018fa:	4618      	mov	r0, r3
 80018fc:	bd80      	pop	{r7, pc}
 80018fe:	bf00      	nop
 8001900:	40023c00 	.word	0x40023c00

08001904 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b082      	sub	sp, #8
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800190c:	4b12      	ldr	r3, [pc, #72]	; (8001958 <HAL_InitTick+0x54>)
 800190e:	681a      	ldr	r2, [r3, #0]
 8001910:	4b12      	ldr	r3, [pc, #72]	; (800195c <HAL_InitTick+0x58>)
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	4619      	mov	r1, r3
 8001916:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800191a:	fbb3 f3f1 	udiv	r3, r3, r1
 800191e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f965 	bl	8001bf2 <HAL_SYSTICK_Config>
 8001928:	4603      	mov	r3, r0
 800192a:	2b00      	cmp	r3, #0
 800192c:	d001      	beq.n	8001932 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800192e:	2301      	movs	r3, #1
 8001930:	e00e      	b.n	8001950 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b0f      	cmp	r3, #15
 8001936:	d80a      	bhi.n	800194e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001938:	2200      	movs	r2, #0
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	f04f 30ff 	mov.w	r0, #4294967295
 8001940:	f000 f92d 	bl	8001b9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001944:	4a06      	ldr	r2, [pc, #24]	; (8001960 <HAL_InitTick+0x5c>)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800194a:	2300      	movs	r3, #0
 800194c:	e000      	b.n	8001950 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800194e:	2301      	movs	r3, #1
}
 8001950:	4618      	mov	r0, r3
 8001952:	3708      	adds	r7, #8
 8001954:	46bd      	mov	sp, r7
 8001956:	bd80      	pop	{r7, pc}
 8001958:	20000000 	.word	0x20000000
 800195c:	20000008 	.word	0x20000008
 8001960:	20000004 	.word	0x20000004

08001964 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001964:	b480      	push	{r7}
 8001966:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001968:	4b06      	ldr	r3, [pc, #24]	; (8001984 <HAL_IncTick+0x20>)
 800196a:	781b      	ldrb	r3, [r3, #0]
 800196c:	461a      	mov	r2, r3
 800196e:	4b06      	ldr	r3, [pc, #24]	; (8001988 <HAL_IncTick+0x24>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4413      	add	r3, r2
 8001974:	4a04      	ldr	r2, [pc, #16]	; (8001988 <HAL_IncTick+0x24>)
 8001976:	6013      	str	r3, [r2, #0]
}
 8001978:	bf00      	nop
 800197a:	46bd      	mov	sp, r7
 800197c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001980:	4770      	bx	lr
 8001982:	bf00      	nop
 8001984:	20000008 	.word	0x20000008
 8001988:	20003528 	.word	0x20003528

0800198c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800198c:	b480      	push	{r7}
 800198e:	af00      	add	r7, sp, #0
  return uwTick;
 8001990:	4b03      	ldr	r3, [pc, #12]	; (80019a0 <HAL_GetTick+0x14>)
 8001992:	681b      	ldr	r3, [r3, #0]
}
 8001994:	4618      	mov	r0, r3
 8001996:	46bd      	mov	sp, r7
 8001998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199c:	4770      	bx	lr
 800199e:	bf00      	nop
 80019a0:	20003528 	.word	0x20003528

080019a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019ac:	f7ff ffee 	bl	800198c <HAL_GetTick>
 80019b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019b6:	68fb      	ldr	r3, [r7, #12]
 80019b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019bc:	d005      	beq.n	80019ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80019be:	4b09      	ldr	r3, [pc, #36]	; (80019e4 <HAL_Delay+0x40>)
 80019c0:	781b      	ldrb	r3, [r3, #0]
 80019c2:	461a      	mov	r2, r3
 80019c4:	68fb      	ldr	r3, [r7, #12]
 80019c6:	4413      	add	r3, r2
 80019c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80019ca:	bf00      	nop
 80019cc:	f7ff ffde 	bl	800198c <HAL_GetTick>
 80019d0:	4602      	mov	r2, r0
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	68fa      	ldr	r2, [r7, #12]
 80019d8:	429a      	cmp	r2, r3
 80019da:	d8f7      	bhi.n	80019cc <HAL_Delay+0x28>
  {
  }
}
 80019dc:	bf00      	nop
 80019de:	3710      	adds	r7, #16
 80019e0:	46bd      	mov	sp, r7
 80019e2:	bd80      	pop	{r7, pc}
 80019e4:	20000008 	.word	0x20000008

080019e8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019e8:	b480      	push	{r7}
 80019ea:	b085      	sub	sp, #20
 80019ec:	af00      	add	r7, sp, #0
 80019ee:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	f003 0307 	and.w	r3, r3, #7
 80019f6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019fe:	68ba      	ldr	r2, [r7, #8]
 8001a00:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a04:	4013      	ands	r3, r2
 8001a06:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a10:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a14:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a18:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a1a:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <__NVIC_SetPriorityGrouping+0x44>)
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	60d3      	str	r3, [r2, #12]
}
 8001a20:	bf00      	nop
 8001a22:	3714      	adds	r7, #20
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000ed00 	.word	0xe000ed00

08001a30 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a34:	4b04      	ldr	r3, [pc, #16]	; (8001a48 <__NVIC_GetPriorityGrouping+0x18>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	0a1b      	lsrs	r3, r3, #8
 8001a3a:	f003 0307 	and.w	r3, r3, #7
}
 8001a3e:	4618      	mov	r0, r3
 8001a40:	46bd      	mov	sp, r7
 8001a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a46:	4770      	bx	lr
 8001a48:	e000ed00 	.word	0xe000ed00

08001a4c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	b083      	sub	sp, #12
 8001a50:	af00      	add	r7, sp, #0
 8001a52:	4603      	mov	r3, r0
 8001a54:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	db0b      	blt.n	8001a76 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	f003 021f 	and.w	r2, r3, #31
 8001a64:	4907      	ldr	r1, [pc, #28]	; (8001a84 <__NVIC_EnableIRQ+0x38>)
 8001a66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6a:	095b      	lsrs	r3, r3, #5
 8001a6c:	2001      	movs	r0, #1
 8001a6e:	fa00 f202 	lsl.w	r2, r0, r2
 8001a72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a76:	bf00      	nop
 8001a78:	370c      	adds	r7, #12
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a80:	4770      	bx	lr
 8001a82:	bf00      	nop
 8001a84:	e000e100 	.word	0xe000e100

08001a88 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a88:	b480      	push	{r7}
 8001a8a:	b083      	sub	sp, #12
 8001a8c:	af00      	add	r7, sp, #0
 8001a8e:	4603      	mov	r3, r0
 8001a90:	6039      	str	r1, [r7, #0]
 8001a92:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	db0a      	blt.n	8001ab2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a9c:	683b      	ldr	r3, [r7, #0]
 8001a9e:	b2da      	uxtb	r2, r3
 8001aa0:	490c      	ldr	r1, [pc, #48]	; (8001ad4 <__NVIC_SetPriority+0x4c>)
 8001aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa6:	0112      	lsls	r2, r2, #4
 8001aa8:	b2d2      	uxtb	r2, r2
 8001aaa:	440b      	add	r3, r1
 8001aac:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001ab0:	e00a      	b.n	8001ac8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	b2da      	uxtb	r2, r3
 8001ab6:	4908      	ldr	r1, [pc, #32]	; (8001ad8 <__NVIC_SetPriority+0x50>)
 8001ab8:	79fb      	ldrb	r3, [r7, #7]
 8001aba:	f003 030f 	and.w	r3, r3, #15
 8001abe:	3b04      	subs	r3, #4
 8001ac0:	0112      	lsls	r2, r2, #4
 8001ac2:	b2d2      	uxtb	r2, r2
 8001ac4:	440b      	add	r3, r1
 8001ac6:	761a      	strb	r2, [r3, #24]
}
 8001ac8:	bf00      	nop
 8001aca:	370c      	adds	r7, #12
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000e100 	.word	0xe000e100
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001adc:	b480      	push	{r7}
 8001ade:	b089      	sub	sp, #36	; 0x24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	f003 0307 	and.w	r3, r3, #7
 8001aee:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001af0:	69fb      	ldr	r3, [r7, #28]
 8001af2:	f1c3 0307 	rsb	r3, r3, #7
 8001af6:	2b04      	cmp	r3, #4
 8001af8:	bf28      	it	cs
 8001afa:	2304      	movcs	r3, #4
 8001afc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001afe:	69fb      	ldr	r3, [r7, #28]
 8001b00:	3304      	adds	r3, #4
 8001b02:	2b06      	cmp	r3, #6
 8001b04:	d902      	bls.n	8001b0c <NVIC_EncodePriority+0x30>
 8001b06:	69fb      	ldr	r3, [r7, #28]
 8001b08:	3b03      	subs	r3, #3
 8001b0a:	e000      	b.n	8001b0e <NVIC_EncodePriority+0x32>
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b10:	f04f 32ff 	mov.w	r2, #4294967295
 8001b14:	69bb      	ldr	r3, [r7, #24]
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43da      	mvns	r2, r3
 8001b1c:	68bb      	ldr	r3, [r7, #8]
 8001b1e:	401a      	ands	r2, r3
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b24:	f04f 31ff 	mov.w	r1, #4294967295
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	fa01 f303 	lsl.w	r3, r1, r3
 8001b2e:	43d9      	mvns	r1, r3
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b34:	4313      	orrs	r3, r2
         );
}
 8001b36:	4618      	mov	r0, r3
 8001b38:	3724      	adds	r7, #36	; 0x24
 8001b3a:	46bd      	mov	sp, r7
 8001b3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b40:	4770      	bx	lr
	...

08001b44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b082      	sub	sp, #8
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	3b01      	subs	r3, #1
 8001b50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b54:	d301      	bcc.n	8001b5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b56:	2301      	movs	r3, #1
 8001b58:	e00f      	b.n	8001b7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b5a:	4a0a      	ldr	r2, [pc, #40]	; (8001b84 <SysTick_Config+0x40>)
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	3b01      	subs	r3, #1
 8001b60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b62:	210f      	movs	r1, #15
 8001b64:	f04f 30ff 	mov.w	r0, #4294967295
 8001b68:	f7ff ff8e 	bl	8001a88 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b6c:	4b05      	ldr	r3, [pc, #20]	; (8001b84 <SysTick_Config+0x40>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b72:	4b04      	ldr	r3, [pc, #16]	; (8001b84 <SysTick_Config+0x40>)
 8001b74:	2207      	movs	r2, #7
 8001b76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b78:	2300      	movs	r3, #0
}
 8001b7a:	4618      	mov	r0, r3
 8001b7c:	3708      	adds	r7, #8
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	e000e010 	.word	0xe000e010

08001b88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b88:	b580      	push	{r7, lr}
 8001b8a:	b082      	sub	sp, #8
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b90:	6878      	ldr	r0, [r7, #4]
 8001b92:	f7ff ff29 	bl	80019e8 <__NVIC_SetPriorityGrouping>
}
 8001b96:	bf00      	nop
 8001b98:	3708      	adds	r7, #8
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b086      	sub	sp, #24
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	60b9      	str	r1, [r7, #8]
 8001ba8:	607a      	str	r2, [r7, #4]
 8001baa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bac:	2300      	movs	r3, #0
 8001bae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bb0:	f7ff ff3e 	bl	8001a30 <__NVIC_GetPriorityGrouping>
 8001bb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bb6:	687a      	ldr	r2, [r7, #4]
 8001bb8:	68b9      	ldr	r1, [r7, #8]
 8001bba:	6978      	ldr	r0, [r7, #20]
 8001bbc:	f7ff ff8e 	bl	8001adc <NVIC_EncodePriority>
 8001bc0:	4602      	mov	r2, r0
 8001bc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001bc6:	4611      	mov	r1, r2
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7ff ff5d 	bl	8001a88 <__NVIC_SetPriority>
}
 8001bce:	bf00      	nop
 8001bd0:	3718      	adds	r7, #24
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}

08001bd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001bd6:	b580      	push	{r7, lr}
 8001bd8:	b082      	sub	sp, #8
 8001bda:	af00      	add	r7, sp, #0
 8001bdc:	4603      	mov	r3, r0
 8001bde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001be0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001be4:	4618      	mov	r0, r3
 8001be6:	f7ff ff31 	bl	8001a4c <__NVIC_EnableIRQ>
}
 8001bea:	bf00      	nop
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b082      	sub	sp, #8
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bfa:	6878      	ldr	r0, [r7, #4]
 8001bfc:	f7ff ffa2 	bl	8001b44 <SysTick_Config>
 8001c00:	4603      	mov	r3, r0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	3708      	adds	r7, #8
 8001c06:	46bd      	mov	sp, r7
 8001c08:	bd80      	pop	{r7, pc}
	...

08001c0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b086      	sub	sp, #24
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c14:	2300      	movs	r3, #0
 8001c16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c18:	f7ff feb8 	bl	800198c <HAL_GetTick>
 8001c1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	2b00      	cmp	r3, #0
 8001c22:	d101      	bne.n	8001c28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e099      	b.n	8001d5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2202      	movs	r2, #2
 8001c34:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	681a      	ldr	r2, [r3, #0]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	f022 0201 	bic.w	r2, r2, #1
 8001c46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c48:	e00f      	b.n	8001c6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c4a:	f7ff fe9f 	bl	800198c <HAL_GetTick>
 8001c4e:	4602      	mov	r2, r0
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	1ad3      	subs	r3, r2, r3
 8001c54:	2b05      	cmp	r3, #5
 8001c56:	d908      	bls.n	8001c6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	2220      	movs	r2, #32
 8001c5c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001c5e:	687b      	ldr	r3, [r7, #4]
 8001c60:	2203      	movs	r2, #3
 8001c62:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001c66:	2303      	movs	r3, #3
 8001c68:	e078      	b.n	8001d5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	f003 0301 	and.w	r3, r3, #1
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d1e8      	bne.n	8001c4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001c80:	697a      	ldr	r2, [r7, #20]
 8001c82:	4b38      	ldr	r3, [pc, #224]	; (8001d64 <HAL_DMA_Init+0x158>)
 8001c84:	4013      	ands	r3, r2
 8001c86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	685a      	ldr	r2, [r3, #4]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	689b      	ldr	r3, [r3, #8]
 8001c90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001c96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	691b      	ldr	r3, [r3, #16]
 8001c9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ca2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	699b      	ldr	r3, [r3, #24]
 8001ca8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a1b      	ldr	r3, [r3, #32]
 8001cb4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cb6:	697a      	ldr	r2, [r7, #20]
 8001cb8:	4313      	orrs	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cc0:	2b04      	cmp	r3, #4
 8001cc2:	d107      	bne.n	8001cd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ccc:	4313      	orrs	r3, r2
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	697a      	ldr	r2, [r7, #20]
 8001cda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	695b      	ldr	r3, [r3, #20]
 8001ce2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001ce4:	697b      	ldr	r3, [r7, #20]
 8001ce6:	f023 0307 	bic.w	r3, r3, #7
 8001cea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cf0:	697a      	ldr	r2, [r7, #20]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cfa:	2b04      	cmp	r3, #4
 8001cfc:	d117      	bne.n	8001d2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d02:	697a      	ldr	r2, [r7, #20]
 8001d04:	4313      	orrs	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d00e      	beq.n	8001d2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d10:	6878      	ldr	r0, [r7, #4]
 8001d12:	f000 fa6f 	bl	80021f4 <DMA_CheckFifoParam>
 8001d16:	4603      	mov	r3, r0
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d008      	beq.n	8001d2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	2240      	movs	r2, #64	; 0x40
 8001d20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2201      	movs	r2, #1
 8001d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e016      	b.n	8001d5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	697a      	ldr	r2, [r7, #20]
 8001d34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d36:	6878      	ldr	r0, [r7, #4]
 8001d38:	f000 fa26 	bl	8002188 <DMA_CalcBaseAndBitshift>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d44:	223f      	movs	r2, #63	; 0x3f
 8001d46:	409a      	lsls	r2, r3
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	2200      	movs	r2, #0
 8001d50:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	2201      	movs	r2, #1
 8001d56:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001d5a:	2300      	movs	r3, #0
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	3718      	adds	r7, #24
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	f010803f 	.word	0xf010803f

08001d68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	b086      	sub	sp, #24
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	60f8      	str	r0, [r7, #12]
 8001d70:	60b9      	str	r1, [r7, #8]
 8001d72:	607a      	str	r2, [r7, #4]
 8001d74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001d76:	2300      	movs	r3, #0
 8001d78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001d80:	68fb      	ldr	r3, [r7, #12]
 8001d82:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001d86:	2b01      	cmp	r3, #1
 8001d88:	d101      	bne.n	8001d8e <HAL_DMA_Start_IT+0x26>
 8001d8a:	2302      	movs	r3, #2
 8001d8c:	e040      	b.n	8001e10 <HAL_DMA_Start_IT+0xa8>
 8001d8e:	68fb      	ldr	r3, [r7, #12]
 8001d90:	2201      	movs	r2, #1
 8001d92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001d96:	68fb      	ldr	r3, [r7, #12]
 8001d98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001d9c:	b2db      	uxtb	r3, r3
 8001d9e:	2b01      	cmp	r3, #1
 8001da0:	d12f      	bne.n	8001e02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2202      	movs	r2, #2
 8001da6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	2200      	movs	r2, #0
 8001dae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	687a      	ldr	r2, [r7, #4]
 8001db4:	68b9      	ldr	r1, [r7, #8]
 8001db6:	68f8      	ldr	r0, [r7, #12]
 8001db8:	f000 f9b8 	bl	800212c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc0:	223f      	movs	r2, #63	; 0x3f
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	681a      	ldr	r2, [r3, #0]
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f042 0216 	orr.w	r2, r2, #22
 8001dd6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d007      	beq.n	8001df0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f042 0208 	orr.w	r2, r2, #8
 8001dee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001df0:	68fb      	ldr	r3, [r7, #12]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
 8001e00:	e005      	b.n	8001e0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	2200      	movs	r2, #0
 8001e06:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e0a:	2302      	movs	r3, #2
 8001e0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e10:	4618      	mov	r0, r3
 8001e12:	3718      	adds	r7, #24
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}

08001e18 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b086      	sub	sp, #24
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e20:	2300      	movs	r3, #0
 8001e22:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e24:	4b92      	ldr	r3, [pc, #584]	; (8002070 <HAL_DMA_IRQHandler+0x258>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a92      	ldr	r2, [pc, #584]	; (8002074 <HAL_DMA_IRQHandler+0x25c>)
 8001e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001e2e:	0a9b      	lsrs	r3, r3, #10
 8001e30:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e36:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e42:	2208      	movs	r2, #8
 8001e44:	409a      	lsls	r2, r3
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	4013      	ands	r3, r2
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d01a      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f003 0304 	and.w	r3, r3, #4
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d013      	beq.n	8001e84 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	681a      	ldr	r2, [r3, #0]
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f022 0204 	bic.w	r2, r2, #4
 8001e6a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	2208      	movs	r2, #8
 8001e72:	409a      	lsls	r2, r3
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e7c:	f043 0201 	orr.w	r2, r3, #1
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e88:	2201      	movs	r2, #1
 8001e8a:	409a      	lsls	r2, r3
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	4013      	ands	r3, r2
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d012      	beq.n	8001eba <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d00b      	beq.n	8001eba <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	409a      	lsls	r2, r3
 8001eaa:	693b      	ldr	r3, [r7, #16]
 8001eac:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001eb2:	f043 0202 	orr.w	r2, r3, #2
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ebe:	2204      	movs	r2, #4
 8001ec0:	409a      	lsls	r2, r3
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d012      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	681b      	ldr	r3, [r3, #0]
 8001ed0:	f003 0302 	and.w	r3, r3, #2
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d00b      	beq.n	8001ef0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001edc:	2204      	movs	r2, #4
 8001ede:	409a      	lsls	r2, r3
 8001ee0:	693b      	ldr	r3, [r7, #16]
 8001ee2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ee8:	f043 0204 	orr.w	r2, r3, #4
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef4:	2210      	movs	r2, #16
 8001ef6:	409a      	lsls	r2, r3
 8001ef8:	68fb      	ldr	r3, [r7, #12]
 8001efa:	4013      	ands	r3, r2
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d043      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f003 0308 	and.w	r3, r3, #8
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d03c      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f12:	2210      	movs	r2, #16
 8001f14:	409a      	lsls	r2, r3
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d018      	beq.n	8001f5a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	681b      	ldr	r3, [r3, #0]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d108      	bne.n	8001f48 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d024      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f42:	6878      	ldr	r0, [r7, #4]
 8001f44:	4798      	blx	r3
 8001f46:	e01f      	b.n	8001f88 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d01b      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f54:	6878      	ldr	r0, [r7, #4]
 8001f56:	4798      	blx	r3
 8001f58:	e016      	b.n	8001f88 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d107      	bne.n	8001f78 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	681a      	ldr	r2, [r3, #0]
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	f022 0208 	bic.w	r2, r2, #8
 8001f76:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d003      	beq.n	8001f88 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f84:	6878      	ldr	r0, [r7, #4]
 8001f86:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f8c:	2220      	movs	r2, #32
 8001f8e:	409a      	lsls	r2, r3
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	4013      	ands	r3, r2
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	f000 808e 	beq.w	80020b6 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	f003 0310 	and.w	r3, r3, #16
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f000 8086 	beq.w	80020b6 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fae:	2220      	movs	r2, #32
 8001fb0:	409a      	lsls	r2, r3
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fbc:	b2db      	uxtb	r3, r3
 8001fbe:	2b05      	cmp	r3, #5
 8001fc0:	d136      	bne.n	8002030 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	681a      	ldr	r2, [r3, #0]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f022 0216 	bic.w	r2, r2, #22
 8001fd0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	695a      	ldr	r2, [r3, #20]
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001fe0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d103      	bne.n	8001ff2 <HAL_DMA_IRQHandler+0x1da>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d007      	beq.n	8002002 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0208 	bic.w	r2, r2, #8
 8002000:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002006:	223f      	movs	r2, #63	; 0x3f
 8002008:	409a      	lsls	r2, r3
 800200a:	693b      	ldr	r3, [r7, #16]
 800200c:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	2201      	movs	r2, #1
 800201a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002022:	2b00      	cmp	r3, #0
 8002024:	d07d      	beq.n	8002122 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800202a:	6878      	ldr	r0, [r7, #4]
 800202c:	4798      	blx	r3
        }
        return;
 800202e:	e078      	b.n	8002122 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d01c      	beq.n	8002078 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002048:	2b00      	cmp	r3, #0
 800204a:	d108      	bne.n	800205e <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002050:	2b00      	cmp	r3, #0
 8002052:	d030      	beq.n	80020b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	4798      	blx	r3
 800205c:	e02b      	b.n	80020b6 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002062:	2b00      	cmp	r3, #0
 8002064:	d027      	beq.n	80020b6 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800206a:	6878      	ldr	r0, [r7, #4]
 800206c:	4798      	blx	r3
 800206e:	e022      	b.n	80020b6 <HAL_DMA_IRQHandler+0x29e>
 8002070:	20000000 	.word	0x20000000
 8002074:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d10f      	bne.n	80020a6 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 0210 	bic.w	r2, r2, #16
 8002094:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	2201      	movs	r2, #1
 80020a2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d003      	beq.n	80020b6 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d032      	beq.n	8002124 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020c2:	f003 0301 	and.w	r3, r3, #1
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d022      	beq.n	8002110 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	2205      	movs	r2, #5
 80020ce:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	681a      	ldr	r2, [r3, #0]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f022 0201 	bic.w	r2, r2, #1
 80020e0:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	3301      	adds	r3, #1
 80020e6:	60bb      	str	r3, [r7, #8]
 80020e8:	697a      	ldr	r2, [r7, #20]
 80020ea:	429a      	cmp	r2, r3
 80020ec:	d307      	bcc.n	80020fe <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f003 0301 	and.w	r3, r3, #1
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1f2      	bne.n	80020e2 <HAL_DMA_IRQHandler+0x2ca>
 80020fc:	e000      	b.n	8002100 <HAL_DMA_IRQHandler+0x2e8>
          break;
 80020fe:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	2200      	movs	r2, #0
 8002104:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2201      	movs	r2, #1
 800210c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002114:	2b00      	cmp	r3, #0
 8002116:	d005      	beq.n	8002124 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800211c:	6878      	ldr	r0, [r7, #4]
 800211e:	4798      	blx	r3
 8002120:	e000      	b.n	8002124 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002122:	bf00      	nop
    }
  }
}
 8002124:	3718      	adds	r7, #24
 8002126:	46bd      	mov	sp, r7
 8002128:	bd80      	pop	{r7, pc}
 800212a:	bf00      	nop

0800212c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800212c:	b480      	push	{r7}
 800212e:	b085      	sub	sp, #20
 8002130:	af00      	add	r7, sp, #0
 8002132:	60f8      	str	r0, [r7, #12]
 8002134:	60b9      	str	r1, [r7, #8]
 8002136:	607a      	str	r2, [r7, #4]
 8002138:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	681a      	ldr	r2, [r3, #0]
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002148:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	683a      	ldr	r2, [r7, #0]
 8002150:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002152:	68fb      	ldr	r3, [r7, #12]
 8002154:	689b      	ldr	r3, [r3, #8]
 8002156:	2b40      	cmp	r3, #64	; 0x40
 8002158:	d108      	bne.n	800216c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	687a      	ldr	r2, [r7, #4]
 8002160:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002162:	68fb      	ldr	r3, [r7, #12]
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	68ba      	ldr	r2, [r7, #8]
 8002168:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800216a:	e007      	b.n	800217c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800216c:	68fb      	ldr	r3, [r7, #12]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68ba      	ldr	r2, [r7, #8]
 8002172:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002174:	68fb      	ldr	r3, [r7, #12]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	687a      	ldr	r2, [r7, #4]
 800217a:	60da      	str	r2, [r3, #12]
}
 800217c:	bf00      	nop
 800217e:	3714      	adds	r7, #20
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002188:	b480      	push	{r7}
 800218a:	b085      	sub	sp, #20
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	b2db      	uxtb	r3, r3
 8002196:	3b10      	subs	r3, #16
 8002198:	4a14      	ldr	r2, [pc, #80]	; (80021ec <DMA_CalcBaseAndBitshift+0x64>)
 800219a:	fba2 2303 	umull	r2, r3, r2, r3
 800219e:	091b      	lsrs	r3, r3, #4
 80021a0:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021a2:	4a13      	ldr	r2, [pc, #76]	; (80021f0 <DMA_CalcBaseAndBitshift+0x68>)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	4413      	add	r3, r2
 80021a8:	781b      	ldrb	r3, [r3, #0]
 80021aa:	461a      	mov	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2b03      	cmp	r3, #3
 80021b4:	d909      	bls.n	80021ca <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021be:	f023 0303 	bic.w	r3, r3, #3
 80021c2:	1d1a      	adds	r2, r3, #4
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	659a      	str	r2, [r3, #88]	; 0x58
 80021c8:	e007      	b.n	80021da <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80021d2:	f023 0303 	bic.w	r3, r3, #3
 80021d6:	687a      	ldr	r2, [r7, #4]
 80021d8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3714      	adds	r7, #20
 80021e2:	46bd      	mov	sp, r7
 80021e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e8:	4770      	bx	lr
 80021ea:	bf00      	nop
 80021ec:	aaaaaaab 	.word	0xaaaaaaab
 80021f0:	08005b48 	.word	0x08005b48

080021f4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80021f4:	b480      	push	{r7}
 80021f6:	b085      	sub	sp, #20
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80021fc:	2300      	movs	r3, #0
 80021fe:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002204:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	699b      	ldr	r3, [r3, #24]
 800220a:	2b00      	cmp	r3, #0
 800220c:	d11f      	bne.n	800224e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	2b03      	cmp	r3, #3
 8002212:	d855      	bhi.n	80022c0 <DMA_CheckFifoParam+0xcc>
 8002214:	a201      	add	r2, pc, #4	; (adr r2, 800221c <DMA_CheckFifoParam+0x28>)
 8002216:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800221a:	bf00      	nop
 800221c:	0800222d 	.word	0x0800222d
 8002220:	0800223f 	.word	0x0800223f
 8002224:	0800222d 	.word	0x0800222d
 8002228:	080022c1 	.word	0x080022c1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002230:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002234:	2b00      	cmp	r3, #0
 8002236:	d045      	beq.n	80022c4 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800223c:	e042      	b.n	80022c4 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002242:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002246:	d13f      	bne.n	80022c8 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002248:	2301      	movs	r3, #1
 800224a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800224c:	e03c      	b.n	80022c8 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002256:	d121      	bne.n	800229c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	2b03      	cmp	r3, #3
 800225c:	d836      	bhi.n	80022cc <DMA_CheckFifoParam+0xd8>
 800225e:	a201      	add	r2, pc, #4	; (adr r2, 8002264 <DMA_CheckFifoParam+0x70>)
 8002260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002264:	08002275 	.word	0x08002275
 8002268:	0800227b 	.word	0x0800227b
 800226c:	08002275 	.word	0x08002275
 8002270:	0800228d 	.word	0x0800228d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002274:	2301      	movs	r3, #1
 8002276:	73fb      	strb	r3, [r7, #15]
      break;
 8002278:	e02f      	b.n	80022da <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800227e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002282:	2b00      	cmp	r3, #0
 8002284:	d024      	beq.n	80022d0 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8002286:	2301      	movs	r3, #1
 8002288:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800228a:	e021      	b.n	80022d0 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002290:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002294:	d11e      	bne.n	80022d4 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8002296:	2301      	movs	r3, #1
 8002298:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800229a:	e01b      	b.n	80022d4 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800229c:	68bb      	ldr	r3, [r7, #8]
 800229e:	2b02      	cmp	r3, #2
 80022a0:	d902      	bls.n	80022a8 <DMA_CheckFifoParam+0xb4>
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d003      	beq.n	80022ae <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022a6:	e018      	b.n	80022da <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	73fb      	strb	r3, [r7, #15]
      break;
 80022ac:	e015      	b.n	80022da <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022b2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d00e      	beq.n	80022d8 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	73fb      	strb	r3, [r7, #15]
      break;
 80022be:	e00b      	b.n	80022d8 <DMA_CheckFifoParam+0xe4>
      break;
 80022c0:	bf00      	nop
 80022c2:	e00a      	b.n	80022da <DMA_CheckFifoParam+0xe6>
      break;
 80022c4:	bf00      	nop
 80022c6:	e008      	b.n	80022da <DMA_CheckFifoParam+0xe6>
      break;
 80022c8:	bf00      	nop
 80022ca:	e006      	b.n	80022da <DMA_CheckFifoParam+0xe6>
      break;
 80022cc:	bf00      	nop
 80022ce:	e004      	b.n	80022da <DMA_CheckFifoParam+0xe6>
      break;
 80022d0:	bf00      	nop
 80022d2:	e002      	b.n	80022da <DMA_CheckFifoParam+0xe6>
      break;   
 80022d4:	bf00      	nop
 80022d6:	e000      	b.n	80022da <DMA_CheckFifoParam+0xe6>
      break;
 80022d8:	bf00      	nop
    }
  } 
  
  return status; 
 80022da:	7bfb      	ldrb	r3, [r7, #15]
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b089      	sub	sp, #36	; 0x24
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022f2:	2300      	movs	r3, #0
 80022f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022f6:	2300      	movs	r3, #0
 80022f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022fe:	2300      	movs	r3, #0
 8002300:	61fb      	str	r3, [r7, #28]
 8002302:	e16b      	b.n	80025dc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002304:	2201      	movs	r2, #1
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	4013      	ands	r3, r2
 8002316:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002318:	693a      	ldr	r2, [r7, #16]
 800231a:	697b      	ldr	r3, [r7, #20]
 800231c:	429a      	cmp	r2, r3
 800231e:	f040 815a 	bne.w	80025d6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b01      	cmp	r3, #1
 8002328:	d00b      	beq.n	8002342 <HAL_GPIO_Init+0x5a>
 800232a:	683b      	ldr	r3, [r7, #0]
 800232c:	685b      	ldr	r3, [r3, #4]
 800232e:	2b02      	cmp	r3, #2
 8002330:	d007      	beq.n	8002342 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002332:	683b      	ldr	r3, [r7, #0]
 8002334:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002336:	2b11      	cmp	r3, #17
 8002338:	d003      	beq.n	8002342 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800233a:	683b      	ldr	r3, [r7, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	2b12      	cmp	r3, #18
 8002340:	d130      	bne.n	80023a4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	689b      	ldr	r3, [r3, #8]
 8002346:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	005b      	lsls	r3, r3, #1
 800234c:	2203      	movs	r2, #3
 800234e:	fa02 f303 	lsl.w	r3, r2, r3
 8002352:	43db      	mvns	r3, r3
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	4013      	ands	r3, r2
 8002358:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800235a:	683b      	ldr	r3, [r7, #0]
 800235c:	68da      	ldr	r2, [r3, #12]
 800235e:	69fb      	ldr	r3, [r7, #28]
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	fa02 f303 	lsl.w	r3, r2, r3
 8002366:	69ba      	ldr	r2, [r7, #24]
 8002368:	4313      	orrs	r3, r2
 800236a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	69ba      	ldr	r2, [r7, #24]
 8002370:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002378:	2201      	movs	r2, #1
 800237a:	69fb      	ldr	r3, [r7, #28]
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	685b      	ldr	r3, [r3, #4]
 800238c:	091b      	lsrs	r3, r3, #4
 800238e:	f003 0201 	and.w	r2, r3, #1
 8002392:	69fb      	ldr	r3, [r7, #28]
 8002394:	fa02 f303 	lsl.w	r3, r2, r3
 8002398:	69ba      	ldr	r2, [r7, #24]
 800239a:	4313      	orrs	r3, r2
 800239c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	69ba      	ldr	r2, [r7, #24]
 80023a2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	68db      	ldr	r3, [r3, #12]
 80023a8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	005b      	lsls	r3, r3, #1
 80023ae:	2203      	movs	r2, #3
 80023b0:	fa02 f303 	lsl.w	r3, r2, r3
 80023b4:	43db      	mvns	r3, r3
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	4013      	ands	r3, r2
 80023ba:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	689a      	ldr	r2, [r3, #8]
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	69ba      	ldr	r2, [r7, #24]
 80023ca:	4313      	orrs	r3, r2
 80023cc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	69ba      	ldr	r2, [r7, #24]
 80023d2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685b      	ldr	r3, [r3, #4]
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d003      	beq.n	80023e4 <HAL_GPIO_Init+0xfc>
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	685b      	ldr	r3, [r3, #4]
 80023e0:	2b12      	cmp	r3, #18
 80023e2:	d123      	bne.n	800242c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023e4:	69fb      	ldr	r3, [r7, #28]
 80023e6:	08da      	lsrs	r2, r3, #3
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	3208      	adds	r2, #8
 80023ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	f003 0307 	and.w	r3, r3, #7
 80023f8:	009b      	lsls	r3, r3, #2
 80023fa:	220f      	movs	r2, #15
 80023fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002400:	43db      	mvns	r3, r3
 8002402:	69ba      	ldr	r2, [r7, #24]
 8002404:	4013      	ands	r3, r2
 8002406:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002408:	683b      	ldr	r3, [r7, #0]
 800240a:	691a      	ldr	r2, [r3, #16]
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	f003 0307 	and.w	r3, r3, #7
 8002412:	009b      	lsls	r3, r3, #2
 8002414:	fa02 f303 	lsl.w	r3, r2, r3
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	4313      	orrs	r3, r2
 800241c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800241e:	69fb      	ldr	r3, [r7, #28]
 8002420:	08da      	lsrs	r2, r3, #3
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	3208      	adds	r2, #8
 8002426:	69b9      	ldr	r1, [r7, #24]
 8002428:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002432:	69fb      	ldr	r3, [r7, #28]
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	2203      	movs	r2, #3
 8002438:	fa02 f303 	lsl.w	r3, r2, r3
 800243c:	43db      	mvns	r3, r3
 800243e:	69ba      	ldr	r2, [r7, #24]
 8002440:	4013      	ands	r3, r2
 8002442:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002444:	683b      	ldr	r3, [r7, #0]
 8002446:	685b      	ldr	r3, [r3, #4]
 8002448:	f003 0203 	and.w	r2, r3, #3
 800244c:	69fb      	ldr	r3, [r7, #28]
 800244e:	005b      	lsls	r3, r3, #1
 8002450:	fa02 f303 	lsl.w	r3, r2, r3
 8002454:	69ba      	ldr	r2, [r7, #24]
 8002456:	4313      	orrs	r3, r2
 8002458:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	f000 80b4 	beq.w	80025d6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	60fb      	str	r3, [r7, #12]
 8002472:	4b5f      	ldr	r3, [pc, #380]	; (80025f0 <HAL_GPIO_Init+0x308>)
 8002474:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002476:	4a5e      	ldr	r2, [pc, #376]	; (80025f0 <HAL_GPIO_Init+0x308>)
 8002478:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800247c:	6453      	str	r3, [r2, #68]	; 0x44
 800247e:	4b5c      	ldr	r3, [pc, #368]	; (80025f0 <HAL_GPIO_Init+0x308>)
 8002480:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002482:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002486:	60fb      	str	r3, [r7, #12]
 8002488:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800248a:	4a5a      	ldr	r2, [pc, #360]	; (80025f4 <HAL_GPIO_Init+0x30c>)
 800248c:	69fb      	ldr	r3, [r7, #28]
 800248e:	089b      	lsrs	r3, r3, #2
 8002490:	3302      	adds	r3, #2
 8002492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002496:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002498:	69fb      	ldr	r3, [r7, #28]
 800249a:	f003 0303 	and.w	r3, r3, #3
 800249e:	009b      	lsls	r3, r3, #2
 80024a0:	220f      	movs	r2, #15
 80024a2:	fa02 f303 	lsl.w	r3, r2, r3
 80024a6:	43db      	mvns	r3, r3
 80024a8:	69ba      	ldr	r2, [r7, #24]
 80024aa:	4013      	ands	r3, r2
 80024ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	4a51      	ldr	r2, [pc, #324]	; (80025f8 <HAL_GPIO_Init+0x310>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d02b      	beq.n	800250e <HAL_GPIO_Init+0x226>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	4a50      	ldr	r2, [pc, #320]	; (80025fc <HAL_GPIO_Init+0x314>)
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d025      	beq.n	800250a <HAL_GPIO_Init+0x222>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	4a4f      	ldr	r2, [pc, #316]	; (8002600 <HAL_GPIO_Init+0x318>)
 80024c2:	4293      	cmp	r3, r2
 80024c4:	d01f      	beq.n	8002506 <HAL_GPIO_Init+0x21e>
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	4a4e      	ldr	r2, [pc, #312]	; (8002604 <HAL_GPIO_Init+0x31c>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d019      	beq.n	8002502 <HAL_GPIO_Init+0x21a>
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	4a4d      	ldr	r2, [pc, #308]	; (8002608 <HAL_GPIO_Init+0x320>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	d013      	beq.n	80024fe <HAL_GPIO_Init+0x216>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	4a4c      	ldr	r2, [pc, #304]	; (800260c <HAL_GPIO_Init+0x324>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d00d      	beq.n	80024fa <HAL_GPIO_Init+0x212>
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	4a4b      	ldr	r2, [pc, #300]	; (8002610 <HAL_GPIO_Init+0x328>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d007      	beq.n	80024f6 <HAL_GPIO_Init+0x20e>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	4a4a      	ldr	r2, [pc, #296]	; (8002614 <HAL_GPIO_Init+0x32c>)
 80024ea:	4293      	cmp	r3, r2
 80024ec:	d101      	bne.n	80024f2 <HAL_GPIO_Init+0x20a>
 80024ee:	2307      	movs	r3, #7
 80024f0:	e00e      	b.n	8002510 <HAL_GPIO_Init+0x228>
 80024f2:	2308      	movs	r3, #8
 80024f4:	e00c      	b.n	8002510 <HAL_GPIO_Init+0x228>
 80024f6:	2306      	movs	r3, #6
 80024f8:	e00a      	b.n	8002510 <HAL_GPIO_Init+0x228>
 80024fa:	2305      	movs	r3, #5
 80024fc:	e008      	b.n	8002510 <HAL_GPIO_Init+0x228>
 80024fe:	2304      	movs	r3, #4
 8002500:	e006      	b.n	8002510 <HAL_GPIO_Init+0x228>
 8002502:	2303      	movs	r3, #3
 8002504:	e004      	b.n	8002510 <HAL_GPIO_Init+0x228>
 8002506:	2302      	movs	r3, #2
 8002508:	e002      	b.n	8002510 <HAL_GPIO_Init+0x228>
 800250a:	2301      	movs	r3, #1
 800250c:	e000      	b.n	8002510 <HAL_GPIO_Init+0x228>
 800250e:	2300      	movs	r3, #0
 8002510:	69fa      	ldr	r2, [r7, #28]
 8002512:	f002 0203 	and.w	r2, r2, #3
 8002516:	0092      	lsls	r2, r2, #2
 8002518:	4093      	lsls	r3, r2
 800251a:	69ba      	ldr	r2, [r7, #24]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002520:	4934      	ldr	r1, [pc, #208]	; (80025f4 <HAL_GPIO_Init+0x30c>)
 8002522:	69fb      	ldr	r3, [r7, #28]
 8002524:	089b      	lsrs	r3, r3, #2
 8002526:	3302      	adds	r3, #2
 8002528:	69ba      	ldr	r2, [r7, #24]
 800252a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800252e:	4b3a      	ldr	r3, [pc, #232]	; (8002618 <HAL_GPIO_Init+0x330>)
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002534:	693b      	ldr	r3, [r7, #16]
 8002536:	43db      	mvns	r3, r3
 8002538:	69ba      	ldr	r2, [r7, #24]
 800253a:	4013      	ands	r3, r2
 800253c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002546:	2b00      	cmp	r3, #0
 8002548:	d003      	beq.n	8002552 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800254a:	69ba      	ldr	r2, [r7, #24]
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	4313      	orrs	r3, r2
 8002550:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002552:	4a31      	ldr	r2, [pc, #196]	; (8002618 <HAL_GPIO_Init+0x330>)
 8002554:	69bb      	ldr	r3, [r7, #24]
 8002556:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002558:	4b2f      	ldr	r3, [pc, #188]	; (8002618 <HAL_GPIO_Init+0x330>)
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	43db      	mvns	r3, r3
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4013      	ands	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002568:	683b      	ldr	r3, [r7, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002570:	2b00      	cmp	r3, #0
 8002572:	d003      	beq.n	800257c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002574:	69ba      	ldr	r2, [r7, #24]
 8002576:	693b      	ldr	r3, [r7, #16]
 8002578:	4313      	orrs	r3, r2
 800257a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800257c:	4a26      	ldr	r2, [pc, #152]	; (8002618 <HAL_GPIO_Init+0x330>)
 800257e:	69bb      	ldr	r3, [r7, #24]
 8002580:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002582:	4b25      	ldr	r3, [pc, #148]	; (8002618 <HAL_GPIO_Init+0x330>)
 8002584:	689b      	ldr	r3, [r3, #8]
 8002586:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002588:	693b      	ldr	r3, [r7, #16]
 800258a:	43db      	mvns	r3, r3
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	4013      	ands	r3, r2
 8002590:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002592:	683b      	ldr	r3, [r7, #0]
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d003      	beq.n	80025a6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800259e:	69ba      	ldr	r2, [r7, #24]
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	4313      	orrs	r3, r2
 80025a4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025a6:	4a1c      	ldr	r2, [pc, #112]	; (8002618 <HAL_GPIO_Init+0x330>)
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025ac:	4b1a      	ldr	r3, [pc, #104]	; (8002618 <HAL_GPIO_Init+0x330>)
 80025ae:	68db      	ldr	r3, [r3, #12]
 80025b0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025b2:	693b      	ldr	r3, [r7, #16]
 80025b4:	43db      	mvns	r3, r3
 80025b6:	69ba      	ldr	r2, [r7, #24]
 80025b8:	4013      	ands	r3, r2
 80025ba:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80025bc:	683b      	ldr	r3, [r7, #0]
 80025be:	685b      	ldr	r3, [r3, #4]
 80025c0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d003      	beq.n	80025d0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80025d0:	4a11      	ldr	r2, [pc, #68]	; (8002618 <HAL_GPIO_Init+0x330>)
 80025d2:	69bb      	ldr	r3, [r7, #24]
 80025d4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	3301      	adds	r3, #1
 80025da:	61fb      	str	r3, [r7, #28]
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	2b0f      	cmp	r3, #15
 80025e0:	f67f ae90 	bls.w	8002304 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80025e4:	bf00      	nop
 80025e6:	3724      	adds	r7, #36	; 0x24
 80025e8:	46bd      	mov	sp, r7
 80025ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ee:	4770      	bx	lr
 80025f0:	40023800 	.word	0x40023800
 80025f4:	40013800 	.word	0x40013800
 80025f8:	40020000 	.word	0x40020000
 80025fc:	40020400 	.word	0x40020400
 8002600:	40020800 	.word	0x40020800
 8002604:	40020c00 	.word	0x40020c00
 8002608:	40021000 	.word	0x40021000
 800260c:	40021400 	.word	0x40021400
 8002610:	40021800 	.word	0x40021800
 8002614:	40021c00 	.word	0x40021c00
 8002618:	40013c00 	.word	0x40013c00

0800261c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800261c:	b480      	push	{r7}
 800261e:	b083      	sub	sp, #12
 8002620:	af00      	add	r7, sp, #0
 8002622:	6078      	str	r0, [r7, #4]
 8002624:	460b      	mov	r3, r1
 8002626:	807b      	strh	r3, [r7, #2]
 8002628:	4613      	mov	r3, r2
 800262a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800262c:	787b      	ldrb	r3, [r7, #1]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002632:	887a      	ldrh	r2, [r7, #2]
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002638:	e003      	b.n	8002642 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800263a:	887b      	ldrh	r3, [r7, #2]
 800263c:	041a      	lsls	r2, r3, #16
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	619a      	str	r2, [r3, #24]
}
 8002642:	bf00      	nop
 8002644:	370c      	adds	r7, #12
 8002646:	46bd      	mov	sp, r7
 8002648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800264c:	4770      	bx	lr

0800264e <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800264e:	b480      	push	{r7}
 8002650:	b083      	sub	sp, #12
 8002652:	af00      	add	r7, sp, #0
 8002654:	6078      	str	r0, [r7, #4]
 8002656:	460b      	mov	r3, r1
 8002658:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	695a      	ldr	r2, [r3, #20]
 800265e:	887b      	ldrh	r3, [r7, #2]
 8002660:	401a      	ands	r2, r3
 8002662:	887b      	ldrh	r3, [r7, #2]
 8002664:	429a      	cmp	r2, r3
 8002666:	d104      	bne.n	8002672 <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8002668:	887b      	ldrh	r3, [r7, #2]
 800266a:	041a      	lsls	r2, r3, #16
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 8002670:	e002      	b.n	8002678 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 8002672:	887a      	ldrh	r2, [r7, #2]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	619a      	str	r2, [r3, #24]
}
 8002678:	bf00      	nop
 800267a:	370c      	adds	r7, #12
 800267c:	46bd      	mov	sp, r7
 800267e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002682:	4770      	bx	lr

08002684 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002684:	b580      	push	{r7, lr}
 8002686:	b082      	sub	sp, #8
 8002688:	af00      	add	r7, sp, #0
 800268a:	4603      	mov	r3, r0
 800268c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 800268e:	4b08      	ldr	r3, [pc, #32]	; (80026b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002690:	695a      	ldr	r2, [r3, #20]
 8002692:	88fb      	ldrh	r3, [r7, #6]
 8002694:	4013      	ands	r3, r2
 8002696:	2b00      	cmp	r3, #0
 8002698:	d006      	beq.n	80026a8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800269a:	4a05      	ldr	r2, [pc, #20]	; (80026b0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800269c:	88fb      	ldrh	r3, [r7, #6]
 800269e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026a0:	88fb      	ldrh	r3, [r7, #6]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fe fee8 	bl	8001478 <HAL_GPIO_EXTI_Callback>
  }
}
 80026a8:	bf00      	nop
 80026aa:	3708      	adds	r7, #8
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40013c00 	.word	0x40013c00

080026b4 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80026b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026b6:	b08f      	sub	sp, #60	; 0x3c
 80026b8:	af0a      	add	r7, sp, #40	; 0x28
 80026ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d101      	bne.n	80026c6 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80026c2:	2301      	movs	r3, #1
 80026c4:	e054      	b.n	8002770 <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d106      	bne.n	80026e6 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2200      	movs	r2, #0
 80026dc:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 80026e0:	6878      	ldr	r0, [r7, #4]
 80026e2:	f7ff f81b 	bl	800171c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2203      	movs	r2, #3
 80026ea:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80026f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80026f6:	2b00      	cmp	r3, #0
 80026f8:	d102      	bne.n	8002700 <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4618      	mov	r0, r3
 8002706:	f001 ffce 	bl	80046a6 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	603b      	str	r3, [r7, #0]
 8002710:	687e      	ldr	r6, [r7, #4]
 8002712:	466d      	mov	r5, sp
 8002714:	f106 0410 	add.w	r4, r6, #16
 8002718:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800271a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800271c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800271e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002720:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002724:	e885 0003 	stmia.w	r5, {r0, r1}
 8002728:	1d33      	adds	r3, r6, #4
 800272a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800272c:	6838      	ldr	r0, [r7, #0]
 800272e:	f001 ff59 	bl	80045e4 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	2101      	movs	r1, #1
 8002738:	4618      	mov	r0, r3
 800273a:	f001 ffc5 	bl	80046c8 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	603b      	str	r3, [r7, #0]
 8002744:	687e      	ldr	r6, [r7, #4]
 8002746:	466d      	mov	r5, sp
 8002748:	f106 0410 	add.w	r4, r6, #16
 800274c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800274e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002750:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002752:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002754:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002758:	e885 0003 	stmia.w	r5, {r0, r1}
 800275c:	1d33      	adds	r3, r6, #4
 800275e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002760:	6838      	ldr	r0, [r7, #0]
 8002762:	f002 f857 	bl	8004814 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2201      	movs	r2, #1
 800276a:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3714      	adds	r7, #20
 8002774:	46bd      	mov	sp, r7
 8002776:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002778 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 8002778:	b580      	push	{r7, lr}
 800277a:	b088      	sub	sp, #32
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2b00      	cmp	r3, #0
 8002784:	d101      	bne.n	800278a <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 8002786:	2301      	movs	r3, #1
 8002788:	e128      	b.n	80029dc <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002790:	b2db      	uxtb	r3, r3
 8002792:	2b00      	cmp	r3, #0
 8002794:	d109      	bne.n	80027aa <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	4a90      	ldr	r2, [pc, #576]	; (80029e4 <HAL_I2S_Init+0x26c>)
 80027a2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80027a4:	6878      	ldr	r0, [r7, #4]
 80027a6:	f7fe fea1 	bl	80014ec <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2202      	movs	r2, #2
 80027ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	69db      	ldr	r3, [r3, #28]
 80027b8:	687a      	ldr	r2, [r7, #4]
 80027ba:	6812      	ldr	r2, [r2, #0]
 80027bc:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80027c0:	f023 030f 	bic.w	r3, r3, #15
 80027c4:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	2202      	movs	r2, #2
 80027cc:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	695b      	ldr	r3, [r3, #20]
 80027d2:	2b02      	cmp	r3, #2
 80027d4:	d060      	beq.n	8002898 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	68db      	ldr	r3, [r3, #12]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	d102      	bne.n	80027e4 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 80027de:	2310      	movs	r3, #16
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	e001      	b.n	80027e8 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 80027e4:	2320      	movs	r3, #32
 80027e6:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	689b      	ldr	r3, [r3, #8]
 80027ec:	2b20      	cmp	r3, #32
 80027ee:	d802      	bhi.n	80027f6 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 80027f0:	697b      	ldr	r3, [r7, #20]
 80027f2:	005b      	lsls	r3, r3, #1
 80027f4:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 80027f6:	2001      	movs	r0, #1
 80027f8:	f001 fa60 	bl	8003cbc <HAL_RCCEx_GetPeriphCLKFreq>
 80027fc:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	691b      	ldr	r3, [r3, #16]
 8002802:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002806:	d125      	bne.n	8002854 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	68db      	ldr	r3, [r3, #12]
 800280c:	2b00      	cmp	r3, #0
 800280e:	d010      	beq.n	8002832 <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002810:	697b      	ldr	r3, [r7, #20]
 8002812:	009b      	lsls	r3, r3, #2
 8002814:	68fa      	ldr	r2, [r7, #12]
 8002816:	fbb2 f2f3 	udiv	r2, r2, r3
 800281a:	4613      	mov	r3, r2
 800281c:	009b      	lsls	r3, r3, #2
 800281e:	4413      	add	r3, r2
 8002820:	005b      	lsls	r3, r3, #1
 8002822:	461a      	mov	r2, r3
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	fbb2 f3f3 	udiv	r3, r2, r3
 800282c:	3305      	adds	r3, #5
 800282e:	613b      	str	r3, [r7, #16]
 8002830:	e01f      	b.n	8002872 <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	00db      	lsls	r3, r3, #3
 8002836:	68fa      	ldr	r2, [r7, #12]
 8002838:	fbb2 f2f3 	udiv	r2, r2, r3
 800283c:	4613      	mov	r3, r2
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	4413      	add	r3, r2
 8002842:	005b      	lsls	r3, r3, #1
 8002844:	461a      	mov	r2, r3
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	695b      	ldr	r3, [r3, #20]
 800284a:	fbb2 f3f3 	udiv	r3, r2, r3
 800284e:	3305      	adds	r3, #5
 8002850:	613b      	str	r3, [r7, #16]
 8002852:	e00e      	b.n	8002872 <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002854:	68fa      	ldr	r2, [r7, #12]
 8002856:	697b      	ldr	r3, [r7, #20]
 8002858:	fbb2 f2f3 	udiv	r2, r2, r3
 800285c:	4613      	mov	r3, r2
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	005b      	lsls	r3, r3, #1
 8002864:	461a      	mov	r2, r3
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	695b      	ldr	r3, [r3, #20]
 800286a:	fbb2 f3f3 	udiv	r3, r2, r3
 800286e:	3305      	adds	r3, #5
 8002870:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4a5c      	ldr	r2, [pc, #368]	; (80029e8 <HAL_I2S_Init+0x270>)
 8002876:	fba2 2303 	umull	r2, r3, r2, r3
 800287a:	08db      	lsrs	r3, r3, #3
 800287c:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	f003 0301 	and.w	r3, r3, #1
 8002884:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 8002886:	693a      	ldr	r2, [r7, #16]
 8002888:	69bb      	ldr	r3, [r7, #24]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	085b      	lsrs	r3, r3, #1
 800288e:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 8002890:	69bb      	ldr	r3, [r7, #24]
 8002892:	021b      	lsls	r3, r3, #8
 8002894:	61bb      	str	r3, [r7, #24]
 8002896:	e003      	b.n	80028a0 <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 8002898:	2302      	movs	r3, #2
 800289a:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800289c:	2300      	movs	r3, #0
 800289e:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d902      	bls.n	80028ac <HAL_I2S_Init+0x134>
 80028a6:	69fb      	ldr	r3, [r7, #28]
 80028a8:	2bff      	cmp	r3, #255	; 0xff
 80028aa:	d907      	bls.n	80028bc <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028b0:	f043 0210 	orr.w	r2, r3, #16
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80028b8:	2301      	movs	r3, #1
 80028ba:	e08f      	b.n	80029dc <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	691a      	ldr	r2, [r3, #16]
 80028c0:	69bb      	ldr	r3, [r7, #24]
 80028c2:	ea42 0103 	orr.w	r1, r2, r3
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	69fa      	ldr	r2, [r7, #28]
 80028cc:	430a      	orrs	r2, r1
 80028ce:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	69db      	ldr	r3, [r3, #28]
 80028d6:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80028da:	f023 030f 	bic.w	r3, r3, #15
 80028de:	687a      	ldr	r2, [r7, #4]
 80028e0:	6851      	ldr	r1, [r2, #4]
 80028e2:	687a      	ldr	r2, [r7, #4]
 80028e4:	6892      	ldr	r2, [r2, #8]
 80028e6:	4311      	orrs	r1, r2
 80028e8:	687a      	ldr	r2, [r7, #4]
 80028ea:	68d2      	ldr	r2, [r2, #12]
 80028ec:	4311      	orrs	r1, r2
 80028ee:	687a      	ldr	r2, [r7, #4]
 80028f0:	6992      	ldr	r2, [r2, #24]
 80028f2:	430a      	orrs	r2, r1
 80028f4:	431a      	orrs	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80028fe:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	6a1b      	ldr	r3, [r3, #32]
 8002904:	2b01      	cmp	r3, #1
 8002906:	d161      	bne.n	80029cc <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	4a38      	ldr	r2, [pc, #224]	; (80029ec <HAL_I2S_Init+0x274>)
 800290c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a37      	ldr	r2, [pc, #220]	; (80029f0 <HAL_I2S_Init+0x278>)
 8002914:	4293      	cmp	r3, r2
 8002916:	d101      	bne.n	800291c <HAL_I2S_Init+0x1a4>
 8002918:	4b36      	ldr	r3, [pc, #216]	; (80029f4 <HAL_I2S_Init+0x27c>)
 800291a:	e001      	b.n	8002920 <HAL_I2S_Init+0x1a8>
 800291c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002920:	69db      	ldr	r3, [r3, #28]
 8002922:	687a      	ldr	r2, [r7, #4]
 8002924:	6812      	ldr	r2, [r2, #0]
 8002926:	4932      	ldr	r1, [pc, #200]	; (80029f0 <HAL_I2S_Init+0x278>)
 8002928:	428a      	cmp	r2, r1
 800292a:	d101      	bne.n	8002930 <HAL_I2S_Init+0x1b8>
 800292c:	4a31      	ldr	r2, [pc, #196]	; (80029f4 <HAL_I2S_Init+0x27c>)
 800292e:	e001      	b.n	8002934 <HAL_I2S_Init+0x1bc>
 8002930:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002934:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002938:	f023 030f 	bic.w	r3, r3, #15
 800293c:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4a2b      	ldr	r2, [pc, #172]	; (80029f0 <HAL_I2S_Init+0x278>)
 8002944:	4293      	cmp	r3, r2
 8002946:	d101      	bne.n	800294c <HAL_I2S_Init+0x1d4>
 8002948:	4b2a      	ldr	r3, [pc, #168]	; (80029f4 <HAL_I2S_Init+0x27c>)
 800294a:	e001      	b.n	8002950 <HAL_I2S_Init+0x1d8>
 800294c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002950:	2202      	movs	r2, #2
 8002952:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	681b      	ldr	r3, [r3, #0]
 8002958:	4a25      	ldr	r2, [pc, #148]	; (80029f0 <HAL_I2S_Init+0x278>)
 800295a:	4293      	cmp	r3, r2
 800295c:	d101      	bne.n	8002962 <HAL_I2S_Init+0x1ea>
 800295e:	4b25      	ldr	r3, [pc, #148]	; (80029f4 <HAL_I2S_Init+0x27c>)
 8002960:	e001      	b.n	8002966 <HAL_I2S_Init+0x1ee>
 8002962:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002966:	69db      	ldr	r3, [r3, #28]
 8002968:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002972:	d003      	beq.n	800297c <HAL_I2S_Init+0x204>
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	2b00      	cmp	r3, #0
 800297a:	d103      	bne.n	8002984 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 800297c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002980:	613b      	str	r3, [r7, #16]
 8002982:	e001      	b.n	8002988 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 8002984:	2300      	movs	r3, #0
 8002986:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 8002988:	693b      	ldr	r3, [r7, #16]
 800298a:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	b299      	uxth	r1, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	68db      	ldr	r3, [r3, #12]
 8002996:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	699b      	ldr	r3, [r3, #24]
 800299c:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 800299e:	4303      	orrs	r3, r0
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	430b      	orrs	r3, r1
 80029a4:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80029a6:	4313      	orrs	r3, r2
 80029a8:	b29a      	uxth	r2, r3
 80029aa:	897b      	ldrh	r3, [r7, #10]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029b4:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a0d      	ldr	r2, [pc, #52]	; (80029f0 <HAL_I2S_Init+0x278>)
 80029bc:	4293      	cmp	r3, r2
 80029be:	d101      	bne.n	80029c4 <HAL_I2S_Init+0x24c>
 80029c0:	4b0c      	ldr	r3, [pc, #48]	; (80029f4 <HAL_I2S_Init+0x27c>)
 80029c2:	e001      	b.n	80029c8 <HAL_I2S_Init+0x250>
 80029c4:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029c8:	897a      	ldrh	r2, [r7, #10]
 80029ca:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	2200      	movs	r2, #0
 80029d0:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2201      	movs	r2, #1
 80029d6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3720      	adds	r7, #32
 80029e0:	46bd      	mov	sp, r7
 80029e2:	bd80      	pop	{r7, pc}
 80029e4:	08002cd5 	.word	0x08002cd5
 80029e8:	cccccccd 	.word	0xcccccccd
 80029ec:	08002de9 	.word	0x08002de9
 80029f0:	40003800 	.word	0x40003800
 80029f4:	40003400 	.word	0x40003400

080029f8 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 80029f8:	b580      	push	{r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	4613      	mov	r3, r2
 8002a04:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002a06:	68bb      	ldr	r3, [r7, #8]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d002      	beq.n	8002a12 <HAL_I2S_Transmit_DMA+0x1a>
 8002a0c:	88fb      	ldrh	r3, [r7, #6]
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d101      	bne.n	8002a16 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e08e      	b.n	8002b34 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a1c:	b2db      	uxtb	r3, r3
 8002a1e:	2b01      	cmp	r3, #1
 8002a20:	d101      	bne.n	8002a26 <HAL_I2S_Transmit_DMA+0x2e>
 8002a22:	2302      	movs	r3, #2
 8002a24:	e086      	b.n	8002b34 <HAL_I2S_Transmit_DMA+0x13c>
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	2201      	movs	r2, #1
 8002a2a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a34:	b2db      	uxtb	r3, r3
 8002a36:	2b01      	cmp	r3, #1
 8002a38:	d005      	beq.n	8002a46 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002a42:	2302      	movs	r3, #2
 8002a44:	e076      	b.n	8002b34 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	2203      	movs	r2, #3
 8002a4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	2200      	movs	r2, #0
 8002a52:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	68ba      	ldr	r2, [r7, #8]
 8002a58:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	69db      	ldr	r3, [r3, #28]
 8002a60:	f003 0307 	and.w	r3, r3, #7
 8002a64:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002a66:	697b      	ldr	r3, [r7, #20]
 8002a68:	2b03      	cmp	r3, #3
 8002a6a:	d002      	beq.n	8002a72 <HAL_I2S_Transmit_DMA+0x7a>
 8002a6c:	697b      	ldr	r3, [r7, #20]
 8002a6e:	2b05      	cmp	r3, #5
 8002a70:	d10a      	bne.n	8002a88 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002a72:	88fb      	ldrh	r3, [r7, #6]
 8002a74:	005b      	lsls	r3, r3, #1
 8002a76:	b29a      	uxth	r2, r3
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002a7c:	88fb      	ldrh	r3, [r7, #6]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002a86:	e005      	b.n	8002a94 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	88fa      	ldrh	r2, [r7, #6]
 8002a8c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	88fa      	ldrh	r2, [r7, #6]
 8002a92:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a98:	4a28      	ldr	r2, [pc, #160]	; (8002b3c <HAL_I2S_Transmit_DMA+0x144>)
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa0:	4a27      	ldr	r2, [pc, #156]	; (8002b40 <HAL_I2S_Transmit_DMA+0x148>)
 8002aa2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aa8:	4a26      	ldr	r2, [pc, #152]	; (8002b44 <HAL_I2S_Transmit_DMA+0x14c>)
 8002aaa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002ab4:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002ab6:	68fb      	ldr	r3, [r7, #12]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002abc:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ac2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002ac4:	f7ff f950 	bl	8001d68 <HAL_DMA_Start_IT>
 8002ac8:	4603      	mov	r3, r0
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d00f      	beq.n	8002aee <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ad2:	f043 0208 	orr.w	r2, r3, #8
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	2201      	movs	r2, #1
 8002ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e022      	b.n	8002b34 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	69db      	ldr	r3, [r3, #28]
 8002af4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d107      	bne.n	8002b0c <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	69da      	ldr	r2, [r3, #28]
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b0a:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	685b      	ldr	r3, [r3, #4]
 8002b12:	f003 0302 	and.w	r3, r3, #2
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d107      	bne.n	8002b2a <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	68fb      	ldr	r3, [r7, #12]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f042 0202 	orr.w	r2, r2, #2
 8002b28:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	08002bb3 	.word	0x08002bb3
 8002b40:	08002b71 	.word	0x08002b71
 8002b44:	08002bcf 	.word	0x08002bcf

08002b48 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002b50:	bf00      	nop
 8002b52:	370c      	adds	r7, #12
 8002b54:	46bd      	mov	sp, r7
 8002b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5a:	4770      	bx	lr

08002b5c <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b083      	sub	sp, #12
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr

08002b70 <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b084      	sub	sp, #16
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b7c:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69db      	ldr	r3, [r3, #28]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10e      	bne.n	8002ba4 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002b86:	68fb      	ldr	r3, [r7, #12]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	685a      	ldr	r2, [r3, #4]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	f022 0202 	bic.w	r2, r2, #2
 8002b94:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002b96:	68fb      	ldr	r3, [r7, #12]
 8002b98:	2200      	movs	r2, #0
 8002b9a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002ba4:	68f8      	ldr	r0, [r7, #12]
 8002ba6:	f7fe fc57 	bl	8001458 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bbe:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002bc0:	68f8      	ldr	r0, [r7, #12]
 8002bc2:	f7fe fc39 	bl	8001438 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002bc6:	bf00      	nop
 8002bc8:	3710      	adds	r7, #16
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bd80      	pop	{r7, pc}

08002bce <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bce:	b580      	push	{r7, lr}
 8002bd0:	b084      	sub	sp, #16
 8002bd2:	af00      	add	r7, sp, #0
 8002bd4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bda:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	685a      	ldr	r2, [r3, #4]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f022 0203 	bic.w	r2, r2, #3
 8002bea:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002bec:	68fb      	ldr	r3, [r7, #12]
 8002bee:	2200      	movs	r2, #0
 8002bf0:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002c00:	68fb      	ldr	r3, [r7, #12]
 8002c02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c04:	f043 0208 	orr.w	r2, r3, #8
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002c0c:	68f8      	ldr	r0, [r7, #12]
 8002c0e:	f7ff ffa5 	bl	8002b5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002c12:	bf00      	nop
 8002c14:	3710      	adds	r7, #16
 8002c16:	46bd      	mov	sp, r7
 8002c18:	bd80      	pop	{r7, pc}

08002c1a <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002c1a:	b580      	push	{r7, lr}
 8002c1c:	b082      	sub	sp, #8
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c26:	881a      	ldrh	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c32:	1c9a      	adds	r2, r3, #2
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c3c:	b29b      	uxth	r3, r3
 8002c3e:	3b01      	subs	r3, #1
 8002c40:	b29a      	uxth	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c4a:	b29b      	uxth	r3, r3
 8002c4c:	2b00      	cmp	r3, #0
 8002c4e:	d10e      	bne.n	8002c6e <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c5e:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	2201      	movs	r2, #1
 8002c64:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f7fe fbf5 	bl	8001458 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002c6e:	bf00      	nop
 8002c70:	3708      	adds	r7, #8
 8002c72:	46bd      	mov	sp, r7
 8002c74:	bd80      	pop	{r7, pc}

08002c76 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002c76:	b580      	push	{r7, lr}
 8002c78:	b082      	sub	sp, #8
 8002c7a:	af00      	add	r7, sp, #0
 8002c7c:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	68da      	ldr	r2, [r3, #12]
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c88:	b292      	uxth	r2, r2
 8002c8a:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c90:	1c9a      	adds	r2, r3, #2
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002c9a:	b29b      	uxth	r3, r3
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	b29a      	uxth	r2, r3
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002ca8:	b29b      	uxth	r3, r3
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d10e      	bne.n	8002ccc <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	685a      	ldr	r2, [r3, #4]
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002cbc:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	2201      	movs	r2, #1
 8002cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002cc6:	6878      	ldr	r0, [r7, #4]
 8002cc8:	f7ff ff3e 	bl	8002b48 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002ccc:	bf00      	nop
 8002cce:	3708      	adds	r7, #8
 8002cd0:	46bd      	mov	sp, r7
 8002cd2:	bd80      	pop	{r7, pc}

08002cd4 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	b086      	sub	sp, #24
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	689b      	ldr	r3, [r3, #8]
 8002ce2:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002cea:	b2db      	uxtb	r3, r3
 8002cec:	2b04      	cmp	r3, #4
 8002cee:	d13a      	bne.n	8002d66 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002cf0:	697b      	ldr	r3, [r7, #20]
 8002cf2:	f003 0301 	and.w	r3, r3, #1
 8002cf6:	2b01      	cmp	r3, #1
 8002cf8:	d109      	bne.n	8002d0e <I2S_IRQHandler+0x3a>
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d04:	2b40      	cmp	r3, #64	; 0x40
 8002d06:	d102      	bne.n	8002d0e <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002d08:	6878      	ldr	r0, [r7, #4]
 8002d0a:	f7ff ffb4 	bl	8002c76 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d14:	2b40      	cmp	r3, #64	; 0x40
 8002d16:	d126      	bne.n	8002d66 <I2S_IRQHandler+0x92>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	685b      	ldr	r3, [r3, #4]
 8002d1e:	f003 0320 	and.w	r3, r3, #32
 8002d22:	2b20      	cmp	r3, #32
 8002d24:	d11f      	bne.n	8002d66 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685a      	ldr	r2, [r3, #4]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d34:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d36:	2300      	movs	r3, #0
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	613b      	str	r3, [r7, #16]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	689b      	ldr	r3, [r3, #8]
 8002d48:	613b      	str	r3, [r7, #16]
 8002d4a:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	2201      	movs	r2, #1
 8002d50:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d58:	f043 0202 	orr.w	r2, r3, #2
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d60:	6878      	ldr	r0, [r7, #4]
 8002d62:	f7ff fefb 	bl	8002b5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d6c:	b2db      	uxtb	r3, r3
 8002d6e:	2b03      	cmp	r3, #3
 8002d70:	d136      	bne.n	8002de0 <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	f003 0302 	and.w	r3, r3, #2
 8002d78:	2b02      	cmp	r3, #2
 8002d7a:	d109      	bne.n	8002d90 <I2S_IRQHandler+0xbc>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685b      	ldr	r3, [r3, #4]
 8002d82:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d86:	2b80      	cmp	r3, #128	; 0x80
 8002d88:	d102      	bne.n	8002d90 <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002d8a:	6878      	ldr	r0, [r7, #4]
 8002d8c:	f7ff ff45 	bl	8002c1a <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002d90:	697b      	ldr	r3, [r7, #20]
 8002d92:	f003 0308 	and.w	r3, r3, #8
 8002d96:	2b08      	cmp	r3, #8
 8002d98:	d122      	bne.n	8002de0 <I2S_IRQHandler+0x10c>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	685b      	ldr	r3, [r3, #4]
 8002da0:	f003 0320 	and.w	r3, r3, #32
 8002da4:	2b20      	cmp	r3, #32
 8002da6:	d11b      	bne.n	8002de0 <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685a      	ldr	r2, [r3, #4]
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002db6:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002db8:	2300      	movs	r3, #0
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	689b      	ldr	r3, [r3, #8]
 8002dc2:	60fb      	str	r3, [r7, #12]
 8002dc4:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	2201      	movs	r2, #1
 8002dca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	f043 0204 	orr.w	r2, r3, #4
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002dda:	6878      	ldr	r0, [r7, #4]
 8002ddc:	f7ff febe 	bl	8002b5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002de0:	bf00      	nop
 8002de2:	3718      	adds	r7, #24
 8002de4:	46bd      	mov	sp, r7
 8002de6:	bd80      	pop	{r7, pc}

08002de8 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002de8:	b580      	push	{r7, lr}
 8002dea:	b088      	sub	sp, #32
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	689b      	ldr	r3, [r3, #8]
 8002df6:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	4aa2      	ldr	r2, [pc, #648]	; (8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002dfe:	4293      	cmp	r3, r2
 8002e00:	d101      	bne.n	8002e06 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002e02:	4ba2      	ldr	r3, [pc, #648]	; (800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e04:	e001      	b.n	8002e0a <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002e06:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e0a:	689b      	ldr	r3, [r3, #8]
 8002e0c:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	4a9b      	ldr	r2, [pc, #620]	; (8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e1c:	4293      	cmp	r3, r2
 8002e1e:	d101      	bne.n	8002e24 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002e20:	4b9a      	ldr	r3, [pc, #616]	; (800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e22:	e001      	b.n	8002e28 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002e24:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e28:	685b      	ldr	r3, [r3, #4]
 8002e2a:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	685b      	ldr	r3, [r3, #4]
 8002e30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e34:	d004      	beq.n	8002e40 <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	f040 8099 	bne.w	8002f72 <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002e40:	69fb      	ldr	r3, [r7, #28]
 8002e42:	f003 0302 	and.w	r3, r3, #2
 8002e46:	2b02      	cmp	r3, #2
 8002e48:	d107      	bne.n	8002e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002e4a:	697b      	ldr	r3, [r7, #20]
 8002e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d002      	beq.n	8002e5a <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f925 	bl	80030a4 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002e5a:	69bb      	ldr	r3, [r7, #24]
 8002e5c:	f003 0301 	and.w	r3, r3, #1
 8002e60:	2b01      	cmp	r3, #1
 8002e62:	d107      	bne.n	8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d002      	beq.n	8002e74 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f9c8 	bl	8003204 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e7a:	2b40      	cmp	r3, #64	; 0x40
 8002e7c:	d13a      	bne.n	8002ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f003 0320 	and.w	r3, r3, #32
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d035      	beq.n	8002ef4 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a7e      	ldr	r2, [pc, #504]	; (8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	d101      	bne.n	8002e96 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002e92:	4b7e      	ldr	r3, [pc, #504]	; (800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e94:	e001      	b.n	8002e9a <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002e96:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e9a:	685a      	ldr	r2, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	4979      	ldr	r1, [pc, #484]	; (8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ea2:	428b      	cmp	r3, r1
 8002ea4:	d101      	bne.n	8002eaa <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002ea6:	4b79      	ldr	r3, [pc, #484]	; (800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ea8:	e001      	b.n	8002eae <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002eaa:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eae:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002eb2:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	685a      	ldr	r2, [r3, #4]
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ec2:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	68db      	ldr	r3, [r3, #12]
 8002ece:	60fb      	str	r3, [r7, #12]
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	689b      	ldr	r3, [r3, #8]
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	2201      	movs	r2, #1
 8002ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee6:	f043 0202 	orr.w	r2, r3, #2
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002eee:	6878      	ldr	r0, [r7, #4]
 8002ef0:	f7ff fe34 	bl	8002b5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002ef4:	69fb      	ldr	r3, [r7, #28]
 8002ef6:	f003 0308 	and.w	r3, r3, #8
 8002efa:	2b08      	cmp	r3, #8
 8002efc:	f040 80be 	bne.w	800307c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002f00:	697b      	ldr	r3, [r7, #20]
 8002f02:	f003 0320 	and.w	r3, r3, #32
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	f000 80b8 	beq.w	800307c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f1a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a59      	ldr	r2, [pc, #356]	; (8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d101      	bne.n	8002f2a <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002f26:	4b59      	ldr	r3, [pc, #356]	; (800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002f28:	e001      	b.n	8002f2e <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002f2a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f2e:	685a      	ldr	r2, [r3, #4]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4954      	ldr	r1, [pc, #336]	; (8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002f36:	428b      	cmp	r3, r1
 8002f38:	d101      	bne.n	8002f3e <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002f3a:	4b54      	ldr	r3, [pc, #336]	; (800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002f3c:	e001      	b.n	8002f42 <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002f3e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f42:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f46:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002f48:	2300      	movs	r3, #0
 8002f4a:	60bb      	str	r3, [r7, #8]
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	689b      	ldr	r3, [r3, #8]
 8002f52:	60bb      	str	r3, [r7, #8]
 8002f54:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f62:	f043 0204 	orr.w	r2, r3, #4
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7ff fdf6 	bl	8002b5c <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f70:	e084      	b.n	800307c <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002f72:	69bb      	ldr	r3, [r7, #24]
 8002f74:	f003 0302 	and.w	r3, r3, #2
 8002f78:	2b02      	cmp	r3, #2
 8002f7a:	d107      	bne.n	8002f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002f7c:	693b      	ldr	r3, [r7, #16]
 8002f7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d002      	beq.n	8002f8c <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002f86:	6878      	ldr	r0, [r7, #4]
 8002f88:	f000 f8be 	bl	8003108 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002f8c:	69fb      	ldr	r3, [r7, #28]
 8002f8e:	f003 0301 	and.w	r3, r3, #1
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d107      	bne.n	8002fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002f9c:	2b00      	cmp	r3, #0
 8002f9e:	d002      	beq.n	8002fa6 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002fa0:	6878      	ldr	r0, [r7, #4]
 8002fa2:	f000 f8fd 	bl	80031a0 <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fac:	2b40      	cmp	r3, #64	; 0x40
 8002fae:	d12f      	bne.n	8003010 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002fb0:	697b      	ldr	r3, [r7, #20]
 8002fb2:	f003 0320 	and.w	r3, r3, #32
 8002fb6:	2b00      	cmp	r3, #0
 8002fb8:	d02a      	beq.n	8003010 <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	685a      	ldr	r2, [r3, #4]
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002fc8:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a2e      	ldr	r2, [pc, #184]	; (8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d101      	bne.n	8002fd8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8002fd4:	4b2d      	ldr	r3, [pc, #180]	; (800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002fd6:	e001      	b.n	8002fdc <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8002fd8:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002fdc:	685a      	ldr	r2, [r3, #4]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4929      	ldr	r1, [pc, #164]	; (8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002fe4:	428b      	cmp	r3, r1
 8002fe6:	d101      	bne.n	8002fec <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8002fe8:	4b28      	ldr	r3, [pc, #160]	; (800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002fea:	e001      	b.n	8002ff0 <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8002fec:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ff0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002ff4:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003002:	f043 0202 	orr.w	r2, r3, #2
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f7ff fda6 	bl	8002b5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8003010:	69bb      	ldr	r3, [r7, #24]
 8003012:	f003 0308 	and.w	r3, r3, #8
 8003016:	2b08      	cmp	r3, #8
 8003018:	d131      	bne.n	800307e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	f003 0320 	and.w	r3, r3, #32
 8003020:	2b00      	cmp	r3, #0
 8003022:	d02c      	beq.n	800307e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4a17      	ldr	r2, [pc, #92]	; (8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d101      	bne.n	8003032 <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800302e:	4b17      	ldr	r3, [pc, #92]	; (800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003030:	e001      	b.n	8003036 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 8003032:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003036:	685a      	ldr	r2, [r3, #4]
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	4912      	ldr	r1, [pc, #72]	; (8003088 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800303e:	428b      	cmp	r3, r1
 8003040:	d101      	bne.n	8003046 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 8003042:	4b12      	ldr	r3, [pc, #72]	; (800308c <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003044:	e001      	b.n	800304a <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003046:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800304a:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800304e:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	685a      	ldr	r2, [r3, #4]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800305e:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2201      	movs	r2, #1
 8003064:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800306c:	f043 0204 	orr.w	r2, r3, #4
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003074:	6878      	ldr	r0, [r7, #4]
 8003076:	f7ff fd71 	bl	8002b5c <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800307a:	e000      	b.n	800307e <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 800307c:	bf00      	nop
}
 800307e:	bf00      	nop
 8003080:	3720      	adds	r7, #32
 8003082:	46bd      	mov	sp, r7
 8003084:	bd80      	pop	{r7, pc}
 8003086:	bf00      	nop
 8003088:	40003800 	.word	0x40003800
 800308c:	40003400 	.word	0x40003400

08003090 <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8003090:	b480      	push	{r7}
 8003092:	b083      	sub	sp, #12
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 8003098:	bf00      	nop
 800309a:	370c      	adds	r7, #12
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80030a4:	b580      	push	{r7, lr}
 80030a6:	b082      	sub	sp, #8
 80030a8:	af00      	add	r7, sp, #0
 80030aa:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030b0:	1c99      	adds	r1, r3, #2
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6251      	str	r1, [r2, #36]	; 0x24
 80030b6:	881a      	ldrh	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29a      	uxth	r2, r3
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030d0:	b29b      	uxth	r3, r3
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d113      	bne.n	80030fe <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	685a      	ldr	r2, [r3, #4]
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	681b      	ldr	r3, [r3, #0]
 80030e0:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80030e4:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80030ea:	b29b      	uxth	r3, r3
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d106      	bne.n	80030fe <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	2201      	movs	r2, #1
 80030f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80030f8:	6878      	ldr	r0, [r7, #4]
 80030fa:	f7ff ffc9 	bl	8003090 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030fe:	bf00      	nop
 8003100:	3708      	adds	r7, #8
 8003102:	46bd      	mov	sp, r7
 8003104:	bd80      	pop	{r7, pc}
	...

08003108 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003114:	1c99      	adds	r1, r3, #2
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	6251      	str	r1, [r2, #36]	; 0x24
 800311a:	8819      	ldrh	r1, [r3, #0]
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	4a1d      	ldr	r2, [pc, #116]	; (8003198 <I2SEx_TxISR_I2SExt+0x90>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d101      	bne.n	800312a <I2SEx_TxISR_I2SExt+0x22>
 8003126:	4b1d      	ldr	r3, [pc, #116]	; (800319c <I2SEx_TxISR_I2SExt+0x94>)
 8003128:	e001      	b.n	800312e <I2SEx_TxISR_I2SExt+0x26>
 800312a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800312e:	460a      	mov	r2, r1
 8003130:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003136:	b29b      	uxth	r3, r3
 8003138:	3b01      	subs	r3, #1
 800313a:	b29a      	uxth	r2, r3
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003144:	b29b      	uxth	r3, r3
 8003146:	2b00      	cmp	r3, #0
 8003148:	d121      	bne.n	800318e <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	4a12      	ldr	r2, [pc, #72]	; (8003198 <I2SEx_TxISR_I2SExt+0x90>)
 8003150:	4293      	cmp	r3, r2
 8003152:	d101      	bne.n	8003158 <I2SEx_TxISR_I2SExt+0x50>
 8003154:	4b11      	ldr	r3, [pc, #68]	; (800319c <I2SEx_TxISR_I2SExt+0x94>)
 8003156:	e001      	b.n	800315c <I2SEx_TxISR_I2SExt+0x54>
 8003158:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	490d      	ldr	r1, [pc, #52]	; (8003198 <I2SEx_TxISR_I2SExt+0x90>)
 8003164:	428b      	cmp	r3, r1
 8003166:	d101      	bne.n	800316c <I2SEx_TxISR_I2SExt+0x64>
 8003168:	4b0c      	ldr	r3, [pc, #48]	; (800319c <I2SEx_TxISR_I2SExt+0x94>)
 800316a:	e001      	b.n	8003170 <I2SEx_TxISR_I2SExt+0x68>
 800316c:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003170:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003174:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800317a:	b29b      	uxth	r3, r3
 800317c:	2b00      	cmp	r3, #0
 800317e:	d106      	bne.n	800318e <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f7ff ff81 	bl	8003090 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800318e:	bf00      	nop
 8003190:	3708      	adds	r7, #8
 8003192:	46bd      	mov	sp, r7
 8003194:	bd80      	pop	{r7, pc}
 8003196:	bf00      	nop
 8003198:	40003800 	.word	0x40003800
 800319c:	40003400 	.word	0x40003400

080031a0 <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b082      	sub	sp, #8
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	68d8      	ldr	r0, [r3, #12]
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031b2:	1c99      	adds	r1, r3, #2
 80031b4:	687a      	ldr	r2, [r7, #4]
 80031b6:	62d1      	str	r1, [r2, #44]	; 0x2c
 80031b8:	b282      	uxth	r2, r0
 80031ba:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031c0:	b29b      	uxth	r3, r3
 80031c2:	3b01      	subs	r3, #1
 80031c4:	b29a      	uxth	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031ce:	b29b      	uxth	r3, r3
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d113      	bne.n	80031fc <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 80031e2:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80031e8:	b29b      	uxth	r3, r3
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d106      	bne.n	80031fc <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2201      	movs	r2, #1
 80031f2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80031f6:	6878      	ldr	r0, [r7, #4]
 80031f8:	f7ff ff4a 	bl	8003090 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031fc:	bf00      	nop
 80031fe:	3708      	adds	r7, #8
 8003200:	46bd      	mov	sp, r7
 8003202:	bd80      	pop	{r7, pc}

08003204 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003204:	b580      	push	{r7, lr}
 8003206:	b082      	sub	sp, #8
 8003208:	af00      	add	r7, sp, #0
 800320a:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	4a20      	ldr	r2, [pc, #128]	; (8003294 <I2SEx_RxISR_I2SExt+0x90>)
 8003212:	4293      	cmp	r3, r2
 8003214:	d101      	bne.n	800321a <I2SEx_RxISR_I2SExt+0x16>
 8003216:	4b20      	ldr	r3, [pc, #128]	; (8003298 <I2SEx_RxISR_I2SExt+0x94>)
 8003218:	e001      	b.n	800321e <I2SEx_RxISR_I2SExt+0x1a>
 800321a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800321e:	68d8      	ldr	r0, [r3, #12]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003224:	1c99      	adds	r1, r3, #2
 8003226:	687a      	ldr	r2, [r7, #4]
 8003228:	62d1      	str	r1, [r2, #44]	; 0x2c
 800322a:	b282      	uxth	r2, r0
 800322c:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003232:	b29b      	uxth	r3, r3
 8003234:	3b01      	subs	r3, #1
 8003236:	b29a      	uxth	r2, r3
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003240:	b29b      	uxth	r3, r3
 8003242:	2b00      	cmp	r3, #0
 8003244:	d121      	bne.n	800328a <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a12      	ldr	r2, [pc, #72]	; (8003294 <I2SEx_RxISR_I2SExt+0x90>)
 800324c:	4293      	cmp	r3, r2
 800324e:	d101      	bne.n	8003254 <I2SEx_RxISR_I2SExt+0x50>
 8003250:	4b11      	ldr	r3, [pc, #68]	; (8003298 <I2SEx_RxISR_I2SExt+0x94>)
 8003252:	e001      	b.n	8003258 <I2SEx_RxISR_I2SExt+0x54>
 8003254:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003258:	685a      	ldr	r2, [r3, #4]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	490d      	ldr	r1, [pc, #52]	; (8003294 <I2SEx_RxISR_I2SExt+0x90>)
 8003260:	428b      	cmp	r3, r1
 8003262:	d101      	bne.n	8003268 <I2SEx_RxISR_I2SExt+0x64>
 8003264:	4b0c      	ldr	r3, [pc, #48]	; (8003298 <I2SEx_RxISR_I2SExt+0x94>)
 8003266:	e001      	b.n	800326c <I2SEx_RxISR_I2SExt+0x68>
 8003268:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800326c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8003270:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003276:	b29b      	uxth	r3, r3
 8003278:	2b00      	cmp	r3, #0
 800327a:	d106      	bne.n	800328a <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2201      	movs	r2, #1
 8003280:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003284:	6878      	ldr	r0, [r7, #4]
 8003286:	f7ff ff03 	bl	8003090 <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800328a:	bf00      	nop
 800328c:	3708      	adds	r7, #8
 800328e:	46bd      	mov	sp, r7
 8003290:	bd80      	pop	{r7, pc}
 8003292:	bf00      	nop
 8003294:	40003800 	.word	0x40003800
 8003298:	40003400 	.word	0x40003400

0800329c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800329c:	b580      	push	{r7, lr}
 800329e:	b086      	sub	sp, #24
 80032a0:	af00      	add	r7, sp, #0
 80032a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d101      	bne.n	80032ae <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e25b      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0301 	and.w	r3, r3, #1
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d075      	beq.n	80033a6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ba:	4ba3      	ldr	r3, [pc, #652]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80032bc:	689b      	ldr	r3, [r3, #8]
 80032be:	f003 030c 	and.w	r3, r3, #12
 80032c2:	2b04      	cmp	r3, #4
 80032c4:	d00c      	beq.n	80032e0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032c6:	4ba0      	ldr	r3, [pc, #640]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d112      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032d2:	4b9d      	ldr	r3, [pc, #628]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032da:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032de:	d10b      	bne.n	80032f8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032e0:	4b99      	ldr	r3, [pc, #612]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d05b      	beq.n	80033a4 <HAL_RCC_OscConfig+0x108>
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	2b00      	cmp	r3, #0
 80032f2:	d157      	bne.n	80033a4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032f4:	2301      	movs	r3, #1
 80032f6:	e236      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003300:	d106      	bne.n	8003310 <HAL_RCC_OscConfig+0x74>
 8003302:	4b91      	ldr	r3, [pc, #580]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a90      	ldr	r2, [pc, #576]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003308:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800330c:	6013      	str	r3, [r2, #0]
 800330e:	e01d      	b.n	800334c <HAL_RCC_OscConfig+0xb0>
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x98>
 800331a:	4b8b      	ldr	r3, [pc, #556]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4a8a      	ldr	r2, [pc, #552]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003320:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003324:	6013      	str	r3, [r2, #0]
 8003326:	4b88      	ldr	r3, [pc, #544]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	4a87      	ldr	r2, [pc, #540]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 800332c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003330:	6013      	str	r3, [r2, #0]
 8003332:	e00b      	b.n	800334c <HAL_RCC_OscConfig+0xb0>
 8003334:	4b84      	ldr	r3, [pc, #528]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a83      	ldr	r2, [pc, #524]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 800333a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800333e:	6013      	str	r3, [r2, #0]
 8003340:	4b81      	ldr	r3, [pc, #516]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a80      	ldr	r2, [pc, #512]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003346:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800334a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	2b00      	cmp	r3, #0
 8003352:	d013      	beq.n	800337c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fe fb1a 	bl	800198c <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800335c:	f7fe fb16 	bl	800198c <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b64      	cmp	r3, #100	; 0x64
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e1fb      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800336e:	4b76      	ldr	r3, [pc, #472]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d0f0      	beq.n	800335c <HAL_RCC_OscConfig+0xc0>
 800337a:	e014      	b.n	80033a6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800337c:	f7fe fb06 	bl	800198c <HAL_GetTick>
 8003380:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003382:	e008      	b.n	8003396 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003384:	f7fe fb02 	bl	800198c <HAL_GetTick>
 8003388:	4602      	mov	r2, r0
 800338a:	693b      	ldr	r3, [r7, #16]
 800338c:	1ad3      	subs	r3, r2, r3
 800338e:	2b64      	cmp	r3, #100	; 0x64
 8003390:	d901      	bls.n	8003396 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003392:	2303      	movs	r3, #3
 8003394:	e1e7      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003396:	4b6c      	ldr	r3, [pc, #432]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d1f0      	bne.n	8003384 <HAL_RCC_OscConfig+0xe8>
 80033a2:	e000      	b.n	80033a6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f003 0302 	and.w	r3, r3, #2
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	d063      	beq.n	800347a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033b2:	4b65      	ldr	r3, [pc, #404]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80033b4:	689b      	ldr	r3, [r3, #8]
 80033b6:	f003 030c 	and.w	r3, r3, #12
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d00b      	beq.n	80033d6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033be:	4b62      	ldr	r3, [pc, #392]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033c6:	2b08      	cmp	r3, #8
 80033c8:	d11c      	bne.n	8003404 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ca:	4b5f      	ldr	r3, [pc, #380]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80033cc:	685b      	ldr	r3, [r3, #4]
 80033ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d116      	bne.n	8003404 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033d6:	4b5c      	ldr	r3, [pc, #368]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d005      	beq.n	80033ee <HAL_RCC_OscConfig+0x152>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	68db      	ldr	r3, [r3, #12]
 80033e6:	2b01      	cmp	r3, #1
 80033e8:	d001      	beq.n	80033ee <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e1bb      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033ee:	4b56      	ldr	r3, [pc, #344]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	691b      	ldr	r3, [r3, #16]
 80033fa:	00db      	lsls	r3, r3, #3
 80033fc:	4952      	ldr	r1, [pc, #328]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80033fe:	4313      	orrs	r3, r2
 8003400:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003402:	e03a      	b.n	800347a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	68db      	ldr	r3, [r3, #12]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d020      	beq.n	800344e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800340c:	4b4f      	ldr	r3, [pc, #316]	; (800354c <HAL_RCC_OscConfig+0x2b0>)
 800340e:	2201      	movs	r2, #1
 8003410:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003412:	f7fe fabb 	bl	800198c <HAL_GetTick>
 8003416:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003418:	e008      	b.n	800342c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800341a:	f7fe fab7 	bl	800198c <HAL_GetTick>
 800341e:	4602      	mov	r2, r0
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	1ad3      	subs	r3, r2, r3
 8003424:	2b02      	cmp	r3, #2
 8003426:	d901      	bls.n	800342c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e19c      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800342c:	4b46      	ldr	r3, [pc, #280]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0302 	and.w	r3, r3, #2
 8003434:	2b00      	cmp	r3, #0
 8003436:	d0f0      	beq.n	800341a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003438:	4b43      	ldr	r3, [pc, #268]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	691b      	ldr	r3, [r3, #16]
 8003444:	00db      	lsls	r3, r3, #3
 8003446:	4940      	ldr	r1, [pc, #256]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003448:	4313      	orrs	r3, r2
 800344a:	600b      	str	r3, [r1, #0]
 800344c:	e015      	b.n	800347a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800344e:	4b3f      	ldr	r3, [pc, #252]	; (800354c <HAL_RCC_OscConfig+0x2b0>)
 8003450:	2200      	movs	r2, #0
 8003452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003454:	f7fe fa9a 	bl	800198c <HAL_GetTick>
 8003458:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800345a:	e008      	b.n	800346e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800345c:	f7fe fa96 	bl	800198c <HAL_GetTick>
 8003460:	4602      	mov	r2, r0
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	1ad3      	subs	r3, r2, r3
 8003466:	2b02      	cmp	r3, #2
 8003468:	d901      	bls.n	800346e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800346a:	2303      	movs	r3, #3
 800346c:	e17b      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800346e:	4b36      	ldr	r3, [pc, #216]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d1f0      	bne.n	800345c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b00      	cmp	r3, #0
 8003484:	d030      	beq.n	80034e8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	695b      	ldr	r3, [r3, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d016      	beq.n	80034bc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800348e:	4b30      	ldr	r3, [pc, #192]	; (8003550 <HAL_RCC_OscConfig+0x2b4>)
 8003490:	2201      	movs	r2, #1
 8003492:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003494:	f7fe fa7a 	bl	800198c <HAL_GetTick>
 8003498:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800349a:	e008      	b.n	80034ae <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800349c:	f7fe fa76 	bl	800198c <HAL_GetTick>
 80034a0:	4602      	mov	r2, r0
 80034a2:	693b      	ldr	r3, [r7, #16]
 80034a4:	1ad3      	subs	r3, r2, r3
 80034a6:	2b02      	cmp	r3, #2
 80034a8:	d901      	bls.n	80034ae <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034aa:	2303      	movs	r3, #3
 80034ac:	e15b      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034ae:	4b26      	ldr	r3, [pc, #152]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80034b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034b2:	f003 0302 	and.w	r3, r3, #2
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d0f0      	beq.n	800349c <HAL_RCC_OscConfig+0x200>
 80034ba:	e015      	b.n	80034e8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034bc:	4b24      	ldr	r3, [pc, #144]	; (8003550 <HAL_RCC_OscConfig+0x2b4>)
 80034be:	2200      	movs	r2, #0
 80034c0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034c2:	f7fe fa63 	bl	800198c <HAL_GetTick>
 80034c6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034c8:	e008      	b.n	80034dc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034ca:	f7fe fa5f 	bl	800198c <HAL_GetTick>
 80034ce:	4602      	mov	r2, r0
 80034d0:	693b      	ldr	r3, [r7, #16]
 80034d2:	1ad3      	subs	r3, r2, r3
 80034d4:	2b02      	cmp	r3, #2
 80034d6:	d901      	bls.n	80034dc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80034d8:	2303      	movs	r3, #3
 80034da:	e144      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034dc:	4b1a      	ldr	r3, [pc, #104]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80034de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034e0:	f003 0302 	and.w	r3, r3, #2
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d1f0      	bne.n	80034ca <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0304 	and.w	r3, r3, #4
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	f000 80a0 	beq.w	8003636 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034f6:	2300      	movs	r3, #0
 80034f8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034fa:	4b13      	ldr	r3, [pc, #76]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 80034fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034fe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d10f      	bne.n	8003526 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003506:	2300      	movs	r3, #0
 8003508:	60bb      	str	r3, [r7, #8]
 800350a:	4b0f      	ldr	r3, [pc, #60]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 800350c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800350e:	4a0e      	ldr	r2, [pc, #56]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003514:	6413      	str	r3, [r2, #64]	; 0x40
 8003516:	4b0c      	ldr	r3, [pc, #48]	; (8003548 <HAL_RCC_OscConfig+0x2ac>)
 8003518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800351e:	60bb      	str	r3, [r7, #8]
 8003520:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003522:	2301      	movs	r3, #1
 8003524:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003526:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <HAL_RCC_OscConfig+0x2b8>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800352e:	2b00      	cmp	r3, #0
 8003530:	d121      	bne.n	8003576 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003532:	4b08      	ldr	r3, [pc, #32]	; (8003554 <HAL_RCC_OscConfig+0x2b8>)
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	4a07      	ldr	r2, [pc, #28]	; (8003554 <HAL_RCC_OscConfig+0x2b8>)
 8003538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800353e:	f7fe fa25 	bl	800198c <HAL_GetTick>
 8003542:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003544:	e011      	b.n	800356a <HAL_RCC_OscConfig+0x2ce>
 8003546:	bf00      	nop
 8003548:	40023800 	.word	0x40023800
 800354c:	42470000 	.word	0x42470000
 8003550:	42470e80 	.word	0x42470e80
 8003554:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003558:	f7fe fa18 	bl	800198c <HAL_GetTick>
 800355c:	4602      	mov	r2, r0
 800355e:	693b      	ldr	r3, [r7, #16]
 8003560:	1ad3      	subs	r3, r2, r3
 8003562:	2b02      	cmp	r3, #2
 8003564:	d901      	bls.n	800356a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003566:	2303      	movs	r3, #3
 8003568:	e0fd      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800356a:	4b81      	ldr	r3, [pc, #516]	; (8003770 <HAL_RCC_OscConfig+0x4d4>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003572:	2b00      	cmp	r3, #0
 8003574:	d0f0      	beq.n	8003558 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	689b      	ldr	r3, [r3, #8]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d106      	bne.n	800358c <HAL_RCC_OscConfig+0x2f0>
 800357e:	4b7d      	ldr	r3, [pc, #500]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 8003580:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003582:	4a7c      	ldr	r2, [pc, #496]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 8003584:	f043 0301 	orr.w	r3, r3, #1
 8003588:	6713      	str	r3, [r2, #112]	; 0x70
 800358a:	e01c      	b.n	80035c6 <HAL_RCC_OscConfig+0x32a>
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	2b05      	cmp	r3, #5
 8003592:	d10c      	bne.n	80035ae <HAL_RCC_OscConfig+0x312>
 8003594:	4b77      	ldr	r3, [pc, #476]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 8003596:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003598:	4a76      	ldr	r2, [pc, #472]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 800359a:	f043 0304 	orr.w	r3, r3, #4
 800359e:	6713      	str	r3, [r2, #112]	; 0x70
 80035a0:	4b74      	ldr	r3, [pc, #464]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 80035a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a4:	4a73      	ldr	r2, [pc, #460]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 80035a6:	f043 0301 	orr.w	r3, r3, #1
 80035aa:	6713      	str	r3, [r2, #112]	; 0x70
 80035ac:	e00b      	b.n	80035c6 <HAL_RCC_OscConfig+0x32a>
 80035ae:	4b71      	ldr	r3, [pc, #452]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 80035b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035b2:	4a70      	ldr	r2, [pc, #448]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 80035b4:	f023 0301 	bic.w	r3, r3, #1
 80035b8:	6713      	str	r3, [r2, #112]	; 0x70
 80035ba:	4b6e      	ldr	r3, [pc, #440]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 80035bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035be:	4a6d      	ldr	r2, [pc, #436]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 80035c0:	f023 0304 	bic.w	r3, r3, #4
 80035c4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d015      	beq.n	80035fa <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035ce:	f7fe f9dd 	bl	800198c <HAL_GetTick>
 80035d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035d4:	e00a      	b.n	80035ec <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035d6:	f7fe f9d9 	bl	800198c <HAL_GetTick>
 80035da:	4602      	mov	r2, r0
 80035dc:	693b      	ldr	r3, [r7, #16]
 80035de:	1ad3      	subs	r3, r2, r3
 80035e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d901      	bls.n	80035ec <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80035e8:	2303      	movs	r3, #3
 80035ea:	e0bc      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035ec:	4b61      	ldr	r3, [pc, #388]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 80035ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035f0:	f003 0302 	and.w	r3, r3, #2
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d0ee      	beq.n	80035d6 <HAL_RCC_OscConfig+0x33a>
 80035f8:	e014      	b.n	8003624 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035fa:	f7fe f9c7 	bl	800198c <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003600:	e00a      	b.n	8003618 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fe f9c3 	bl	800198c <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e0a6      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003618:	4b56      	ldr	r3, [pc, #344]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d1ee      	bne.n	8003602 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003624:	7dfb      	ldrb	r3, [r7, #23]
 8003626:	2b01      	cmp	r3, #1
 8003628:	d105      	bne.n	8003636 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800362a:	4b52      	ldr	r3, [pc, #328]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	4a51      	ldr	r2, [pc, #324]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 8003630:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003634:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	699b      	ldr	r3, [r3, #24]
 800363a:	2b00      	cmp	r3, #0
 800363c:	f000 8092 	beq.w	8003764 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003640:	4b4c      	ldr	r3, [pc, #304]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 8003642:	689b      	ldr	r3, [r3, #8]
 8003644:	f003 030c 	and.w	r3, r3, #12
 8003648:	2b08      	cmp	r3, #8
 800364a:	d05c      	beq.n	8003706 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	699b      	ldr	r3, [r3, #24]
 8003650:	2b02      	cmp	r3, #2
 8003652:	d141      	bne.n	80036d8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003654:	4b48      	ldr	r3, [pc, #288]	; (8003778 <HAL_RCC_OscConfig+0x4dc>)
 8003656:	2200      	movs	r2, #0
 8003658:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800365a:	f7fe f997 	bl	800198c <HAL_GetTick>
 800365e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003660:	e008      	b.n	8003674 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003662:	f7fe f993 	bl	800198c <HAL_GetTick>
 8003666:	4602      	mov	r2, r0
 8003668:	693b      	ldr	r3, [r7, #16]
 800366a:	1ad3      	subs	r3, r2, r3
 800366c:	2b02      	cmp	r3, #2
 800366e:	d901      	bls.n	8003674 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003670:	2303      	movs	r3, #3
 8003672:	e078      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003674:	4b3f      	ldr	r3, [pc, #252]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1f0      	bne.n	8003662 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	69da      	ldr	r2, [r3, #28]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	431a      	orrs	r2, r3
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800368e:	019b      	lsls	r3, r3, #6
 8003690:	431a      	orrs	r2, r3
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003696:	085b      	lsrs	r3, r3, #1
 8003698:	3b01      	subs	r3, #1
 800369a:	041b      	lsls	r3, r3, #16
 800369c:	431a      	orrs	r2, r3
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a2:	061b      	lsls	r3, r3, #24
 80036a4:	4933      	ldr	r1, [pc, #204]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 80036a6:	4313      	orrs	r3, r2
 80036a8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036aa:	4b33      	ldr	r3, [pc, #204]	; (8003778 <HAL_RCC_OscConfig+0x4dc>)
 80036ac:	2201      	movs	r2, #1
 80036ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7fe f96c 	bl	800198c <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036b8:	f7fe f968 	bl	800198c <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b02      	cmp	r3, #2
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e04d      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036ca:	4b2a      	ldr	r3, [pc, #168]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d0f0      	beq.n	80036b8 <HAL_RCC_OscConfig+0x41c>
 80036d6:	e045      	b.n	8003764 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036d8:	4b27      	ldr	r3, [pc, #156]	; (8003778 <HAL_RCC_OscConfig+0x4dc>)
 80036da:	2200      	movs	r2, #0
 80036dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036de:	f7fe f955 	bl	800198c <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e6:	f7fe f951 	bl	800198c <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e036      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036f8:	4b1e      	ldr	r3, [pc, #120]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003700:	2b00      	cmp	r3, #0
 8003702:	d1f0      	bne.n	80036e6 <HAL_RCC_OscConfig+0x44a>
 8003704:	e02e      	b.n	8003764 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	699b      	ldr	r3, [r3, #24]
 800370a:	2b01      	cmp	r3, #1
 800370c:	d101      	bne.n	8003712 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e029      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003712:	4b18      	ldr	r3, [pc, #96]	; (8003774 <HAL_RCC_OscConfig+0x4d8>)
 8003714:	685b      	ldr	r3, [r3, #4]
 8003716:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	429a      	cmp	r2, r3
 8003724:	d11c      	bne.n	8003760 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003730:	429a      	cmp	r2, r3
 8003732:	d115      	bne.n	8003760 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003734:	68fa      	ldr	r2, [r7, #12]
 8003736:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800373a:	4013      	ands	r3, r2
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003740:	4293      	cmp	r3, r2
 8003742:	d10d      	bne.n	8003760 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800374e:	429a      	cmp	r2, r3
 8003750:	d106      	bne.n	8003760 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800375c:	429a      	cmp	r2, r3
 800375e:	d001      	beq.n	8003764 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8003760:	2301      	movs	r3, #1
 8003762:	e000      	b.n	8003766 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003764:	2300      	movs	r3, #0
}
 8003766:	4618      	mov	r0, r3
 8003768:	3718      	adds	r7, #24
 800376a:	46bd      	mov	sp, r7
 800376c:	bd80      	pop	{r7, pc}
 800376e:	bf00      	nop
 8003770:	40007000 	.word	0x40007000
 8003774:	40023800 	.word	0x40023800
 8003778:	42470060 	.word	0x42470060

0800377c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
 8003784:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2b00      	cmp	r3, #0
 800378a:	d101      	bne.n	8003790 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e0cc      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003790:	4b68      	ldr	r3, [pc, #416]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 030f 	and.w	r3, r3, #15
 8003798:	683a      	ldr	r2, [r7, #0]
 800379a:	429a      	cmp	r2, r3
 800379c:	d90c      	bls.n	80037b8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800379e:	4b65      	ldr	r3, [pc, #404]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80037a0:	683a      	ldr	r2, [r7, #0]
 80037a2:	b2d2      	uxtb	r2, r2
 80037a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037a6:	4b63      	ldr	r3, [pc, #396]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 030f 	and.w	r3, r3, #15
 80037ae:	683a      	ldr	r2, [r7, #0]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d001      	beq.n	80037b8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e0b8      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f003 0302 	and.w	r3, r3, #2
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d020      	beq.n	8003806 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f003 0304 	and.w	r3, r3, #4
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d005      	beq.n	80037dc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037d0:	4b59      	ldr	r3, [pc, #356]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	4a58      	ldr	r2, [pc, #352]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037da:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	f003 0308 	and.w	r3, r3, #8
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d005      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037e8:	4b53      	ldr	r3, [pc, #332]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037ea:	689b      	ldr	r3, [r3, #8]
 80037ec:	4a52      	ldr	r2, [pc, #328]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037f2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037f4:	4b50      	ldr	r3, [pc, #320]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	494d      	ldr	r1, [pc, #308]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	4313      	orrs	r3, r2
 8003804:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0301 	and.w	r3, r3, #1
 800380e:	2b00      	cmp	r3, #0
 8003810:	d044      	beq.n	800389c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	685b      	ldr	r3, [r3, #4]
 8003816:	2b01      	cmp	r3, #1
 8003818:	d107      	bne.n	800382a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800381a:	4b47      	ldr	r3, [pc, #284]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d119      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e07f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	2b02      	cmp	r3, #2
 8003830:	d003      	beq.n	800383a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003836:	2b03      	cmp	r3, #3
 8003838:	d107      	bne.n	800384a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800383a:	4b3f      	ldr	r3, [pc, #252]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800383c:	681b      	ldr	r3, [r3, #0]
 800383e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d109      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003846:	2301      	movs	r3, #1
 8003848:	e06f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800384a:	4b3b      	ldr	r3, [pc, #236]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f003 0302 	and.w	r3, r3, #2
 8003852:	2b00      	cmp	r3, #0
 8003854:	d101      	bne.n	800385a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003856:	2301      	movs	r3, #1
 8003858:	e067      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800385a:	4b37      	ldr	r3, [pc, #220]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800385c:	689b      	ldr	r3, [r3, #8]
 800385e:	f023 0203 	bic.w	r2, r3, #3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	685b      	ldr	r3, [r3, #4]
 8003866:	4934      	ldr	r1, [pc, #208]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	4313      	orrs	r3, r2
 800386a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800386c:	f7fe f88e 	bl	800198c <HAL_GetTick>
 8003870:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003872:	e00a      	b.n	800388a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003874:	f7fe f88a 	bl	800198c <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e04f      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800388a:	4b2b      	ldr	r3, [pc, #172]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	f003 020c 	and.w	r2, r3, #12
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	009b      	lsls	r3, r3, #2
 8003898:	429a      	cmp	r2, r3
 800389a:	d1eb      	bne.n	8003874 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800389c:	4b25      	ldr	r3, [pc, #148]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 030f 	and.w	r3, r3, #15
 80038a4:	683a      	ldr	r2, [r7, #0]
 80038a6:	429a      	cmp	r2, r3
 80038a8:	d20c      	bcs.n	80038c4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038aa:	4b22      	ldr	r3, [pc, #136]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80038ac:	683a      	ldr	r2, [r7, #0]
 80038ae:	b2d2      	uxtb	r2, r2
 80038b0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038b2:	4b20      	ldr	r3, [pc, #128]	; (8003934 <HAL_RCC_ClockConfig+0x1b8>)
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	f003 030f 	and.w	r3, r3, #15
 80038ba:	683a      	ldr	r2, [r7, #0]
 80038bc:	429a      	cmp	r2, r3
 80038be:	d001      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038c0:	2301      	movs	r3, #1
 80038c2:	e032      	b.n	800392a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f003 0304 	and.w	r3, r3, #4
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d008      	beq.n	80038e2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038d0:	4b19      	ldr	r3, [pc, #100]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038d2:	689b      	ldr	r3, [r3, #8]
 80038d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	68db      	ldr	r3, [r3, #12]
 80038dc:	4916      	ldr	r1, [pc, #88]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038de:	4313      	orrs	r3, r2
 80038e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f003 0308 	and.w	r3, r3, #8
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d009      	beq.n	8003902 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ee:	4b12      	ldr	r3, [pc, #72]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	691b      	ldr	r3, [r3, #16]
 80038fa:	00db      	lsls	r3, r3, #3
 80038fc:	490e      	ldr	r1, [pc, #56]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	4313      	orrs	r3, r2
 8003900:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003902:	f000 f821 	bl	8003948 <HAL_RCC_GetSysClockFreq>
 8003906:	4601      	mov	r1, r0
 8003908:	4b0b      	ldr	r3, [pc, #44]	; (8003938 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	091b      	lsrs	r3, r3, #4
 800390e:	f003 030f 	and.w	r3, r3, #15
 8003912:	4a0a      	ldr	r2, [pc, #40]	; (800393c <HAL_RCC_ClockConfig+0x1c0>)
 8003914:	5cd3      	ldrb	r3, [r2, r3]
 8003916:	fa21 f303 	lsr.w	r3, r1, r3
 800391a:	4a09      	ldr	r2, [pc, #36]	; (8003940 <HAL_RCC_ClockConfig+0x1c4>)
 800391c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800391e:	4b09      	ldr	r3, [pc, #36]	; (8003944 <HAL_RCC_ClockConfig+0x1c8>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4618      	mov	r0, r3
 8003924:	f7fd ffee 	bl	8001904 <HAL_InitTick>

  return HAL_OK;
 8003928:	2300      	movs	r3, #0
}
 800392a:	4618      	mov	r0, r3
 800392c:	3710      	adds	r7, #16
 800392e:	46bd      	mov	sp, r7
 8003930:	bd80      	pop	{r7, pc}
 8003932:	bf00      	nop
 8003934:	40023c00 	.word	0x40023c00
 8003938:	40023800 	.word	0x40023800
 800393c:	08005b38 	.word	0x08005b38
 8003940:	20000000 	.word	0x20000000
 8003944:	20000004 	.word	0x20000004

08003948 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800394e:	2300      	movs	r3, #0
 8003950:	607b      	str	r3, [r7, #4]
 8003952:	2300      	movs	r3, #0
 8003954:	60fb      	str	r3, [r7, #12]
 8003956:	2300      	movs	r3, #0
 8003958:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800395a:	2300      	movs	r3, #0
 800395c:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800395e:	4b63      	ldr	r3, [pc, #396]	; (8003aec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f003 030c 	and.w	r3, r3, #12
 8003966:	2b04      	cmp	r3, #4
 8003968:	d007      	beq.n	800397a <HAL_RCC_GetSysClockFreq+0x32>
 800396a:	2b08      	cmp	r3, #8
 800396c:	d008      	beq.n	8003980 <HAL_RCC_GetSysClockFreq+0x38>
 800396e:	2b00      	cmp	r3, #0
 8003970:	f040 80b4 	bne.w	8003adc <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003974:	4b5e      	ldr	r3, [pc, #376]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003976:	60bb      	str	r3, [r7, #8]
       break;
 8003978:	e0b3      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800397a:	4b5e      	ldr	r3, [pc, #376]	; (8003af4 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800397c:	60bb      	str	r3, [r7, #8]
      break;
 800397e:	e0b0      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003980:	4b5a      	ldr	r3, [pc, #360]	; (8003aec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003982:	685b      	ldr	r3, [r3, #4]
 8003984:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003988:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800398a:	4b58      	ldr	r3, [pc, #352]	; (8003aec <HAL_RCC_GetSysClockFreq+0x1a4>)
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003992:	2b00      	cmp	r3, #0
 8003994:	d04a      	beq.n	8003a2c <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003996:	4b55      	ldr	r3, [pc, #340]	; (8003aec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	099b      	lsrs	r3, r3, #6
 800399c:	f04f 0400 	mov.w	r4, #0
 80039a0:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039a4:	f04f 0200 	mov.w	r2, #0
 80039a8:	ea03 0501 	and.w	r5, r3, r1
 80039ac:	ea04 0602 	and.w	r6, r4, r2
 80039b0:	4629      	mov	r1, r5
 80039b2:	4632      	mov	r2, r6
 80039b4:	f04f 0300 	mov.w	r3, #0
 80039b8:	f04f 0400 	mov.w	r4, #0
 80039bc:	0154      	lsls	r4, r2, #5
 80039be:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039c2:	014b      	lsls	r3, r1, #5
 80039c4:	4619      	mov	r1, r3
 80039c6:	4622      	mov	r2, r4
 80039c8:	1b49      	subs	r1, r1, r5
 80039ca:	eb62 0206 	sbc.w	r2, r2, r6
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	f04f 0400 	mov.w	r4, #0
 80039d6:	0194      	lsls	r4, r2, #6
 80039d8:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80039dc:	018b      	lsls	r3, r1, #6
 80039de:	1a5b      	subs	r3, r3, r1
 80039e0:	eb64 0402 	sbc.w	r4, r4, r2
 80039e4:	f04f 0100 	mov.w	r1, #0
 80039e8:	f04f 0200 	mov.w	r2, #0
 80039ec:	00e2      	lsls	r2, r4, #3
 80039ee:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80039f2:	00d9      	lsls	r1, r3, #3
 80039f4:	460b      	mov	r3, r1
 80039f6:	4614      	mov	r4, r2
 80039f8:	195b      	adds	r3, r3, r5
 80039fa:	eb44 0406 	adc.w	r4, r4, r6
 80039fe:	f04f 0100 	mov.w	r1, #0
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	0262      	lsls	r2, r4, #9
 8003a08:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003a0c:	0259      	lsls	r1, r3, #9
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4614      	mov	r4, r2
 8003a12:	4618      	mov	r0, r3
 8003a14:	4621      	mov	r1, r4
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	f04f 0400 	mov.w	r4, #0
 8003a1c:	461a      	mov	r2, r3
 8003a1e:	4623      	mov	r3, r4
 8003a20:	f7fd f866 	bl	8000af0 <__aeabi_uldivmod>
 8003a24:	4603      	mov	r3, r0
 8003a26:	460c      	mov	r4, r1
 8003a28:	60fb      	str	r3, [r7, #12]
 8003a2a:	e049      	b.n	8003ac0 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a2c:	4b2f      	ldr	r3, [pc, #188]	; (8003aec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a2e:	685b      	ldr	r3, [r3, #4]
 8003a30:	099b      	lsrs	r3, r3, #6
 8003a32:	f04f 0400 	mov.w	r4, #0
 8003a36:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a3a:	f04f 0200 	mov.w	r2, #0
 8003a3e:	ea03 0501 	and.w	r5, r3, r1
 8003a42:	ea04 0602 	and.w	r6, r4, r2
 8003a46:	4629      	mov	r1, r5
 8003a48:	4632      	mov	r2, r6
 8003a4a:	f04f 0300 	mov.w	r3, #0
 8003a4e:	f04f 0400 	mov.w	r4, #0
 8003a52:	0154      	lsls	r4, r2, #5
 8003a54:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a58:	014b      	lsls	r3, r1, #5
 8003a5a:	4619      	mov	r1, r3
 8003a5c:	4622      	mov	r2, r4
 8003a5e:	1b49      	subs	r1, r1, r5
 8003a60:	eb62 0206 	sbc.w	r2, r2, r6
 8003a64:	f04f 0300 	mov.w	r3, #0
 8003a68:	f04f 0400 	mov.w	r4, #0
 8003a6c:	0194      	lsls	r4, r2, #6
 8003a6e:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a72:	018b      	lsls	r3, r1, #6
 8003a74:	1a5b      	subs	r3, r3, r1
 8003a76:	eb64 0402 	sbc.w	r4, r4, r2
 8003a7a:	f04f 0100 	mov.w	r1, #0
 8003a7e:	f04f 0200 	mov.w	r2, #0
 8003a82:	00e2      	lsls	r2, r4, #3
 8003a84:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a88:	00d9      	lsls	r1, r3, #3
 8003a8a:	460b      	mov	r3, r1
 8003a8c:	4614      	mov	r4, r2
 8003a8e:	195b      	adds	r3, r3, r5
 8003a90:	eb44 0406 	adc.w	r4, r4, r6
 8003a94:	f04f 0100 	mov.w	r1, #0
 8003a98:	f04f 0200 	mov.w	r2, #0
 8003a9c:	02a2      	lsls	r2, r4, #10
 8003a9e:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003aa2:	0299      	lsls	r1, r3, #10
 8003aa4:	460b      	mov	r3, r1
 8003aa6:	4614      	mov	r4, r2
 8003aa8:	4618      	mov	r0, r3
 8003aaa:	4621      	mov	r1, r4
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	f04f 0400 	mov.w	r4, #0
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	4623      	mov	r3, r4
 8003ab6:	f7fd f81b 	bl	8000af0 <__aeabi_uldivmod>
 8003aba:	4603      	mov	r3, r0
 8003abc:	460c      	mov	r4, r1
 8003abe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ac0:	4b0a      	ldr	r3, [pc, #40]	; (8003aec <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003ac2:	685b      	ldr	r3, [r3, #4]
 8003ac4:	0c1b      	lsrs	r3, r3, #16
 8003ac6:	f003 0303 	and.w	r3, r3, #3
 8003aca:	3301      	adds	r3, #1
 8003acc:	005b      	lsls	r3, r3, #1
 8003ace:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003ad0:	68fa      	ldr	r2, [r7, #12]
 8003ad2:	683b      	ldr	r3, [r7, #0]
 8003ad4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ad8:	60bb      	str	r3, [r7, #8]
      break;
 8003ada:	e002      	b.n	8003ae2 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003adc:	4b04      	ldr	r3, [pc, #16]	; (8003af0 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003ade:	60bb      	str	r3, [r7, #8]
      break;
 8003ae0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003ae2:	68bb      	ldr	r3, [r7, #8]
}
 8003ae4:	4618      	mov	r0, r3
 8003ae6:	3714      	adds	r7, #20
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003aec:	40023800 	.word	0x40023800
 8003af0:	00f42400 	.word	0x00f42400
 8003af4:	007a1200 	.word	0x007a1200

08003af8 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	b086      	sub	sp, #24
 8003afc:	af00      	add	r7, sp, #0
 8003afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d105      	bne.n	8003b20 <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d035      	beq.n	8003b8c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b20:	4b62      	ldr	r3, [pc, #392]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003b22:	2200      	movs	r2, #0
 8003b24:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b26:	f7fd ff31 	bl	800198c <HAL_GetTick>
 8003b2a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b2c:	e008      	b.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b2e:	f7fd ff2d 	bl	800198c <HAL_GetTick>
 8003b32:	4602      	mov	r2, r0
 8003b34:	697b      	ldr	r3, [r7, #20]
 8003b36:	1ad3      	subs	r3, r2, r3
 8003b38:	2b02      	cmp	r3, #2
 8003b3a:	d901      	bls.n	8003b40 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b3c:	2303      	movs	r3, #3
 8003b3e:	e0b0      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b40:	4b5b      	ldr	r3, [pc, #364]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f0      	bne.n	8003b2e <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	685b      	ldr	r3, [r3, #4]
 8003b50:	019a      	lsls	r2, r3, #6
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	071b      	lsls	r3, r3, #28
 8003b58:	4955      	ldr	r1, [pc, #340]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b5a:	4313      	orrs	r3, r2
 8003b5c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b60:	4b52      	ldr	r3, [pc, #328]	; (8003cac <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003b62:	2201      	movs	r2, #1
 8003b64:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b66:	f7fd ff11 	bl	800198c <HAL_GetTick>
 8003b6a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b6c:	e008      	b.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b6e:	f7fd ff0d 	bl	800198c <HAL_GetTick>
 8003b72:	4602      	mov	r2, r0
 8003b74:	697b      	ldr	r3, [r7, #20]
 8003b76:	1ad3      	subs	r3, r2, r3
 8003b78:	2b02      	cmp	r3, #2
 8003b7a:	d901      	bls.n	8003b80 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b7c:	2303      	movs	r3, #3
 8003b7e:	e090      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b80:	4b4b      	ldr	r3, [pc, #300]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d0f0      	beq.n	8003b6e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f003 0302 	and.w	r3, r3, #2
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	f000 8083 	beq.w	8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003b9a:	2300      	movs	r3, #0
 8003b9c:	60fb      	str	r3, [r7, #12]
 8003b9e:	4b44      	ldr	r3, [pc, #272]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ba0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba2:	4a43      	ldr	r2, [pc, #268]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ba8:	6413      	str	r3, [r2, #64]	; 0x40
 8003baa:	4b41      	ldr	r3, [pc, #260]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bb2:	60fb      	str	r3, [r7, #12]
 8003bb4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003bb6:	4b3f      	ldr	r3, [pc, #252]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	4a3e      	ldr	r2, [pc, #248]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bbc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bc0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bc2:	f7fd fee3 	bl	800198c <HAL_GetTick>
 8003bc6:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003bc8:	e008      	b.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003bca:	f7fd fedf 	bl	800198c <HAL_GetTick>
 8003bce:	4602      	mov	r2, r0
 8003bd0:	697b      	ldr	r3, [r7, #20]
 8003bd2:	1ad3      	subs	r3, r2, r3
 8003bd4:	2b02      	cmp	r3, #2
 8003bd6:	d901      	bls.n	8003bdc <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003bd8:	2303      	movs	r3, #3
 8003bda:	e062      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003bdc:	4b35      	ldr	r3, [pc, #212]	; (8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be4:	2b00      	cmp	r3, #0
 8003be6:	d0f0      	beq.n	8003bca <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003be8:	4b31      	ldr	r3, [pc, #196]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003bec:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003bf0:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003bf2:	693b      	ldr	r3, [r7, #16]
 8003bf4:	2b00      	cmp	r3, #0
 8003bf6:	d02f      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	68db      	ldr	r3, [r3, #12]
 8003bfc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c00:	693a      	ldr	r2, [r7, #16]
 8003c02:	429a      	cmp	r2, r3
 8003c04:	d028      	beq.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c06:	4b2a      	ldr	r3, [pc, #168]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c0e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c10:	4b29      	ldr	r3, [pc, #164]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c12:	2201      	movs	r2, #1
 8003c14:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c16:	4b28      	ldr	r3, [pc, #160]	; (8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c18:	2200      	movs	r2, #0
 8003c1a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c1c:	4a24      	ldr	r2, [pc, #144]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c22:	4b23      	ldr	r3, [pc, #140]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c26:	f003 0301 	and.w	r3, r3, #1
 8003c2a:	2b01      	cmp	r3, #1
 8003c2c:	d114      	bne.n	8003c58 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c2e:	f7fd fead 	bl	800198c <HAL_GetTick>
 8003c32:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c34:	e00a      	b.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c36:	f7fd fea9 	bl	800198c <HAL_GetTick>
 8003c3a:	4602      	mov	r2, r0
 8003c3c:	697b      	ldr	r3, [r7, #20]
 8003c3e:	1ad3      	subs	r3, r2, r3
 8003c40:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c44:	4293      	cmp	r3, r2
 8003c46:	d901      	bls.n	8003c4c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003c48:	2303      	movs	r3, #3
 8003c4a:	e02a      	b.n	8003ca2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c4c:	4b18      	ldr	r3, [pc, #96]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d0ee      	beq.n	8003c36 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	68db      	ldr	r3, [r3, #12]
 8003c5c:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c60:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c64:	d10d      	bne.n	8003c82 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003c66:	4b12      	ldr	r3, [pc, #72]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c68:	689b      	ldr	r3, [r3, #8]
 8003c6a:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	68db      	ldr	r3, [r3, #12]
 8003c72:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003c76:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c7a:	490d      	ldr	r1, [pc, #52]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	608b      	str	r3, [r1, #8]
 8003c80:	e005      	b.n	8003c8e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003c82:	4b0b      	ldr	r3, [pc, #44]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c84:	689b      	ldr	r3, [r3, #8]
 8003c86:	4a0a      	ldr	r2, [pc, #40]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c88:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003c8c:	6093      	str	r3, [r2, #8]
 8003c8e:	4b08      	ldr	r3, [pc, #32]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c90:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	68db      	ldr	r3, [r3, #12]
 8003c96:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003c9a:	4905      	ldr	r1, [pc, #20]	; (8003cb0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c9c:	4313      	orrs	r3, r2
 8003c9e:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003ca0:	2300      	movs	r3, #0
}
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	3718      	adds	r7, #24
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bd80      	pop	{r7, pc}
 8003caa:	bf00      	nop
 8003cac:	42470068 	.word	0x42470068
 8003cb0:	40023800 	.word	0x40023800
 8003cb4:	40007000 	.word	0x40007000
 8003cb8:	42470e40 	.word	0x42470e40

08003cbc <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b087      	sub	sp, #28
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003cc4:	2300      	movs	r3, #0
 8003cc6:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003cc8:	2300      	movs	r3, #0
 8003cca:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d13d      	bne.n	8003d56 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003cda:	4b22      	ldr	r3, [pc, #136]	; (8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003cdc:	689b      	ldr	r3, [r3, #8]
 8003cde:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003ce2:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d004      	beq.n	8003cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003cea:	2b01      	cmp	r3, #1
 8003cec:	d12f      	bne.n	8003d4e <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003cee:	4b1e      	ldr	r3, [pc, #120]	; (8003d68 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003cf0:	617b      	str	r3, [r7, #20]
          break;
 8003cf2:	e02f      	b.n	8003d54 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003cf4:	4b1b      	ldr	r3, [pc, #108]	; (8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cfc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d00:	d108      	bne.n	8003d14 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d02:	4b18      	ldr	r3, [pc, #96]	; (8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d0a:	4a18      	ldr	r2, [pc, #96]	; (8003d6c <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003d0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d10:	613b      	str	r3, [r7, #16]
 8003d12:	e007      	b.n	8003d24 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d14:	4b13      	ldr	r3, [pc, #76]	; (8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d1c:	4a14      	ldr	r2, [pc, #80]	; (8003d70 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003d1e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d22:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003d24:	4b0f      	ldr	r3, [pc, #60]	; (8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003d26:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d2a:	099b      	lsrs	r3, r3, #6
 8003d2c:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d30:	693b      	ldr	r3, [r7, #16]
 8003d32:	fb02 f303 	mul.w	r3, r2, r3
 8003d36:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003d38:	4b0a      	ldr	r3, [pc, #40]	; (8003d64 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003d3a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d3e:	0f1b      	lsrs	r3, r3, #28
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	68ba      	ldr	r2, [r7, #8]
 8003d46:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4a:	617b      	str	r3, [r7, #20]
          break;
 8003d4c:	e002      	b.n	8003d54 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003d4e:	2300      	movs	r3, #0
 8003d50:	617b      	str	r3, [r7, #20]
          break;
 8003d52:	bf00      	nop
        }
      }
      break;
 8003d54:	bf00      	nop
    }
  }
  return frequency;
 8003d56:	697b      	ldr	r3, [r7, #20]
}
 8003d58:	4618      	mov	r0, r3
 8003d5a:	371c      	adds	r7, #28
 8003d5c:	46bd      	mov	sp, r7
 8003d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d62:	4770      	bx	lr
 8003d64:	40023800 	.word	0x40023800
 8003d68:	00bb8000 	.word	0x00bb8000
 8003d6c:	007a1200 	.word	0x007a1200
 8003d70:	00f42400 	.word	0x00f42400

08003d74 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	b082      	sub	sp, #8
 8003d78:	af00      	add	r7, sp, #0
 8003d7a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d101      	bne.n	8003d86 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e056      	b.n	8003e34 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d106      	bne.n	8003da6 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7fd fc3f 	bl	8001624 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2202      	movs	r2, #2
 8003daa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003dbc:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	685a      	ldr	r2, [r3, #4]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	689b      	ldr	r3, [r3, #8]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	431a      	orrs	r2, r3
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	691b      	ldr	r3, [r3, #16]
 8003dd2:	431a      	orrs	r2, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	695b      	ldr	r3, [r3, #20]
 8003dd8:	431a      	orrs	r2, r3
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	699b      	ldr	r3, [r3, #24]
 8003dde:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003de2:	431a      	orrs	r2, r3
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	431a      	orrs	r2, r3
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a1b      	ldr	r3, [r3, #32]
 8003dee:	ea42 0103 	orr.w	r1, r2, r3
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	430a      	orrs	r2, r1
 8003dfc:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	699b      	ldr	r3, [r3, #24]
 8003e02:	0c1b      	lsrs	r3, r3, #16
 8003e04:	f003 0104 	and.w	r1, r3, #4
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	69da      	ldr	r2, [r3, #28]
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e22:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2200      	movs	r2, #0
 8003e28:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e32:	2300      	movs	r3, #0
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3708      	adds	r7, #8
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}

08003e3c <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	b086      	sub	sp, #24
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	60f8      	str	r0, [r7, #12]
 8003e44:	60b9      	str	r1, [r7, #8]
 8003e46:	4613      	mov	r3, r2
 8003e48:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003e4a:	2300      	movs	r3, #0
 8003e4c:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	689b      	ldr	r3, [r3, #8]
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d110      	bne.n	8003e78 <HAL_SPI_Receive_DMA+0x3c>
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003e5e:	d10b      	bne.n	8003e78 <HAL_SPI_Receive_DMA+0x3c>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2204      	movs	r2, #4
 8003e64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8003e68:	88fb      	ldrh	r3, [r7, #6]
 8003e6a:	68ba      	ldr	r2, [r7, #8]
 8003e6c:	68b9      	ldr	r1, [r7, #8]
 8003e6e:	68f8      	ldr	r0, [r7, #12]
 8003e70:	f000 f8a4 	bl	8003fbc <HAL_SPI_TransmitReceive_DMA>
 8003e74:	4603      	mov	r3, r0
 8003e76:	e097      	b.n	8003fa8 <HAL_SPI_Receive_DMA+0x16c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003e7e:	2b01      	cmp	r3, #1
 8003e80:	d101      	bne.n	8003e86 <HAL_SPI_Receive_DMA+0x4a>
 8003e82:	2302      	movs	r3, #2
 8003e84:	e090      	b.n	8003fa8 <HAL_SPI_Receive_DMA+0x16c>
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  if (hspi->State != HAL_SPI_STATE_READY)
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003e94:	b2db      	uxtb	r3, r3
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d002      	beq.n	8003ea0 <HAL_SPI_Receive_DMA+0x64>
  {
    errorcode = HAL_BUSY;
 8003e9a:	2302      	movs	r3, #2
 8003e9c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e9e:	e07e      	b.n	8003f9e <HAL_SPI_Receive_DMA+0x162>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ea0:	68bb      	ldr	r3, [r7, #8]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d002      	beq.n	8003eac <HAL_SPI_Receive_DMA+0x70>
 8003ea6:	88fb      	ldrh	r3, [r7, #6]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d102      	bne.n	8003eb2 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8003eac:	2301      	movs	r3, #1
 8003eae:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003eb0:	e075      	b.n	8003f9e <HAL_SPI_Receive_DMA+0x162>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2204      	movs	r2, #4
 8003eb6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2200      	movs	r2, #0
 8003ebe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	68ba      	ldr	r2, [r7, #8]
 8003ec4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	88fa      	ldrh	r2, [r7, #6]
 8003eca:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	88fa      	ldrh	r2, [r7, #6]
 8003ed0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	2200      	movs	r2, #0
 8003edc:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->TxXferSize  = 0U;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	86da      	strh	r2, [r3, #54]	; 0x36

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003eea:	68fb      	ldr	r3, [r7, #12]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003ef2:	d107      	bne.n	8003f04 <HAL_SPI_Receive_DMA+0xc8>
  {
    SPI_1LINE_RX(hspi);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003f02:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f08:	4a29      	ldr	r2, [pc, #164]	; (8003fb0 <HAL_SPI_Receive_DMA+0x174>)
 8003f0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f10:	4a28      	ldr	r2, [pc, #160]	; (8003fb4 <HAL_SPI_Receive_DMA+0x178>)
 8003f12:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f18:	4a27      	ldr	r2, [pc, #156]	; (8003fb8 <HAL_SPI_Receive_DMA+0x17c>)
 8003f1a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f20:	2200      	movs	r2, #0
 8003f22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	330c      	adds	r3, #12
 8003f2e:	4619      	mov	r1, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f3a:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8003f3c:	f7fd ff14 	bl	8001d68 <HAL_DMA_Start_IT>
 8003f40:	4603      	mov	r3, r0
 8003f42:	2b00      	cmp	r3, #0
 8003f44:	d00c      	beq.n	8003f60 <HAL_SPI_Receive_DMA+0x124>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003f4a:	f043 0210 	orr.w	r2, r3, #16
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	2201      	movs	r2, #1
 8003f5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 8003f5e:	e01e      	b.n	8003f9e <HAL_SPI_Receive_DMA+0x162>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f6a:	2b40      	cmp	r3, #64	; 0x40
 8003f6c:	d007      	beq.n	8003f7e <HAL_SPI_Receive_DMA+0x142>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	681a      	ldr	r2, [r3, #0]
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003f7c:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	685a      	ldr	r2, [r3, #4]
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f042 0220 	orr.w	r2, r2, #32
 8003f8c:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	685a      	ldr	r2, [r3, #4]
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f042 0201 	orr.w	r2, r2, #1
 8003f9c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fa6:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fa8:	4618      	mov	r0, r3
 8003faa:	3718      	adds	r7, #24
 8003fac:	46bd      	mov	sp, r7
 8003fae:	bd80      	pop	{r7, pc}
 8003fb0:	08004349 	.word	0x08004349
 8003fb4:	08004211 	.word	0x08004211
 8003fb8:	08004381 	.word	0x08004381

08003fbc <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b086      	sub	sp, #24
 8003fc0:	af00      	add	r7, sp, #0
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	60b9      	str	r1, [r7, #8]
 8003fc6:	607a      	str	r2, [r7, #4]
 8003fc8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003fca:	2300      	movs	r3, #0
 8003fcc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fd4:	2b01      	cmp	r3, #1
 8003fd6:	d101      	bne.n	8003fdc <HAL_SPI_TransmitReceive_DMA+0x20>
 8003fd8:	2302      	movs	r3, #2
 8003fda:	e0e3      	b.n	80041a4 <HAL_SPI_TransmitReceive_DMA+0x1e8>
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	2201      	movs	r2, #1
 8003fe0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003fea:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 8003ff2:	7dbb      	ldrb	r3, [r7, #22]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d00d      	beq.n	8004014 <HAL_SPI_TransmitReceive_DMA+0x58>
 8003ff8:	693b      	ldr	r3, [r7, #16]
 8003ffa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ffe:	d106      	bne.n	800400e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d102      	bne.n	800400e <HAL_SPI_TransmitReceive_DMA+0x52>
 8004008:	7dbb      	ldrb	r3, [r7, #22]
 800400a:	2b04      	cmp	r3, #4
 800400c:	d002      	beq.n	8004014 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800400e:	2302      	movs	r3, #2
 8004010:	75fb      	strb	r3, [r7, #23]
    goto error;
 8004012:	e0c2      	b.n	800419a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	2b00      	cmp	r3, #0
 8004018:	d005      	beq.n	8004026 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d002      	beq.n	8004026 <HAL_SPI_TransmitReceive_DMA+0x6a>
 8004020:	887b      	ldrh	r3, [r7, #2]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d102      	bne.n	800402c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	75fb      	strb	r3, [r7, #23]
    goto error;
 800402a:	e0b6      	b.n	800419a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b04      	cmp	r3, #4
 8004036:	d003      	beq.n	8004040 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2205      	movs	r2, #5
 800403c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	2200      	movs	r2, #0
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	68ba      	ldr	r2, [r7, #8]
 800404a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	887a      	ldrh	r2, [r7, #2]
 8004050:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	887a      	ldrh	r2, [r7, #2]
 8004056:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	687a      	ldr	r2, [r7, #4]
 800405c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	887a      	ldrh	r2, [r7, #2]
 8004062:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	887a      	ldrh	r2, [r7, #2]
 8004068:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	2200      	movs	r2, #0
 8004074:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800407c:	b2db      	uxtb	r3, r3
 800407e:	2b04      	cmp	r3, #4
 8004080:	d108      	bne.n	8004094 <HAL_SPI_TransmitReceive_DMA+0xd8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004086:	4a49      	ldr	r2, [pc, #292]	; (80041ac <HAL_SPI_TransmitReceive_DMA+0x1f0>)
 8004088:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800408e:	4a48      	ldr	r2, [pc, #288]	; (80041b0 <HAL_SPI_TransmitReceive_DMA+0x1f4>)
 8004090:	63da      	str	r2, [r3, #60]	; 0x3c
 8004092:	e007      	b.n	80040a4 <HAL_SPI_TransmitReceive_DMA+0xe8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004098:	4a46      	ldr	r2, [pc, #280]	; (80041b4 <HAL_SPI_TransmitReceive_DMA+0x1f8>)
 800409a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a0:	4a45      	ldr	r2, [pc, #276]	; (80041b8 <HAL_SPI_TransmitReceive_DMA+0x1fc>)
 80040a2:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040a8:	4a44      	ldr	r2, [pc, #272]	; (80041bc <HAL_SPI_TransmitReceive_DMA+0x200>)
 80040aa:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80040b0:	2200      	movs	r2, #0
 80040b2:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6cd8      	ldr	r0, [r3, #76]	; 0x4c
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	330c      	adds	r3, #12
 80040be:	4619      	mov	r1, r3
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040c4:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80040ca:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 80040cc:	f7fd fe4c 	bl	8001d68 <HAL_DMA_Start_IT>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d00c      	beq.n	80040f0 <HAL_SPI_TransmitReceive_DMA+0x134>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040da:	f043 0210 	orr.w	r2, r3, #16
 80040de:	68fb      	ldr	r3, [r7, #12]
 80040e0:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 80040e2:	2301      	movs	r3, #1
 80040e4:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 80040ee:	e054      	b.n	800419a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	685a      	ldr	r2, [r3, #4]
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	f042 0201 	orr.w	r2, r2, #1
 80040fe:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004104:	2200      	movs	r2, #0
 8004106:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800410c:	2200      	movs	r2, #0
 800410e:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004114:	2200      	movs	r2, #0
 8004116:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800411c:	2200      	movs	r2, #0
 800411e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6c98      	ldr	r0, [r3, #72]	; 0x48
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004128:	4619      	mov	r1, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	330c      	adds	r3, #12
 8004130:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004136:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8004138:	f7fd fe16 	bl	8001d68 <HAL_DMA_Start_IT>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d00c      	beq.n	800415c <HAL_SPI_TransmitReceive_DMA+0x1a0>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004146:	f043 0210 	orr.w	r2, r3, #16
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	655a      	str	r2, [r3, #84]	; 0x54
    errorcode = HAL_ERROR;
 800414e:	2301      	movs	r3, #1
 8004150:	75fb      	strb	r3, [r7, #23]

    hspi->State = HAL_SPI_STATE_READY;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    goto error;
 800415a:	e01e      	b.n	800419a <HAL_SPI_TransmitReceive_DMA+0x1de>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004166:	2b40      	cmp	r3, #64	; 0x40
 8004168:	d007      	beq.n	800417a <HAL_SPI_TransmitReceive_DMA+0x1be>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	681a      	ldr	r2, [r3, #0]
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004178:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	685a      	ldr	r2, [r3, #4]
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f042 0220 	orr.w	r2, r2, #32
 8004188:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	685a      	ldr	r2, [r3, #4]
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f042 0202 	orr.w	r2, r2, #2
 8004198:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	2200      	movs	r2, #0
 800419e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80041a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80041a4:	4618      	mov	r0, r3
 80041a6:	3718      	adds	r7, #24
 80041a8:	46bd      	mov	sp, r7
 80041aa:	bd80      	pop	{r7, pc}
 80041ac:	08004349 	.word	0x08004349
 80041b0:	08004211 	.word	0x08004211
 80041b4:	08004365 	.word	0x08004365
 80041b8:	080042b9 	.word	0x080042b9
 80041bc:	08004381 	.word	0x08004381

080041c0 <HAL_SPI_TxRxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef *hspi)
{
 80041c0:	b480      	push	{r7}
 80041c2:	b083      	sub	sp, #12
 80041c4:	af00      	add	r7, sp, #0
 80041c6:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxCpltCallback should be implemented in the user file
   */
}
 80041c8:	bf00      	nop
 80041ca:	370c      	adds	r7, #12
 80041cc:	46bd      	mov	sp, r7
 80041ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d2:	4770      	bx	lr

080041d4 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80041d4:	b480      	push	{r7}
 80041d6:	b083      	sub	sp, #12
 80041d8:	af00      	add	r7, sp, #0
 80041da:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 80041dc:	bf00      	nop
 80041de:	370c      	adds	r7, #12
 80041e0:	46bd      	mov	sp, r7
 80041e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041e6:	4770      	bx	lr

080041e8 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b083      	sub	sp, #12
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 80041f0:	bf00      	nop
 80041f2:	370c      	adds	r7, #12
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr

080041fc <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80041fc:	b480      	push	{r7}
 80041fe:	b083      	sub	sp, #12
 8004200:	af00      	add	r7, sp, #0
 8004202:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8004204:	bf00      	nop
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b084      	sub	sp, #16
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800421c:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800421e:	f7fd fbb5 	bl	800198c <HAL_GetTick>
 8004222:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800422e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004232:	d03b      	beq.n	80042ac <SPI_DMAReceiveCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	685a      	ldr	r2, [r3, #4]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f022 0220 	bic.w	r2, r2, #32
 8004242:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	689b      	ldr	r3, [r3, #8]
 8004248:	2b00      	cmp	r3, #0
 800424a:	d10d      	bne.n	8004268 <SPI_DMAReceiveCplt+0x58>
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004254:	d108      	bne.n	8004268 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f022 0203 	bic.w	r2, r2, #3
 8004264:	605a      	str	r2, [r3, #4]
 8004266:	e007      	b.n	8004278 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	685a      	ldr	r2, [r3, #4]
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	f022 0201 	bic.w	r2, r2, #1
 8004276:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	2164      	movs	r1, #100	; 0x64
 800427c:	68f8      	ldr	r0, [r7, #12]
 800427e:	f000 f909 	bl	8004494 <SPI_EndRxTransaction>
 8004282:	4603      	mov	r3, r0
 8004284:	2b00      	cmp	r3, #0
 8004286:	d002      	beq.n	800428e <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	2220      	movs	r2, #32
 800428c:	655a      	str	r2, [r3, #84]	; 0x54
    }

    hspi->RxXferCount = 0U;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2200      	movs	r2, #0
 8004292:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	2201      	movs	r2, #1
 8004298:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042a0:	2b00      	cmp	r3, #0
 80042a2:	d003      	beq.n	80042ac <SPI_DMAReceiveCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 80042a4:	68f8      	ldr	r0, [r7, #12]
 80042a6:	f7ff ffa9 	bl	80041fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 80042aa:	e002      	b.n	80042b2 <SPI_DMAReceiveCplt+0xa2>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 80042ac:	68f8      	ldr	r0, [r7, #12]
 80042ae:	f7fc fd9f 	bl	8000df0 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80042b2:	3710      	adds	r7, #16
 80042b4:	46bd      	mov	sp, r7
 80042b6:	bd80      	pop	{r7, pc}

080042b8 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80042b8:	b580      	push	{r7, lr}
 80042ba:	b084      	sub	sp, #16
 80042bc:	af00      	add	r7, sp, #0
 80042be:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c4:	60fb      	str	r3, [r7, #12]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80042c6:	f7fd fb61 	bl	800198c <HAL_GetTick>
 80042ca:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042da:	d02f      	beq.n	800433c <SPI_DMATransmitReceiveCplt+0x84>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f022 0220 	bic.w	r2, r2, #32
 80042ea:	605a      	str	r2, [r3, #4]
      READ_REG(hspi->Instance->DR);
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 80042ec:	68ba      	ldr	r2, [r7, #8]
 80042ee:	2164      	movs	r1, #100	; 0x64
 80042f0:	68f8      	ldr	r0, [r7, #12]
 80042f2:	f000 f935 	bl	8004560 <SPI_EndRxTxTransaction>
 80042f6:	4603      	mov	r3, r0
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d005      	beq.n	8004308 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004300:	f043 0220 	orr.w	r2, r3, #32
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	685a      	ldr	r2, [r3, #4]
 800430e:	68fb      	ldr	r3, [r7, #12]
 8004310:	681b      	ldr	r3, [r3, #0]
 8004312:	f022 0203 	bic.w	r2, r2, #3
 8004316:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2200      	movs	r2, #0
 800431c:	86da      	strh	r2, [r3, #54]	; 0x36
    hspi->RxXferCount = 0U;
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	2200      	movs	r2, #0
 8004322:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	2201      	movs	r2, #1
 8004328:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800432c:	68fb      	ldr	r3, [r7, #12]
 800432e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004330:	2b00      	cmp	r3, #0
 8004332:	d003      	beq.n	800433c <SPI_DMATransmitReceiveCplt+0x84>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 8004334:	68f8      	ldr	r0, [r7, #12]
 8004336:	f7ff ff61 	bl	80041fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800433a:	e002      	b.n	8004342 <SPI_DMATransmitReceiveCplt+0x8a>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800433c:	68f8      	ldr	r0, [r7, #12]
 800433e:	f7ff ff3f 	bl	80041c0 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004342:	3710      	adds	r7, #16
 8004344:	46bd      	mov	sp, r7
 8004346:	bd80      	pop	{r7, pc}

08004348 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004348:	b580      	push	{r7, lr}
 800434a:	b084      	sub	sp, #16
 800434c:	af00      	add	r7, sp, #0
 800434e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004354:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 8004356:	68f8      	ldr	r0, [r7, #12]
 8004358:	f7ff ff3c 	bl	80041d4 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800435c:	bf00      	nop
 800435e:	3710      	adds	r7, #16
 8004360:	46bd      	mov	sp, r7
 8004362:	bd80      	pop	{r7, pc}

08004364 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8004364:	b580      	push	{r7, lr}
 8004366:	b084      	sub	sp, #16
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004370:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 8004372:	68f8      	ldr	r0, [r7, #12]
 8004374:	f7ff ff38 	bl	80041e8 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8004378:	bf00      	nop
 800437a:	3710      	adds	r7, #16
 800437c:	46bd      	mov	sp, r7
 800437e:	bd80      	pop	{r7, pc}

08004380 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 8004380:	b580      	push	{r7, lr}
 8004382:	b084      	sub	sp, #16
 8004384:	af00      	add	r7, sp, #0
 8004386:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800438c:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	685a      	ldr	r2, [r3, #4]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f022 0203 	bic.w	r2, r2, #3
 800439c:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043a2:	f043 0210 	orr.w	r2, r3, #16
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State = HAL_SPI_STATE_READY;
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	2201      	movs	r2, #1
 80043ae:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80043b2:	68f8      	ldr	r0, [r7, #12]
 80043b4:	f7ff ff22 	bl	80041fc <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80043b8:	bf00      	nop
 80043ba:	3710      	adds	r7, #16
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b084      	sub	sp, #16
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	603b      	str	r3, [r7, #0]
 80043cc:	4613      	mov	r3, r2
 80043ce:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043d0:	e04c      	b.n	800446c <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043d8:	d048      	beq.n	800446c <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 80043da:	f7fd fad7 	bl	800198c <HAL_GetTick>
 80043de:	4602      	mov	r2, r0
 80043e0:	69bb      	ldr	r3, [r7, #24]
 80043e2:	1ad3      	subs	r3, r2, r3
 80043e4:	683a      	ldr	r2, [r7, #0]
 80043e6:	429a      	cmp	r2, r3
 80043e8:	d902      	bls.n	80043f0 <SPI_WaitFlagStateUntilTimeout+0x30>
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d13d      	bne.n	800446c <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	685a      	ldr	r2, [r3, #4]
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043fe:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004408:	d111      	bne.n	800442e <SPI_WaitFlagStateUntilTimeout+0x6e>
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004412:	d004      	beq.n	800441e <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	689b      	ldr	r3, [r3, #8]
 8004418:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800441c:	d107      	bne.n	800442e <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	681a      	ldr	r2, [r3, #0]
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800442c:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004432:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004436:	d10f      	bne.n	8004458 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	681a      	ldr	r2, [r3, #0]
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004446:	601a      	str	r2, [r3, #0]
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	681a      	ldr	r2, [r3, #0]
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004456:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	2200      	movs	r2, #0
 8004464:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004468:	2303      	movs	r3, #3
 800446a:	e00f      	b.n	800448c <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	689a      	ldr	r2, [r3, #8]
 8004472:	68bb      	ldr	r3, [r7, #8]
 8004474:	4013      	ands	r3, r2
 8004476:	68ba      	ldr	r2, [r7, #8]
 8004478:	429a      	cmp	r2, r3
 800447a:	bf0c      	ite	eq
 800447c:	2301      	moveq	r3, #1
 800447e:	2300      	movne	r3, #0
 8004480:	b2db      	uxtb	r3, r3
 8004482:	461a      	mov	r2, r3
 8004484:	79fb      	ldrb	r3, [r7, #7]
 8004486:	429a      	cmp	r2, r3
 8004488:	d1a3      	bne.n	80043d2 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800448a:	2300      	movs	r3, #0
}
 800448c:	4618      	mov	r0, r3
 800448e:	3710      	adds	r7, #16
 8004490:	46bd      	mov	sp, r7
 8004492:	bd80      	pop	{r7, pc}

08004494 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004494:	b580      	push	{r7, lr}
 8004496:	b086      	sub	sp, #24
 8004498:	af02      	add	r7, sp, #8
 800449a:	60f8      	str	r0, [r7, #12]
 800449c:	60b9      	str	r1, [r7, #8]
 800449e:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80044a0:	68fb      	ldr	r3, [r7, #12]
 80044a2:	685b      	ldr	r3, [r3, #4]
 80044a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044a8:	d111      	bne.n	80044ce <SPI_EndRxTransaction+0x3a>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	689b      	ldr	r3, [r3, #8]
 80044ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80044b2:	d004      	beq.n	80044be <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044bc:	d107      	bne.n	80044ce <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	681b      	ldr	r3, [r3, #0]
 80044c2:	681a      	ldr	r2, [r3, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044cc:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	685b      	ldr	r3, [r3, #4]
 80044d2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80044d6:	d12a      	bne.n	800452e <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	689b      	ldr	r3, [r3, #8]
 80044dc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80044e0:	d012      	beq.n	8004508 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	9300      	str	r3, [sp, #0]
 80044e6:	68bb      	ldr	r3, [r7, #8]
 80044e8:	2200      	movs	r2, #0
 80044ea:	2180      	movs	r1, #128	; 0x80
 80044ec:	68f8      	ldr	r0, [r7, #12]
 80044ee:	f7ff ff67 	bl	80043c0 <SPI_WaitFlagStateUntilTimeout>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d02d      	beq.n	8004554 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fc:	f043 0220 	orr.w	r2, r3, #32
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8004504:	2303      	movs	r3, #3
 8004506:	e026      	b.n	8004556 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	2200      	movs	r2, #0
 8004510:	2101      	movs	r1, #1
 8004512:	68f8      	ldr	r0, [r7, #12]
 8004514:	f7ff ff54 	bl	80043c0 <SPI_WaitFlagStateUntilTimeout>
 8004518:	4603      	mov	r3, r0
 800451a:	2b00      	cmp	r3, #0
 800451c:	d01a      	beq.n	8004554 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004522:	f043 0220 	orr.w	r2, r3, #32
 8004526:	68fb      	ldr	r3, [r7, #12]
 8004528:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800452a:	2303      	movs	r3, #3
 800452c:	e013      	b.n	8004556 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	9300      	str	r3, [sp, #0]
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	2200      	movs	r2, #0
 8004536:	2101      	movs	r1, #1
 8004538:	68f8      	ldr	r0, [r7, #12]
 800453a:	f7ff ff41 	bl	80043c0 <SPI_WaitFlagStateUntilTimeout>
 800453e:	4603      	mov	r3, r0
 8004540:	2b00      	cmp	r3, #0
 8004542:	d007      	beq.n	8004554 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004548:	f043 0220 	orr.w	r2, r3, #32
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004550:	2303      	movs	r3, #3
 8004552:	e000      	b.n	8004556 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8004554:	2300      	movs	r3, #0
}
 8004556:	4618      	mov	r0, r3
 8004558:	3710      	adds	r7, #16
 800455a:	46bd      	mov	sp, r7
 800455c:	bd80      	pop	{r7, pc}
	...

08004560 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004560:	b580      	push	{r7, lr}
 8004562:	b088      	sub	sp, #32
 8004564:	af02      	add	r7, sp, #8
 8004566:	60f8      	str	r0, [r7, #12]
 8004568:	60b9      	str	r1, [r7, #8]
 800456a:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800456c:	4b1b      	ldr	r3, [pc, #108]	; (80045dc <SPI_EndRxTxTransaction+0x7c>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	4a1b      	ldr	r2, [pc, #108]	; (80045e0 <SPI_EndRxTxTransaction+0x80>)
 8004572:	fba2 2303 	umull	r2, r3, r2, r3
 8004576:	0d5b      	lsrs	r3, r3, #21
 8004578:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800457c:	fb02 f303 	mul.w	r3, r2, r3
 8004580:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800458a:	d112      	bne.n	80045b2 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	9300      	str	r3, [sp, #0]
 8004590:	68bb      	ldr	r3, [r7, #8]
 8004592:	2200      	movs	r2, #0
 8004594:	2180      	movs	r1, #128	; 0x80
 8004596:	68f8      	ldr	r0, [r7, #12]
 8004598:	f7ff ff12 	bl	80043c0 <SPI_WaitFlagStateUntilTimeout>
 800459c:	4603      	mov	r3, r0
 800459e:	2b00      	cmp	r3, #0
 80045a0:	d016      	beq.n	80045d0 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80045a2:	68fb      	ldr	r3, [r7, #12]
 80045a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045a6:	f043 0220 	orr.w	r2, r3, #32
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80045ae:	2303      	movs	r3, #3
 80045b0:	e00f      	b.n	80045d2 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80045b2:	697b      	ldr	r3, [r7, #20]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d00a      	beq.n	80045ce <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80045b8:	697b      	ldr	r3, [r7, #20]
 80045ba:	3b01      	subs	r3, #1
 80045bc:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	689b      	ldr	r3, [r3, #8]
 80045c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045c8:	2b80      	cmp	r3, #128	; 0x80
 80045ca:	d0f2      	beq.n	80045b2 <SPI_EndRxTxTransaction+0x52>
 80045cc:	e000      	b.n	80045d0 <SPI_EndRxTxTransaction+0x70>
        break;
 80045ce:	bf00      	nop
  }

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3718      	adds	r7, #24
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	20000000 	.word	0x20000000
 80045e0:	165e9f81 	.word	0x165e9f81

080045e4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80045e4:	b084      	sub	sp, #16
 80045e6:	b580      	push	{r7, lr}
 80045e8:	b084      	sub	sp, #16
 80045ea:	af00      	add	r7, sp, #0
 80045ec:	6078      	str	r0, [r7, #4]
 80045ee:	f107 001c 	add.w	r0, r7, #28
 80045f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045f8:	2b01      	cmp	r3, #1
 80045fa:	d122      	bne.n	8004642 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004600:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	68db      	ldr	r3, [r3, #12]
 800460c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004610:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004614:	687a      	ldr	r2, [r7, #4]
 8004616:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	68db      	ldr	r3, [r3, #12]
 800461c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004624:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004626:	2b01      	cmp	r3, #1
 8004628:	d105      	bne.n	8004636 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68db      	ldr	r3, [r3, #12]
 800462e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004636:	6878      	ldr	r0, [r7, #4]
 8004638:	f000 f8b8 	bl	80047ac <USB_CoreReset>
 800463c:	4603      	mov	r3, r0
 800463e:	73fb      	strb	r3, [r7, #15]
 8004640:	e01a      	b.n	8004678 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	68db      	ldr	r3, [r3, #12]
 8004646:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800464e:	6878      	ldr	r0, [r7, #4]
 8004650:	f000 f8ac 	bl	80047ac <USB_CoreReset>
 8004654:	4603      	mov	r3, r0
 8004656:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004658:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800465a:	2b00      	cmp	r3, #0
 800465c:	d106      	bne.n	800466c <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004662:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	639a      	str	r2, [r3, #56]	; 0x38
 800466a:	e005      	b.n	8004678 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004670:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004678:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800467a:	2b01      	cmp	r3, #1
 800467c:	d10b      	bne.n	8004696 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	689b      	ldr	r3, [r3, #8]
 8004682:	f043 0206 	orr.w	r2, r3, #6
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	689b      	ldr	r3, [r3, #8]
 800468e:	f043 0220 	orr.w	r2, r3, #32
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004696:	7bfb      	ldrb	r3, [r7, #15]
}
 8004698:	4618      	mov	r0, r3
 800469a:	3710      	adds	r7, #16
 800469c:	46bd      	mov	sp, r7
 800469e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80046a2:	b004      	add	sp, #16
 80046a4:	4770      	bx	lr

080046a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80046a6:	b480      	push	{r7}
 80046a8:	b083      	sub	sp, #12
 80046aa:	af00      	add	r7, sp, #0
 80046ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f023 0201 	bic.w	r2, r3, #1
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80046ba:	2300      	movs	r3, #0
}
 80046bc:	4618      	mov	r0, r3
 80046be:	370c      	adds	r7, #12
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr

080046c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80046c8:	b580      	push	{r7, lr}
 80046ca:	b082      	sub	sp, #8
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	6078      	str	r0, [r7, #4]
 80046d0:	460b      	mov	r3, r1
 80046d2:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80046e0:	78fb      	ldrb	r3, [r7, #3]
 80046e2:	2b01      	cmp	r3, #1
 80046e4:	d106      	bne.n	80046f4 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68db      	ldr	r3, [r3, #12]
 80046ea:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	60da      	str	r2, [r3, #12]
 80046f2:	e00b      	b.n	800470c <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80046f4:	78fb      	ldrb	r3, [r7, #3]
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d106      	bne.n	8004708 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	68db      	ldr	r3, [r3, #12]
 80046fe:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	60da      	str	r2, [r3, #12]
 8004706:	e001      	b.n	800470c <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004708:	2301      	movs	r3, #1
 800470a:	e003      	b.n	8004714 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800470c:	2032      	movs	r0, #50	; 0x32
 800470e:	f7fd f949 	bl	80019a4 <HAL_Delay>

  return HAL_OK;
 8004712:	2300      	movs	r3, #0
}
 8004714:	4618      	mov	r0, r3
 8004716:	3708      	adds	r7, #8
 8004718:	46bd      	mov	sp, r7
 800471a:	bd80      	pop	{r7, pc}

0800471c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
 8004724:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004726:	2300      	movs	r3, #0
 8004728:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800472a:	683b      	ldr	r3, [r7, #0]
 800472c:	019b      	lsls	r3, r3, #6
 800472e:	f043 0220 	orr.w	r2, r3, #32
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	3301      	adds	r3, #1
 800473a:	60fb      	str	r3, [r7, #12]
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	4a09      	ldr	r2, [pc, #36]	; (8004764 <USB_FlushTxFifo+0x48>)
 8004740:	4293      	cmp	r3, r2
 8004742:	d901      	bls.n	8004748 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8004744:	2303      	movs	r3, #3
 8004746:	e006      	b.n	8004756 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	691b      	ldr	r3, [r3, #16]
 800474c:	f003 0320 	and.w	r3, r3, #32
 8004750:	2b20      	cmp	r3, #32
 8004752:	d0f0      	beq.n	8004736 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8004754:	2300      	movs	r3, #0
}
 8004756:	4618      	mov	r0, r3
 8004758:	3714      	adds	r7, #20
 800475a:	46bd      	mov	sp, r7
 800475c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004760:	4770      	bx	lr
 8004762:	bf00      	nop
 8004764:	00030d40 	.word	0x00030d40

08004768 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004768:	b480      	push	{r7}
 800476a:	b085      	sub	sp, #20
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8004770:	2300      	movs	r3, #0
 8004772:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	2210      	movs	r2, #16
 8004778:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	3301      	adds	r3, #1
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	4a09      	ldr	r2, [pc, #36]	; (80047a8 <USB_FlushRxFifo+0x40>)
 8004784:	4293      	cmp	r3, r2
 8004786:	d901      	bls.n	800478c <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8004788:	2303      	movs	r3, #3
 800478a:	e006      	b.n	800479a <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	691b      	ldr	r3, [r3, #16]
 8004790:	f003 0310 	and.w	r3, r3, #16
 8004794:	2b10      	cmp	r3, #16
 8004796:	d0f0      	beq.n	800477a <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	3714      	adds	r7, #20
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr
 80047a6:	bf00      	nop
 80047a8:	00030d40 	.word	0x00030d40

080047ac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 80047ac:	b480      	push	{r7}
 80047ae:	b085      	sub	sp, #20
 80047b0:	af00      	add	r7, sp, #0
 80047b2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 80047b4:	2300      	movs	r3, #0
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	3301      	adds	r3, #1
 80047bc:	60fb      	str	r3, [r7, #12]
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	4a13      	ldr	r2, [pc, #76]	; (8004810 <USB_CoreReset+0x64>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d901      	bls.n	80047ca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 80047c6:	2303      	movs	r3, #3
 80047c8:	e01b      	b.n	8004802 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	691b      	ldr	r3, [r3, #16]
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	daf2      	bge.n	80047b8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80047d2:	2300      	movs	r3, #0
 80047d4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	691b      	ldr	r3, [r3, #16]
 80047da:	f043 0201 	orr.w	r2, r3, #1
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	3301      	adds	r3, #1
 80047e6:	60fb      	str	r3, [r7, #12]
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	4a09      	ldr	r2, [pc, #36]	; (8004810 <USB_CoreReset+0x64>)
 80047ec:	4293      	cmp	r3, r2
 80047ee:	d901      	bls.n	80047f4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80047f0:	2303      	movs	r3, #3
 80047f2:	e006      	b.n	8004802 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	f003 0301 	and.w	r3, r3, #1
 80047fc:	2b01      	cmp	r3, #1
 80047fe:	d0f0      	beq.n	80047e2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004800:	2300      	movs	r3, #0
}
 8004802:	4618      	mov	r0, r3
 8004804:	3714      	adds	r7, #20
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	00030d40 	.word	0x00030d40

08004814 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004814:	b084      	sub	sp, #16
 8004816:	b580      	push	{r7, lr}
 8004818:	b084      	sub	sp, #16
 800481a:	af00      	add	r7, sp, #0
 800481c:	6078      	str	r0, [r7, #4]
 800481e:	f107 001c 	add.w	r0, r7, #28
 8004822:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800482a:	68bb      	ldr	r3, [r7, #8]
 800482c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004830:	461a      	mov	r2, r3
 8004832:	2300      	movs	r3, #0
 8004834:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800483a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004846:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004852:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800485e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004862:	2b00      	cmp	r3, #0
 8004864:	d018      	beq.n	8004898 <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 8004866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004868:	2b01      	cmp	r3, #1
 800486a:	d10a      	bne.n	8004882 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 800486c:	68bb      	ldr	r3, [r7, #8]
 800486e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	68ba      	ldr	r2, [r7, #8]
 8004876:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800487a:	f043 0304 	orr.w	r3, r3, #4
 800487e:	6013      	str	r3, [r2, #0]
 8004880:	e014      	b.n	80048ac <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004882:	68bb      	ldr	r3, [r7, #8]
 8004884:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68ba      	ldr	r2, [r7, #8]
 800488c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004890:	f023 0304 	bic.w	r3, r3, #4
 8004894:	6013      	str	r3, [r2, #0]
 8004896:	e009      	b.n	80048ac <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80048a6:	f023 0304 	bic.w	r3, r3, #4
 80048aa:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 80048ac:	2110      	movs	r1, #16
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7ff ff34 	bl	800471c <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7ff ff57 	bl	8004768 <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 80048ba:	2300      	movs	r3, #0
 80048bc:	60fb      	str	r3, [r7, #12]
 80048be:	e015      	b.n	80048ec <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	015a      	lsls	r2, r3, #5
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4413      	add	r3, r2
 80048c8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048cc:	461a      	mov	r2, r3
 80048ce:	f04f 33ff 	mov.w	r3, #4294967295
 80048d2:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	015a      	lsls	r2, r3, #5
 80048d8:	68bb      	ldr	r3, [r7, #8]
 80048da:	4413      	add	r3, r2
 80048dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80048e0:	461a      	mov	r2, r3
 80048e2:	2300      	movs	r3, #0
 80048e4:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	3301      	adds	r3, #1
 80048ea:	60fb      	str	r3, [r7, #12]
 80048ec:	6a3b      	ldr	r3, [r7, #32]
 80048ee:	68fa      	ldr	r2, [r7, #12]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d3e5      	bcc.n	80048c0 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 80048f4:	2101      	movs	r1, #1
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f000 f848 	bl	800498c <USB_DriveVbus>

  HAL_Delay(200U);
 80048fc:	20c8      	movs	r0, #200	; 0xc8
 80048fe:	f7fd f851 	bl	80019a4 <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	f04f 32ff 	mov.w	r2, #4294967295
 800490e:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004914:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004918:	2b00      	cmp	r3, #0
 800491a:	d00b      	beq.n	8004934 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004922:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	4a14      	ldr	r2, [pc, #80]	; (8004978 <USB_HostInit+0x164>)
 8004928:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a13      	ldr	r2, [pc, #76]	; (800497c <USB_HostInit+0x168>)
 800492e:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 8004932:	e009      	b.n	8004948 <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	2280      	movs	r2, #128	; 0x80
 8004938:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a10      	ldr	r2, [pc, #64]	; (8004980 <USB_HostInit+0x16c>)
 800493e:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	4a10      	ldr	r2, [pc, #64]	; (8004984 <USB_HostInit+0x170>)
 8004944:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004948:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800494a:	2b00      	cmp	r3, #0
 800494c:	d105      	bne.n	800495a <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f043 0210 	orr.w	r2, r3, #16
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	699a      	ldr	r2, [r3, #24]
 800495e:	4b0a      	ldr	r3, [pc, #40]	; (8004988 <USB_HostInit+0x174>)
 8004960:	4313      	orrs	r3, r2
 8004962:	687a      	ldr	r2, [r7, #4]
 8004964:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 8004966:	2300      	movs	r3, #0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004972:	b004      	add	sp, #16
 8004974:	4770      	bx	lr
 8004976:	bf00      	nop
 8004978:	01000200 	.word	0x01000200
 800497c:	00e00300 	.word	0x00e00300
 8004980:	00600080 	.word	0x00600080
 8004984:	004000e0 	.word	0x004000e0
 8004988:	a3200008 	.word	0xa3200008

0800498c <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 800498c:	b480      	push	{r7}
 800498e:	b085      	sub	sp, #20
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	460b      	mov	r3, r1
 8004996:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 800499c:	2300      	movs	r3, #0
 800499e:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 80049b0:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 80049b2:	68bb      	ldr	r3, [r7, #8]
 80049b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d109      	bne.n	80049d0 <USB_DriveVbus+0x44>
 80049bc:	78fb      	ldrb	r3, [r7, #3]
 80049be:	2b01      	cmp	r3, #1
 80049c0:	d106      	bne.n	80049d0 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 80049c2:	68bb      	ldr	r3, [r7, #8]
 80049c4:	68fa      	ldr	r2, [r7, #12]
 80049c6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80049ca:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80049ce:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 80049d0:	68bb      	ldr	r3, [r7, #8]
 80049d2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80049d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80049da:	d109      	bne.n	80049f0 <USB_DriveVbus+0x64>
 80049dc:	78fb      	ldrb	r3, [r7, #3]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d106      	bne.n	80049f0 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 80049e2:	68bb      	ldr	r3, [r7, #8]
 80049e4:	68fa      	ldr	r2, [r7, #12]
 80049e6:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 80049ea:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80049ee:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 80049f0:	2300      	movs	r3, #0
}
 80049f2:	4618      	mov	r0, r3
 80049f4:	3714      	adds	r7, #20
 80049f6:	46bd      	mov	sp, r7
 80049f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049fc:	4770      	bx	lr
	...

08004a00 <__errno>:
 8004a00:	4b01      	ldr	r3, [pc, #4]	; (8004a08 <__errno+0x8>)
 8004a02:	6818      	ldr	r0, [r3, #0]
 8004a04:	4770      	bx	lr
 8004a06:	bf00      	nop
 8004a08:	2000000c 	.word	0x2000000c

08004a0c <__libc_init_array>:
 8004a0c:	b570      	push	{r4, r5, r6, lr}
 8004a0e:	4e0d      	ldr	r6, [pc, #52]	; (8004a44 <__libc_init_array+0x38>)
 8004a10:	4c0d      	ldr	r4, [pc, #52]	; (8004a48 <__libc_init_array+0x3c>)
 8004a12:	1ba4      	subs	r4, r4, r6
 8004a14:	10a4      	asrs	r4, r4, #2
 8004a16:	2500      	movs	r5, #0
 8004a18:	42a5      	cmp	r5, r4
 8004a1a:	d109      	bne.n	8004a30 <__libc_init_array+0x24>
 8004a1c:	4e0b      	ldr	r6, [pc, #44]	; (8004a4c <__libc_init_array+0x40>)
 8004a1e:	4c0c      	ldr	r4, [pc, #48]	; (8004a50 <__libc_init_array+0x44>)
 8004a20:	f001 f878 	bl	8005b14 <_init>
 8004a24:	1ba4      	subs	r4, r4, r6
 8004a26:	10a4      	asrs	r4, r4, #2
 8004a28:	2500      	movs	r5, #0
 8004a2a:	42a5      	cmp	r5, r4
 8004a2c:	d105      	bne.n	8004a3a <__libc_init_array+0x2e>
 8004a2e:	bd70      	pop	{r4, r5, r6, pc}
 8004a30:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a34:	4798      	blx	r3
 8004a36:	3501      	adds	r5, #1
 8004a38:	e7ee      	b.n	8004a18 <__libc_init_array+0xc>
 8004a3a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8004a3e:	4798      	blx	r3
 8004a40:	3501      	adds	r5, #1
 8004a42:	e7f2      	b.n	8004a2a <__libc_init_array+0x1e>
 8004a44:	08005ba0 	.word	0x08005ba0
 8004a48:	08005ba0 	.word	0x08005ba0
 8004a4c:	08005ba0 	.word	0x08005ba0
 8004a50:	08005ba4 	.word	0x08005ba4

08004a54 <memset>:
 8004a54:	4402      	add	r2, r0
 8004a56:	4603      	mov	r3, r0
 8004a58:	4293      	cmp	r3, r2
 8004a5a:	d100      	bne.n	8004a5e <memset+0xa>
 8004a5c:	4770      	bx	lr
 8004a5e:	f803 1b01 	strb.w	r1, [r3], #1
 8004a62:	e7f9      	b.n	8004a58 <memset+0x4>

08004a64 <pow>:
 8004a64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a68:	ed2d 8b04 	vpush	{d8-d9}
 8004a6c:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8004d40 <pow+0x2dc>
 8004a70:	b08d      	sub	sp, #52	; 0x34
 8004a72:	ec57 6b10 	vmov	r6, r7, d0
 8004a76:	ec55 4b11 	vmov	r4, r5, d1
 8004a7a:	f000 f965 	bl	8004d48 <__ieee754_pow>
 8004a7e:	f999 3000 	ldrsb.w	r3, [r9]
 8004a82:	9300      	str	r3, [sp, #0]
 8004a84:	3301      	adds	r3, #1
 8004a86:	eeb0 8a40 	vmov.f32	s16, s0
 8004a8a:	eef0 8a60 	vmov.f32	s17, s1
 8004a8e:	46c8      	mov	r8, r9
 8004a90:	d05f      	beq.n	8004b52 <pow+0xee>
 8004a92:	4622      	mov	r2, r4
 8004a94:	462b      	mov	r3, r5
 8004a96:	4620      	mov	r0, r4
 8004a98:	4629      	mov	r1, r5
 8004a9a:	f7fb ffeb 	bl	8000a74 <__aeabi_dcmpun>
 8004a9e:	4683      	mov	fp, r0
 8004aa0:	2800      	cmp	r0, #0
 8004aa2:	d156      	bne.n	8004b52 <pow+0xee>
 8004aa4:	4632      	mov	r2, r6
 8004aa6:	463b      	mov	r3, r7
 8004aa8:	4630      	mov	r0, r6
 8004aaa:	4639      	mov	r1, r7
 8004aac:	f7fb ffe2 	bl	8000a74 <__aeabi_dcmpun>
 8004ab0:	9001      	str	r0, [sp, #4]
 8004ab2:	b1e8      	cbz	r0, 8004af0 <pow+0x8c>
 8004ab4:	2200      	movs	r2, #0
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	4620      	mov	r0, r4
 8004aba:	4629      	mov	r1, r5
 8004abc:	f7fb ffa8 	bl	8000a10 <__aeabi_dcmpeq>
 8004ac0:	2800      	cmp	r0, #0
 8004ac2:	d046      	beq.n	8004b52 <pow+0xee>
 8004ac4:	2301      	movs	r3, #1
 8004ac6:	9302      	str	r3, [sp, #8]
 8004ac8:	4b96      	ldr	r3, [pc, #600]	; (8004d24 <pow+0x2c0>)
 8004aca:	9303      	str	r3, [sp, #12]
 8004acc:	4b96      	ldr	r3, [pc, #600]	; (8004d28 <pow+0x2c4>)
 8004ace:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004ad8:	9b00      	ldr	r3, [sp, #0]
 8004ada:	2b02      	cmp	r3, #2
 8004adc:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004ae0:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004ae4:	d033      	beq.n	8004b4e <pow+0xea>
 8004ae6:	a802      	add	r0, sp, #8
 8004ae8:	f000 fefd 	bl	80058e6 <matherr>
 8004aec:	bb48      	cbnz	r0, 8004b42 <pow+0xde>
 8004aee:	e05d      	b.n	8004bac <pow+0x148>
 8004af0:	f04f 0a00 	mov.w	sl, #0
 8004af4:	f04f 0b00 	mov.w	fp, #0
 8004af8:	4652      	mov	r2, sl
 8004afa:	465b      	mov	r3, fp
 8004afc:	4630      	mov	r0, r6
 8004afe:	4639      	mov	r1, r7
 8004b00:	f7fb ff86 	bl	8000a10 <__aeabi_dcmpeq>
 8004b04:	ec4b ab19 	vmov	d9, sl, fp
 8004b08:	2800      	cmp	r0, #0
 8004b0a:	d054      	beq.n	8004bb6 <pow+0x152>
 8004b0c:	4652      	mov	r2, sl
 8004b0e:	465b      	mov	r3, fp
 8004b10:	4620      	mov	r0, r4
 8004b12:	4629      	mov	r1, r5
 8004b14:	f7fb ff7c 	bl	8000a10 <__aeabi_dcmpeq>
 8004b18:	4680      	mov	r8, r0
 8004b1a:	b318      	cbz	r0, 8004b64 <pow+0x100>
 8004b1c:	2301      	movs	r3, #1
 8004b1e:	9302      	str	r3, [sp, #8]
 8004b20:	4b80      	ldr	r3, [pc, #512]	; (8004d24 <pow+0x2c0>)
 8004b22:	9303      	str	r3, [sp, #12]
 8004b24:	9b01      	ldr	r3, [sp, #4]
 8004b26:	930a      	str	r3, [sp, #40]	; 0x28
 8004b28:	9b00      	ldr	r3, [sp, #0]
 8004b2a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004b2e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004b32:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d0d5      	beq.n	8004ae6 <pow+0x82>
 8004b3a:	4b7b      	ldr	r3, [pc, #492]	; (8004d28 <pow+0x2c4>)
 8004b3c:	2200      	movs	r2, #0
 8004b3e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004b42:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b44:	b11b      	cbz	r3, 8004b4e <pow+0xea>
 8004b46:	f7ff ff5b 	bl	8004a00 <__errno>
 8004b4a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004b4c:	6003      	str	r3, [r0, #0]
 8004b4e:	ed9d 8b08 	vldr	d8, [sp, #32]
 8004b52:	eeb0 0a48 	vmov.f32	s0, s16
 8004b56:	eef0 0a68 	vmov.f32	s1, s17
 8004b5a:	b00d      	add	sp, #52	; 0x34
 8004b5c:	ecbd 8b04 	vpop	{d8-d9}
 8004b60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b64:	ec45 4b10 	vmov	d0, r4, r5
 8004b68:	f000 feb5 	bl	80058d6 <finite>
 8004b6c:	2800      	cmp	r0, #0
 8004b6e:	d0f0      	beq.n	8004b52 <pow+0xee>
 8004b70:	4652      	mov	r2, sl
 8004b72:	465b      	mov	r3, fp
 8004b74:	4620      	mov	r0, r4
 8004b76:	4629      	mov	r1, r5
 8004b78:	f7fb ff54 	bl	8000a24 <__aeabi_dcmplt>
 8004b7c:	2800      	cmp	r0, #0
 8004b7e:	d0e8      	beq.n	8004b52 <pow+0xee>
 8004b80:	2301      	movs	r3, #1
 8004b82:	9302      	str	r3, [sp, #8]
 8004b84:	4b67      	ldr	r3, [pc, #412]	; (8004d24 <pow+0x2c0>)
 8004b86:	9303      	str	r3, [sp, #12]
 8004b88:	f999 3000 	ldrsb.w	r3, [r9]
 8004b8c:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 8004b90:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004b94:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004b98:	b913      	cbnz	r3, 8004ba0 <pow+0x13c>
 8004b9a:	e9cd ab08 	strd	sl, fp, [sp, #32]
 8004b9e:	e7a2      	b.n	8004ae6 <pow+0x82>
 8004ba0:	4962      	ldr	r1, [pc, #392]	; (8004d2c <pow+0x2c8>)
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004ba8:	2b02      	cmp	r3, #2
 8004baa:	d19c      	bne.n	8004ae6 <pow+0x82>
 8004bac:	f7ff ff28 	bl	8004a00 <__errno>
 8004bb0:	2321      	movs	r3, #33	; 0x21
 8004bb2:	6003      	str	r3, [r0, #0]
 8004bb4:	e7c5      	b.n	8004b42 <pow+0xde>
 8004bb6:	eeb0 0a48 	vmov.f32	s0, s16
 8004bba:	eef0 0a68 	vmov.f32	s1, s17
 8004bbe:	f000 fe8a 	bl	80058d6 <finite>
 8004bc2:	9000      	str	r0, [sp, #0]
 8004bc4:	2800      	cmp	r0, #0
 8004bc6:	f040 8081 	bne.w	8004ccc <pow+0x268>
 8004bca:	ec47 6b10 	vmov	d0, r6, r7
 8004bce:	f000 fe82 	bl	80058d6 <finite>
 8004bd2:	2800      	cmp	r0, #0
 8004bd4:	d07a      	beq.n	8004ccc <pow+0x268>
 8004bd6:	ec45 4b10 	vmov	d0, r4, r5
 8004bda:	f000 fe7c 	bl	80058d6 <finite>
 8004bde:	2800      	cmp	r0, #0
 8004be0:	d074      	beq.n	8004ccc <pow+0x268>
 8004be2:	ec53 2b18 	vmov	r2, r3, d8
 8004be6:	ee18 0a10 	vmov	r0, s16
 8004bea:	4619      	mov	r1, r3
 8004bec:	f7fb ff42 	bl	8000a74 <__aeabi_dcmpun>
 8004bf0:	f999 9000 	ldrsb.w	r9, [r9]
 8004bf4:	4b4b      	ldr	r3, [pc, #300]	; (8004d24 <pow+0x2c0>)
 8004bf6:	b1b0      	cbz	r0, 8004c26 <pow+0x1c2>
 8004bf8:	2201      	movs	r2, #1
 8004bfa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004bfe:	9b00      	ldr	r3, [sp, #0]
 8004c00:	930a      	str	r3, [sp, #40]	; 0x28
 8004c02:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c06:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004c0a:	f1b9 0f00 	cmp.w	r9, #0
 8004c0e:	d0c4      	beq.n	8004b9a <pow+0x136>
 8004c10:	4652      	mov	r2, sl
 8004c12:	465b      	mov	r3, fp
 8004c14:	4650      	mov	r0, sl
 8004c16:	4659      	mov	r1, fp
 8004c18:	f7fb fdbc 	bl	8000794 <__aeabi_ddiv>
 8004c1c:	f1b9 0f02 	cmp.w	r9, #2
 8004c20:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004c24:	e7c1      	b.n	8004baa <pow+0x146>
 8004c26:	2203      	movs	r2, #3
 8004c28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c2c:	900a      	str	r0, [sp, #40]	; 0x28
 8004c2e:	4629      	mov	r1, r5
 8004c30:	4620      	mov	r0, r4
 8004c32:	2200      	movs	r2, #0
 8004c34:	4b3e      	ldr	r3, [pc, #248]	; (8004d30 <pow+0x2cc>)
 8004c36:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004c3a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004c3e:	f7fb fc7f 	bl	8000540 <__aeabi_dmul>
 8004c42:	4604      	mov	r4, r0
 8004c44:	460d      	mov	r5, r1
 8004c46:	f1b9 0f00 	cmp.w	r9, #0
 8004c4a:	d124      	bne.n	8004c96 <pow+0x232>
 8004c4c:	4b39      	ldr	r3, [pc, #228]	; (8004d34 <pow+0x2d0>)
 8004c4e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004c52:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004c56:	4630      	mov	r0, r6
 8004c58:	4652      	mov	r2, sl
 8004c5a:	465b      	mov	r3, fp
 8004c5c:	4639      	mov	r1, r7
 8004c5e:	f7fb fee1 	bl	8000a24 <__aeabi_dcmplt>
 8004c62:	2800      	cmp	r0, #0
 8004c64:	d056      	beq.n	8004d14 <pow+0x2b0>
 8004c66:	ec45 4b10 	vmov	d0, r4, r5
 8004c6a:	f000 fe49 	bl	8005900 <rint>
 8004c6e:	4622      	mov	r2, r4
 8004c70:	462b      	mov	r3, r5
 8004c72:	ec51 0b10 	vmov	r0, r1, d0
 8004c76:	f7fb fecb 	bl	8000a10 <__aeabi_dcmpeq>
 8004c7a:	b920      	cbnz	r0, 8004c86 <pow+0x222>
 8004c7c:	4b2e      	ldr	r3, [pc, #184]	; (8004d38 <pow+0x2d4>)
 8004c7e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004c82:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004c86:	f998 3000 	ldrsb.w	r3, [r8]
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d142      	bne.n	8004d14 <pow+0x2b0>
 8004c8e:	f7ff feb7 	bl	8004a00 <__errno>
 8004c92:	2322      	movs	r3, #34	; 0x22
 8004c94:	e78d      	b.n	8004bb2 <pow+0x14e>
 8004c96:	4b29      	ldr	r3, [pc, #164]	; (8004d3c <pow+0x2d8>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	4652      	mov	r2, sl
 8004ca2:	465b      	mov	r3, fp
 8004ca4:	4639      	mov	r1, r7
 8004ca6:	f7fb febd 	bl	8000a24 <__aeabi_dcmplt>
 8004caa:	2800      	cmp	r0, #0
 8004cac:	d0eb      	beq.n	8004c86 <pow+0x222>
 8004cae:	ec45 4b10 	vmov	d0, r4, r5
 8004cb2:	f000 fe25 	bl	8005900 <rint>
 8004cb6:	4622      	mov	r2, r4
 8004cb8:	462b      	mov	r3, r5
 8004cba:	ec51 0b10 	vmov	r0, r1, d0
 8004cbe:	f7fb fea7 	bl	8000a10 <__aeabi_dcmpeq>
 8004cc2:	2800      	cmp	r0, #0
 8004cc4:	d1df      	bne.n	8004c86 <pow+0x222>
 8004cc6:	2200      	movs	r2, #0
 8004cc8:	4b18      	ldr	r3, [pc, #96]	; (8004d2c <pow+0x2c8>)
 8004cca:	e7da      	b.n	8004c82 <pow+0x21e>
 8004ccc:	2200      	movs	r2, #0
 8004cce:	2300      	movs	r3, #0
 8004cd0:	ec51 0b18 	vmov	r0, r1, d8
 8004cd4:	f7fb fe9c 	bl	8000a10 <__aeabi_dcmpeq>
 8004cd8:	2800      	cmp	r0, #0
 8004cda:	f43f af3a 	beq.w	8004b52 <pow+0xee>
 8004cde:	ec47 6b10 	vmov	d0, r6, r7
 8004ce2:	f000 fdf8 	bl	80058d6 <finite>
 8004ce6:	2800      	cmp	r0, #0
 8004ce8:	f43f af33 	beq.w	8004b52 <pow+0xee>
 8004cec:	ec45 4b10 	vmov	d0, r4, r5
 8004cf0:	f000 fdf1 	bl	80058d6 <finite>
 8004cf4:	2800      	cmp	r0, #0
 8004cf6:	f43f af2c 	beq.w	8004b52 <pow+0xee>
 8004cfa:	2304      	movs	r3, #4
 8004cfc:	9302      	str	r3, [sp, #8]
 8004cfe:	4b09      	ldr	r3, [pc, #36]	; (8004d24 <pow+0x2c0>)
 8004d00:	9303      	str	r3, [sp, #12]
 8004d02:	2300      	movs	r3, #0
 8004d04:	930a      	str	r3, [sp, #40]	; 0x28
 8004d06:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004d0a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004d0e:	ed8d 9b08 	vstr	d9, [sp, #32]
 8004d12:	e7b8      	b.n	8004c86 <pow+0x222>
 8004d14:	a802      	add	r0, sp, #8
 8004d16:	f000 fde6 	bl	80058e6 <matherr>
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	f47f af11 	bne.w	8004b42 <pow+0xde>
 8004d20:	e7b5      	b.n	8004c8e <pow+0x22a>
 8004d22:	bf00      	nop
 8004d24:	08005b50 	.word	0x08005b50
 8004d28:	3ff00000 	.word	0x3ff00000
 8004d2c:	fff00000 	.word	0xfff00000
 8004d30:	3fe00000 	.word	0x3fe00000
 8004d34:	47efffff 	.word	0x47efffff
 8004d38:	c7efffff 	.word	0xc7efffff
 8004d3c:	7ff00000 	.word	0x7ff00000
 8004d40:	20000070 	.word	0x20000070
 8004d44:	00000000 	.word	0x00000000

08004d48 <__ieee754_pow>:
 8004d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d4c:	b091      	sub	sp, #68	; 0x44
 8004d4e:	ed8d 1b00 	vstr	d1, [sp]
 8004d52:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004d56:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 8004d5a:	ea58 0302 	orrs.w	r3, r8, r2
 8004d5e:	ec57 6b10 	vmov	r6, r7, d0
 8004d62:	f000 84be 	beq.w	80056e2 <__ieee754_pow+0x99a>
 8004d66:	4b7a      	ldr	r3, [pc, #488]	; (8004f50 <__ieee754_pow+0x208>)
 8004d68:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 8004d6c:	429c      	cmp	r4, r3
 8004d6e:	463d      	mov	r5, r7
 8004d70:	ee10 aa10 	vmov	sl, s0
 8004d74:	dc09      	bgt.n	8004d8a <__ieee754_pow+0x42>
 8004d76:	d103      	bne.n	8004d80 <__ieee754_pow+0x38>
 8004d78:	b93e      	cbnz	r6, 8004d8a <__ieee754_pow+0x42>
 8004d7a:	45a0      	cmp	r8, r4
 8004d7c:	dc0d      	bgt.n	8004d9a <__ieee754_pow+0x52>
 8004d7e:	e001      	b.n	8004d84 <__ieee754_pow+0x3c>
 8004d80:	4598      	cmp	r8, r3
 8004d82:	dc02      	bgt.n	8004d8a <__ieee754_pow+0x42>
 8004d84:	4598      	cmp	r8, r3
 8004d86:	d10e      	bne.n	8004da6 <__ieee754_pow+0x5e>
 8004d88:	b16a      	cbz	r2, 8004da6 <__ieee754_pow+0x5e>
 8004d8a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004d8e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004d92:	ea54 030a 	orrs.w	r3, r4, sl
 8004d96:	f000 84a4 	beq.w	80056e2 <__ieee754_pow+0x99a>
 8004d9a:	486e      	ldr	r0, [pc, #440]	; (8004f54 <__ieee754_pow+0x20c>)
 8004d9c:	b011      	add	sp, #68	; 0x44
 8004d9e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004da2:	f000 bda5 	b.w	80058f0 <nan>
 8004da6:	2d00      	cmp	r5, #0
 8004da8:	da53      	bge.n	8004e52 <__ieee754_pow+0x10a>
 8004daa:	4b6b      	ldr	r3, [pc, #428]	; (8004f58 <__ieee754_pow+0x210>)
 8004dac:	4598      	cmp	r8, r3
 8004dae:	dc4d      	bgt.n	8004e4c <__ieee754_pow+0x104>
 8004db0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 8004db4:	4598      	cmp	r8, r3
 8004db6:	dd4c      	ble.n	8004e52 <__ieee754_pow+0x10a>
 8004db8:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004dbc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004dc0:	2b14      	cmp	r3, #20
 8004dc2:	dd26      	ble.n	8004e12 <__ieee754_pow+0xca>
 8004dc4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 8004dc8:	fa22 f103 	lsr.w	r1, r2, r3
 8004dcc:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd0:	4293      	cmp	r3, r2
 8004dd2:	d13e      	bne.n	8004e52 <__ieee754_pow+0x10a>
 8004dd4:	f001 0101 	and.w	r1, r1, #1
 8004dd8:	f1c1 0b02 	rsb	fp, r1, #2
 8004ddc:	2a00      	cmp	r2, #0
 8004dde:	d15b      	bne.n	8004e98 <__ieee754_pow+0x150>
 8004de0:	4b5b      	ldr	r3, [pc, #364]	; (8004f50 <__ieee754_pow+0x208>)
 8004de2:	4598      	cmp	r8, r3
 8004de4:	d124      	bne.n	8004e30 <__ieee754_pow+0xe8>
 8004de6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8004dea:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004dee:	ea53 030a 	orrs.w	r3, r3, sl
 8004df2:	f000 8476 	beq.w	80056e2 <__ieee754_pow+0x99a>
 8004df6:	4b59      	ldr	r3, [pc, #356]	; (8004f5c <__ieee754_pow+0x214>)
 8004df8:	429c      	cmp	r4, r3
 8004dfa:	dd2d      	ble.n	8004e58 <__ieee754_pow+0x110>
 8004dfc:	f1b9 0f00 	cmp.w	r9, #0
 8004e00:	f280 8473 	bge.w	80056ea <__ieee754_pow+0x9a2>
 8004e04:	2000      	movs	r0, #0
 8004e06:	2100      	movs	r1, #0
 8004e08:	ec41 0b10 	vmov	d0, r0, r1
 8004e0c:	b011      	add	sp, #68	; 0x44
 8004e0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e12:	2a00      	cmp	r2, #0
 8004e14:	d13e      	bne.n	8004e94 <__ieee754_pow+0x14c>
 8004e16:	f1c3 0314 	rsb	r3, r3, #20
 8004e1a:	fa48 f103 	asr.w	r1, r8, r3
 8004e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e22:	4543      	cmp	r3, r8
 8004e24:	f040 8469 	bne.w	80056fa <__ieee754_pow+0x9b2>
 8004e28:	f001 0101 	and.w	r1, r1, #1
 8004e2c:	f1c1 0b02 	rsb	fp, r1, #2
 8004e30:	4b4b      	ldr	r3, [pc, #300]	; (8004f60 <__ieee754_pow+0x218>)
 8004e32:	4598      	cmp	r8, r3
 8004e34:	d118      	bne.n	8004e68 <__ieee754_pow+0x120>
 8004e36:	f1b9 0f00 	cmp.w	r9, #0
 8004e3a:	f280 845a 	bge.w	80056f2 <__ieee754_pow+0x9aa>
 8004e3e:	4948      	ldr	r1, [pc, #288]	; (8004f60 <__ieee754_pow+0x218>)
 8004e40:	4632      	mov	r2, r6
 8004e42:	463b      	mov	r3, r7
 8004e44:	2000      	movs	r0, #0
 8004e46:	f7fb fca5 	bl	8000794 <__aeabi_ddiv>
 8004e4a:	e7dd      	b.n	8004e08 <__ieee754_pow+0xc0>
 8004e4c:	f04f 0b02 	mov.w	fp, #2
 8004e50:	e7c4      	b.n	8004ddc <__ieee754_pow+0x94>
 8004e52:	f04f 0b00 	mov.w	fp, #0
 8004e56:	e7c1      	b.n	8004ddc <__ieee754_pow+0x94>
 8004e58:	f1b9 0f00 	cmp.w	r9, #0
 8004e5c:	dad2      	bge.n	8004e04 <__ieee754_pow+0xbc>
 8004e5e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004e62:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004e66:	e7cf      	b.n	8004e08 <__ieee754_pow+0xc0>
 8004e68:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 8004e6c:	d106      	bne.n	8004e7c <__ieee754_pow+0x134>
 8004e6e:	4632      	mov	r2, r6
 8004e70:	463b      	mov	r3, r7
 8004e72:	4610      	mov	r0, r2
 8004e74:	4619      	mov	r1, r3
 8004e76:	f7fb fb63 	bl	8000540 <__aeabi_dmul>
 8004e7a:	e7c5      	b.n	8004e08 <__ieee754_pow+0xc0>
 8004e7c:	4b39      	ldr	r3, [pc, #228]	; (8004f64 <__ieee754_pow+0x21c>)
 8004e7e:	4599      	cmp	r9, r3
 8004e80:	d10a      	bne.n	8004e98 <__ieee754_pow+0x150>
 8004e82:	2d00      	cmp	r5, #0
 8004e84:	db08      	blt.n	8004e98 <__ieee754_pow+0x150>
 8004e86:	ec47 6b10 	vmov	d0, r6, r7
 8004e8a:	b011      	add	sp, #68	; 0x44
 8004e8c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e90:	f000 bc68 	b.w	8005764 <__ieee754_sqrt>
 8004e94:	f04f 0b00 	mov.w	fp, #0
 8004e98:	ec47 6b10 	vmov	d0, r6, r7
 8004e9c:	f000 fd12 	bl	80058c4 <fabs>
 8004ea0:	ec51 0b10 	vmov	r0, r1, d0
 8004ea4:	f1ba 0f00 	cmp.w	sl, #0
 8004ea8:	d127      	bne.n	8004efa <__ieee754_pow+0x1b2>
 8004eaa:	b124      	cbz	r4, 8004eb6 <__ieee754_pow+0x16e>
 8004eac:	4b2c      	ldr	r3, [pc, #176]	; (8004f60 <__ieee754_pow+0x218>)
 8004eae:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 8004eb2:	429a      	cmp	r2, r3
 8004eb4:	d121      	bne.n	8004efa <__ieee754_pow+0x1b2>
 8004eb6:	f1b9 0f00 	cmp.w	r9, #0
 8004eba:	da05      	bge.n	8004ec8 <__ieee754_pow+0x180>
 8004ebc:	4602      	mov	r2, r0
 8004ebe:	460b      	mov	r3, r1
 8004ec0:	2000      	movs	r0, #0
 8004ec2:	4927      	ldr	r1, [pc, #156]	; (8004f60 <__ieee754_pow+0x218>)
 8004ec4:	f7fb fc66 	bl	8000794 <__aeabi_ddiv>
 8004ec8:	2d00      	cmp	r5, #0
 8004eca:	da9d      	bge.n	8004e08 <__ieee754_pow+0xc0>
 8004ecc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8004ed0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8004ed4:	ea54 030b 	orrs.w	r3, r4, fp
 8004ed8:	d108      	bne.n	8004eec <__ieee754_pow+0x1a4>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4610      	mov	r0, r2
 8004ee0:	4619      	mov	r1, r3
 8004ee2:	f7fb f975 	bl	80001d0 <__aeabi_dsub>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	e7ac      	b.n	8004e46 <__ieee754_pow+0xfe>
 8004eec:	f1bb 0f01 	cmp.w	fp, #1
 8004ef0:	d18a      	bne.n	8004e08 <__ieee754_pow+0xc0>
 8004ef2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004ef6:	4619      	mov	r1, r3
 8004ef8:	e786      	b.n	8004e08 <__ieee754_pow+0xc0>
 8004efa:	0fed      	lsrs	r5, r5, #31
 8004efc:	1e6b      	subs	r3, r5, #1
 8004efe:	930d      	str	r3, [sp, #52]	; 0x34
 8004f00:	ea5b 0303 	orrs.w	r3, fp, r3
 8004f04:	d102      	bne.n	8004f0c <__ieee754_pow+0x1c4>
 8004f06:	4632      	mov	r2, r6
 8004f08:	463b      	mov	r3, r7
 8004f0a:	e7e8      	b.n	8004ede <__ieee754_pow+0x196>
 8004f0c:	4b16      	ldr	r3, [pc, #88]	; (8004f68 <__ieee754_pow+0x220>)
 8004f0e:	4598      	cmp	r8, r3
 8004f10:	f340 80fe 	ble.w	8005110 <__ieee754_pow+0x3c8>
 8004f14:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004f18:	4598      	cmp	r8, r3
 8004f1a:	dd0a      	ble.n	8004f32 <__ieee754_pow+0x1ea>
 8004f1c:	4b0f      	ldr	r3, [pc, #60]	; (8004f5c <__ieee754_pow+0x214>)
 8004f1e:	429c      	cmp	r4, r3
 8004f20:	dc0d      	bgt.n	8004f3e <__ieee754_pow+0x1f6>
 8004f22:	f1b9 0f00 	cmp.w	r9, #0
 8004f26:	f6bf af6d 	bge.w	8004e04 <__ieee754_pow+0xbc>
 8004f2a:	a307      	add	r3, pc, #28	; (adr r3, 8004f48 <__ieee754_pow+0x200>)
 8004f2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f30:	e79f      	b.n	8004e72 <__ieee754_pow+0x12a>
 8004f32:	4b0e      	ldr	r3, [pc, #56]	; (8004f6c <__ieee754_pow+0x224>)
 8004f34:	429c      	cmp	r4, r3
 8004f36:	ddf4      	ble.n	8004f22 <__ieee754_pow+0x1da>
 8004f38:	4b09      	ldr	r3, [pc, #36]	; (8004f60 <__ieee754_pow+0x218>)
 8004f3a:	429c      	cmp	r4, r3
 8004f3c:	dd18      	ble.n	8004f70 <__ieee754_pow+0x228>
 8004f3e:	f1b9 0f00 	cmp.w	r9, #0
 8004f42:	dcf2      	bgt.n	8004f2a <__ieee754_pow+0x1e2>
 8004f44:	e75e      	b.n	8004e04 <__ieee754_pow+0xbc>
 8004f46:	bf00      	nop
 8004f48:	8800759c 	.word	0x8800759c
 8004f4c:	7e37e43c 	.word	0x7e37e43c
 8004f50:	7ff00000 	.word	0x7ff00000
 8004f54:	08005b53 	.word	0x08005b53
 8004f58:	433fffff 	.word	0x433fffff
 8004f5c:	3fefffff 	.word	0x3fefffff
 8004f60:	3ff00000 	.word	0x3ff00000
 8004f64:	3fe00000 	.word	0x3fe00000
 8004f68:	41e00000 	.word	0x41e00000
 8004f6c:	3feffffe 	.word	0x3feffffe
 8004f70:	2200      	movs	r2, #0
 8004f72:	4b63      	ldr	r3, [pc, #396]	; (8005100 <__ieee754_pow+0x3b8>)
 8004f74:	f7fb f92c 	bl	80001d0 <__aeabi_dsub>
 8004f78:	a355      	add	r3, pc, #340	; (adr r3, 80050d0 <__ieee754_pow+0x388>)
 8004f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f7e:	4604      	mov	r4, r0
 8004f80:	460d      	mov	r5, r1
 8004f82:	f7fb fadd 	bl	8000540 <__aeabi_dmul>
 8004f86:	a354      	add	r3, pc, #336	; (adr r3, 80050d8 <__ieee754_pow+0x390>)
 8004f88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8c:	4606      	mov	r6, r0
 8004f8e:	460f      	mov	r7, r1
 8004f90:	4620      	mov	r0, r4
 8004f92:	4629      	mov	r1, r5
 8004f94:	f7fb fad4 	bl	8000540 <__aeabi_dmul>
 8004f98:	2200      	movs	r2, #0
 8004f9a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004f9e:	4b59      	ldr	r3, [pc, #356]	; (8005104 <__ieee754_pow+0x3bc>)
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	4629      	mov	r1, r5
 8004fa4:	f7fb facc 	bl	8000540 <__aeabi_dmul>
 8004fa8:	4602      	mov	r2, r0
 8004faa:	460b      	mov	r3, r1
 8004fac:	a14c      	add	r1, pc, #304	; (adr r1, 80050e0 <__ieee754_pow+0x398>)
 8004fae:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fb2:	f7fb f90d 	bl	80001d0 <__aeabi_dsub>
 8004fb6:	4622      	mov	r2, r4
 8004fb8:	462b      	mov	r3, r5
 8004fba:	f7fb fac1 	bl	8000540 <__aeabi_dmul>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	2000      	movs	r0, #0
 8004fc4:	4950      	ldr	r1, [pc, #320]	; (8005108 <__ieee754_pow+0x3c0>)
 8004fc6:	f7fb f903 	bl	80001d0 <__aeabi_dsub>
 8004fca:	4622      	mov	r2, r4
 8004fcc:	462b      	mov	r3, r5
 8004fce:	4680      	mov	r8, r0
 8004fd0:	4689      	mov	r9, r1
 8004fd2:	4620      	mov	r0, r4
 8004fd4:	4629      	mov	r1, r5
 8004fd6:	f7fb fab3 	bl	8000540 <__aeabi_dmul>
 8004fda:	4602      	mov	r2, r0
 8004fdc:	460b      	mov	r3, r1
 8004fde:	4640      	mov	r0, r8
 8004fe0:	4649      	mov	r1, r9
 8004fe2:	f7fb faad 	bl	8000540 <__aeabi_dmul>
 8004fe6:	a340      	add	r3, pc, #256	; (adr r3, 80050e8 <__ieee754_pow+0x3a0>)
 8004fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fec:	f7fb faa8 	bl	8000540 <__aeabi_dmul>
 8004ff0:	4602      	mov	r2, r0
 8004ff2:	460b      	mov	r3, r1
 8004ff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ff8:	f7fb f8ea 	bl	80001d0 <__aeabi_dsub>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4604      	mov	r4, r0
 8005002:	460d      	mov	r5, r1
 8005004:	4630      	mov	r0, r6
 8005006:	4639      	mov	r1, r7
 8005008:	f7fb f8e4 	bl	80001d4 <__adddf3>
 800500c:	2000      	movs	r0, #0
 800500e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005012:	4632      	mov	r2, r6
 8005014:	463b      	mov	r3, r7
 8005016:	f7fb f8db 	bl	80001d0 <__aeabi_dsub>
 800501a:	4602      	mov	r2, r0
 800501c:	460b      	mov	r3, r1
 800501e:	4620      	mov	r0, r4
 8005020:	4629      	mov	r1, r5
 8005022:	f7fb f8d5 	bl	80001d0 <__aeabi_dsub>
 8005026:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005028:	f10b 33ff 	add.w	r3, fp, #4294967295
 800502c:	4313      	orrs	r3, r2
 800502e:	4606      	mov	r6, r0
 8005030:	460f      	mov	r7, r1
 8005032:	f040 81eb 	bne.w	800540c <__ieee754_pow+0x6c4>
 8005036:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 80050f0 <__ieee754_pow+0x3a8>
 800503a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800503e:	2400      	movs	r4, #0
 8005040:	4622      	mov	r2, r4
 8005042:	462b      	mov	r3, r5
 8005044:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005048:	ed8d 7b02 	vstr	d7, [sp, #8]
 800504c:	f7fb f8c0 	bl	80001d0 <__aeabi_dsub>
 8005050:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005054:	f7fb fa74 	bl	8000540 <__aeabi_dmul>
 8005058:	e9dd 2300 	ldrd	r2, r3, [sp]
 800505c:	4680      	mov	r8, r0
 800505e:	4689      	mov	r9, r1
 8005060:	4630      	mov	r0, r6
 8005062:	4639      	mov	r1, r7
 8005064:	f7fb fa6c 	bl	8000540 <__aeabi_dmul>
 8005068:	4602      	mov	r2, r0
 800506a:	460b      	mov	r3, r1
 800506c:	4640      	mov	r0, r8
 800506e:	4649      	mov	r1, r9
 8005070:	f7fb f8b0 	bl	80001d4 <__adddf3>
 8005074:	4622      	mov	r2, r4
 8005076:	462b      	mov	r3, r5
 8005078:	4680      	mov	r8, r0
 800507a:	4689      	mov	r9, r1
 800507c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005080:	f7fb fa5e 	bl	8000540 <__aeabi_dmul>
 8005084:	460b      	mov	r3, r1
 8005086:	4604      	mov	r4, r0
 8005088:	460d      	mov	r5, r1
 800508a:	4602      	mov	r2, r0
 800508c:	4649      	mov	r1, r9
 800508e:	4640      	mov	r0, r8
 8005090:	e9cd 4500 	strd	r4, r5, [sp]
 8005094:	f7fb f89e 	bl	80001d4 <__adddf3>
 8005098:	4b1c      	ldr	r3, [pc, #112]	; (800510c <__ieee754_pow+0x3c4>)
 800509a:	4299      	cmp	r1, r3
 800509c:	4606      	mov	r6, r0
 800509e:	460f      	mov	r7, r1
 80050a0:	468b      	mov	fp, r1
 80050a2:	f340 82f7 	ble.w	8005694 <__ieee754_pow+0x94c>
 80050a6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80050aa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80050ae:	4303      	orrs	r3, r0
 80050b0:	f000 81ea 	beq.w	8005488 <__ieee754_pow+0x740>
 80050b4:	a310      	add	r3, pc, #64	; (adr r3, 80050f8 <__ieee754_pow+0x3b0>)
 80050b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ba:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80050be:	f7fb fa3f 	bl	8000540 <__aeabi_dmul>
 80050c2:	a30d      	add	r3, pc, #52	; (adr r3, 80050f8 <__ieee754_pow+0x3b0>)
 80050c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050c8:	e6d5      	b.n	8004e76 <__ieee754_pow+0x12e>
 80050ca:	bf00      	nop
 80050cc:	f3af 8000 	nop.w
 80050d0:	60000000 	.word	0x60000000
 80050d4:	3ff71547 	.word	0x3ff71547
 80050d8:	f85ddf44 	.word	0xf85ddf44
 80050dc:	3e54ae0b 	.word	0x3e54ae0b
 80050e0:	55555555 	.word	0x55555555
 80050e4:	3fd55555 	.word	0x3fd55555
 80050e8:	652b82fe 	.word	0x652b82fe
 80050ec:	3ff71547 	.word	0x3ff71547
 80050f0:	00000000 	.word	0x00000000
 80050f4:	bff00000 	.word	0xbff00000
 80050f8:	8800759c 	.word	0x8800759c
 80050fc:	7e37e43c 	.word	0x7e37e43c
 8005100:	3ff00000 	.word	0x3ff00000
 8005104:	3fd00000 	.word	0x3fd00000
 8005108:	3fe00000 	.word	0x3fe00000
 800510c:	408fffff 	.word	0x408fffff
 8005110:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005114:	f04f 0200 	mov.w	r2, #0
 8005118:	da05      	bge.n	8005126 <__ieee754_pow+0x3de>
 800511a:	4bd3      	ldr	r3, [pc, #844]	; (8005468 <__ieee754_pow+0x720>)
 800511c:	f7fb fa10 	bl	8000540 <__aeabi_dmul>
 8005120:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005124:	460c      	mov	r4, r1
 8005126:	1523      	asrs	r3, r4, #20
 8005128:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800512c:	4413      	add	r3, r2
 800512e:	9309      	str	r3, [sp, #36]	; 0x24
 8005130:	4bce      	ldr	r3, [pc, #824]	; (800546c <__ieee754_pow+0x724>)
 8005132:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005136:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800513a:	429c      	cmp	r4, r3
 800513c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005140:	dd08      	ble.n	8005154 <__ieee754_pow+0x40c>
 8005142:	4bcb      	ldr	r3, [pc, #812]	; (8005470 <__ieee754_pow+0x728>)
 8005144:	429c      	cmp	r4, r3
 8005146:	f340 815e 	ble.w	8005406 <__ieee754_pow+0x6be>
 800514a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800514c:	3301      	adds	r3, #1
 800514e:	9309      	str	r3, [sp, #36]	; 0x24
 8005150:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005154:	f04f 0a00 	mov.w	sl, #0
 8005158:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800515c:	930c      	str	r3, [sp, #48]	; 0x30
 800515e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005160:	4bc4      	ldr	r3, [pc, #784]	; (8005474 <__ieee754_pow+0x72c>)
 8005162:	4413      	add	r3, r2
 8005164:	ed93 7b00 	vldr	d7, [r3]
 8005168:	4629      	mov	r1, r5
 800516a:	ec53 2b17 	vmov	r2, r3, d7
 800516e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8005172:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005176:	f7fb f82b 	bl	80001d0 <__aeabi_dsub>
 800517a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 800517e:	4606      	mov	r6, r0
 8005180:	460f      	mov	r7, r1
 8005182:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005186:	f7fb f825 	bl	80001d4 <__adddf3>
 800518a:	4602      	mov	r2, r0
 800518c:	460b      	mov	r3, r1
 800518e:	2000      	movs	r0, #0
 8005190:	49b9      	ldr	r1, [pc, #740]	; (8005478 <__ieee754_pow+0x730>)
 8005192:	f7fb faff 	bl	8000794 <__aeabi_ddiv>
 8005196:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 800519a:	4602      	mov	r2, r0
 800519c:	460b      	mov	r3, r1
 800519e:	4630      	mov	r0, r6
 80051a0:	4639      	mov	r1, r7
 80051a2:	f7fb f9cd 	bl	8000540 <__aeabi_dmul>
 80051a6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051aa:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80051ae:	e9cd 3402 	strd	r3, r4, [sp, #8]
 80051b2:	2300      	movs	r3, #0
 80051b4:	9302      	str	r3, [sp, #8]
 80051b6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 80051ba:	106d      	asrs	r5, r5, #1
 80051bc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80051c0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80051c4:	2200      	movs	r2, #0
 80051c6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 80051ca:	4640      	mov	r0, r8
 80051cc:	4649      	mov	r1, r9
 80051ce:	4614      	mov	r4, r2
 80051d0:	461d      	mov	r5, r3
 80051d2:	f7fb f9b5 	bl	8000540 <__aeabi_dmul>
 80051d6:	4602      	mov	r2, r0
 80051d8:	460b      	mov	r3, r1
 80051da:	4630      	mov	r0, r6
 80051dc:	4639      	mov	r1, r7
 80051de:	f7fa fff7 	bl	80001d0 <__aeabi_dsub>
 80051e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80051e6:	4606      	mov	r6, r0
 80051e8:	460f      	mov	r7, r1
 80051ea:	4620      	mov	r0, r4
 80051ec:	4629      	mov	r1, r5
 80051ee:	f7fa ffef 	bl	80001d0 <__aeabi_dsub>
 80051f2:	4602      	mov	r2, r0
 80051f4:	460b      	mov	r3, r1
 80051f6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80051fa:	f7fa ffe9 	bl	80001d0 <__aeabi_dsub>
 80051fe:	4642      	mov	r2, r8
 8005200:	464b      	mov	r3, r9
 8005202:	f7fb f99d 	bl	8000540 <__aeabi_dmul>
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	4630      	mov	r0, r6
 800520c:	4639      	mov	r1, r7
 800520e:	f7fa ffdf 	bl	80001d0 <__aeabi_dsub>
 8005212:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8005216:	f7fb f993 	bl	8000540 <__aeabi_dmul>
 800521a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800521e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005222:	4610      	mov	r0, r2
 8005224:	4619      	mov	r1, r3
 8005226:	f7fb f98b 	bl	8000540 <__aeabi_dmul>
 800522a:	a37b      	add	r3, pc, #492	; (adr r3, 8005418 <__ieee754_pow+0x6d0>)
 800522c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005230:	4604      	mov	r4, r0
 8005232:	460d      	mov	r5, r1
 8005234:	f7fb f984 	bl	8000540 <__aeabi_dmul>
 8005238:	a379      	add	r3, pc, #484	; (adr r3, 8005420 <__ieee754_pow+0x6d8>)
 800523a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523e:	f7fa ffc9 	bl	80001d4 <__adddf3>
 8005242:	4622      	mov	r2, r4
 8005244:	462b      	mov	r3, r5
 8005246:	f7fb f97b 	bl	8000540 <__aeabi_dmul>
 800524a:	a377      	add	r3, pc, #476	; (adr r3, 8005428 <__ieee754_pow+0x6e0>)
 800524c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005250:	f7fa ffc0 	bl	80001d4 <__adddf3>
 8005254:	4622      	mov	r2, r4
 8005256:	462b      	mov	r3, r5
 8005258:	f7fb f972 	bl	8000540 <__aeabi_dmul>
 800525c:	a374      	add	r3, pc, #464	; (adr r3, 8005430 <__ieee754_pow+0x6e8>)
 800525e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005262:	f7fa ffb7 	bl	80001d4 <__adddf3>
 8005266:	4622      	mov	r2, r4
 8005268:	462b      	mov	r3, r5
 800526a:	f7fb f969 	bl	8000540 <__aeabi_dmul>
 800526e:	a372      	add	r3, pc, #456	; (adr r3, 8005438 <__ieee754_pow+0x6f0>)
 8005270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005274:	f7fa ffae 	bl	80001d4 <__adddf3>
 8005278:	4622      	mov	r2, r4
 800527a:	462b      	mov	r3, r5
 800527c:	f7fb f960 	bl	8000540 <__aeabi_dmul>
 8005280:	a36f      	add	r3, pc, #444	; (adr r3, 8005440 <__ieee754_pow+0x6f8>)
 8005282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005286:	f7fa ffa5 	bl	80001d4 <__adddf3>
 800528a:	4622      	mov	r2, r4
 800528c:	4606      	mov	r6, r0
 800528e:	460f      	mov	r7, r1
 8005290:	462b      	mov	r3, r5
 8005292:	4620      	mov	r0, r4
 8005294:	4629      	mov	r1, r5
 8005296:	f7fb f953 	bl	8000540 <__aeabi_dmul>
 800529a:	4602      	mov	r2, r0
 800529c:	460b      	mov	r3, r1
 800529e:	4630      	mov	r0, r6
 80052a0:	4639      	mov	r1, r7
 80052a2:	f7fb f94d 	bl	8000540 <__aeabi_dmul>
 80052a6:	4642      	mov	r2, r8
 80052a8:	4604      	mov	r4, r0
 80052aa:	460d      	mov	r5, r1
 80052ac:	464b      	mov	r3, r9
 80052ae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052b2:	f7fa ff8f 	bl	80001d4 <__adddf3>
 80052b6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80052ba:	f7fb f941 	bl	8000540 <__aeabi_dmul>
 80052be:	4622      	mov	r2, r4
 80052c0:	462b      	mov	r3, r5
 80052c2:	f7fa ff87 	bl	80001d4 <__adddf3>
 80052c6:	4642      	mov	r2, r8
 80052c8:	4606      	mov	r6, r0
 80052ca:	460f      	mov	r7, r1
 80052cc:	464b      	mov	r3, r9
 80052ce:	4640      	mov	r0, r8
 80052d0:	4649      	mov	r1, r9
 80052d2:	f7fb f935 	bl	8000540 <__aeabi_dmul>
 80052d6:	2200      	movs	r2, #0
 80052d8:	4b68      	ldr	r3, [pc, #416]	; (800547c <__ieee754_pow+0x734>)
 80052da:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 80052de:	f7fa ff79 	bl	80001d4 <__adddf3>
 80052e2:	4632      	mov	r2, r6
 80052e4:	463b      	mov	r3, r7
 80052e6:	f7fa ff75 	bl	80001d4 <__adddf3>
 80052ea:	9802      	ldr	r0, [sp, #8]
 80052ec:	460d      	mov	r5, r1
 80052ee:	4604      	mov	r4, r0
 80052f0:	4602      	mov	r2, r0
 80052f2:	460b      	mov	r3, r1
 80052f4:	4640      	mov	r0, r8
 80052f6:	4649      	mov	r1, r9
 80052f8:	f7fb f922 	bl	8000540 <__aeabi_dmul>
 80052fc:	2200      	movs	r2, #0
 80052fe:	4680      	mov	r8, r0
 8005300:	4689      	mov	r9, r1
 8005302:	4b5e      	ldr	r3, [pc, #376]	; (800547c <__ieee754_pow+0x734>)
 8005304:	4620      	mov	r0, r4
 8005306:	4629      	mov	r1, r5
 8005308:	f7fa ff62 	bl	80001d0 <__aeabi_dsub>
 800530c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8005310:	f7fa ff5e 	bl	80001d0 <__aeabi_dsub>
 8005314:	4602      	mov	r2, r0
 8005316:	460b      	mov	r3, r1
 8005318:	4630      	mov	r0, r6
 800531a:	4639      	mov	r1, r7
 800531c:	f7fa ff58 	bl	80001d0 <__aeabi_dsub>
 8005320:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005324:	f7fb f90c 	bl	8000540 <__aeabi_dmul>
 8005328:	4622      	mov	r2, r4
 800532a:	4606      	mov	r6, r0
 800532c:	460f      	mov	r7, r1
 800532e:	462b      	mov	r3, r5
 8005330:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005334:	f7fb f904 	bl	8000540 <__aeabi_dmul>
 8005338:	4602      	mov	r2, r0
 800533a:	460b      	mov	r3, r1
 800533c:	4630      	mov	r0, r6
 800533e:	4639      	mov	r1, r7
 8005340:	f7fa ff48 	bl	80001d4 <__adddf3>
 8005344:	4606      	mov	r6, r0
 8005346:	460f      	mov	r7, r1
 8005348:	4602      	mov	r2, r0
 800534a:	460b      	mov	r3, r1
 800534c:	4640      	mov	r0, r8
 800534e:	4649      	mov	r1, r9
 8005350:	f7fa ff40 	bl	80001d4 <__adddf3>
 8005354:	9802      	ldr	r0, [sp, #8]
 8005356:	a33c      	add	r3, pc, #240	; (adr r3, 8005448 <__ieee754_pow+0x700>)
 8005358:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535c:	4604      	mov	r4, r0
 800535e:	460d      	mov	r5, r1
 8005360:	f7fb f8ee 	bl	8000540 <__aeabi_dmul>
 8005364:	4642      	mov	r2, r8
 8005366:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800536a:	464b      	mov	r3, r9
 800536c:	4620      	mov	r0, r4
 800536e:	4629      	mov	r1, r5
 8005370:	f7fa ff2e 	bl	80001d0 <__aeabi_dsub>
 8005374:	4602      	mov	r2, r0
 8005376:	460b      	mov	r3, r1
 8005378:	4630      	mov	r0, r6
 800537a:	4639      	mov	r1, r7
 800537c:	f7fa ff28 	bl	80001d0 <__aeabi_dsub>
 8005380:	a333      	add	r3, pc, #204	; (adr r3, 8005450 <__ieee754_pow+0x708>)
 8005382:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005386:	f7fb f8db 	bl	8000540 <__aeabi_dmul>
 800538a:	a333      	add	r3, pc, #204	; (adr r3, 8005458 <__ieee754_pow+0x710>)
 800538c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005390:	4606      	mov	r6, r0
 8005392:	460f      	mov	r7, r1
 8005394:	4620      	mov	r0, r4
 8005396:	4629      	mov	r1, r5
 8005398:	f7fb f8d2 	bl	8000540 <__aeabi_dmul>
 800539c:	4602      	mov	r2, r0
 800539e:	460b      	mov	r3, r1
 80053a0:	4630      	mov	r0, r6
 80053a2:	4639      	mov	r1, r7
 80053a4:	f7fa ff16 	bl	80001d4 <__adddf3>
 80053a8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053aa:	4b35      	ldr	r3, [pc, #212]	; (8005480 <__ieee754_pow+0x738>)
 80053ac:	4413      	add	r3, r2
 80053ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b2:	f7fa ff0f 	bl	80001d4 <__adddf3>
 80053b6:	4604      	mov	r4, r0
 80053b8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80053ba:	460d      	mov	r5, r1
 80053bc:	f7fb f856 	bl	800046c <__aeabi_i2d>
 80053c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80053c2:	4b30      	ldr	r3, [pc, #192]	; (8005484 <__ieee754_pow+0x73c>)
 80053c4:	4413      	add	r3, r2
 80053c6:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053ca:	4606      	mov	r6, r0
 80053cc:	460f      	mov	r7, r1
 80053ce:	4622      	mov	r2, r4
 80053d0:	462b      	mov	r3, r5
 80053d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053d6:	f7fa fefd 	bl	80001d4 <__adddf3>
 80053da:	4642      	mov	r2, r8
 80053dc:	464b      	mov	r3, r9
 80053de:	f7fa fef9 	bl	80001d4 <__adddf3>
 80053e2:	4632      	mov	r2, r6
 80053e4:	463b      	mov	r3, r7
 80053e6:	f7fa fef5 	bl	80001d4 <__adddf3>
 80053ea:	9802      	ldr	r0, [sp, #8]
 80053ec:	4632      	mov	r2, r6
 80053ee:	463b      	mov	r3, r7
 80053f0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053f4:	f7fa feec 	bl	80001d0 <__aeabi_dsub>
 80053f8:	4642      	mov	r2, r8
 80053fa:	464b      	mov	r3, r9
 80053fc:	f7fa fee8 	bl	80001d0 <__aeabi_dsub>
 8005400:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005404:	e607      	b.n	8005016 <__ieee754_pow+0x2ce>
 8005406:	f04f 0a01 	mov.w	sl, #1
 800540a:	e6a5      	b.n	8005158 <__ieee754_pow+0x410>
 800540c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005460 <__ieee754_pow+0x718>
 8005410:	e613      	b.n	800503a <__ieee754_pow+0x2f2>
 8005412:	bf00      	nop
 8005414:	f3af 8000 	nop.w
 8005418:	4a454eef 	.word	0x4a454eef
 800541c:	3fca7e28 	.word	0x3fca7e28
 8005420:	93c9db65 	.word	0x93c9db65
 8005424:	3fcd864a 	.word	0x3fcd864a
 8005428:	a91d4101 	.word	0xa91d4101
 800542c:	3fd17460 	.word	0x3fd17460
 8005430:	518f264d 	.word	0x518f264d
 8005434:	3fd55555 	.word	0x3fd55555
 8005438:	db6fabff 	.word	0xdb6fabff
 800543c:	3fdb6db6 	.word	0x3fdb6db6
 8005440:	33333303 	.word	0x33333303
 8005444:	3fe33333 	.word	0x3fe33333
 8005448:	e0000000 	.word	0xe0000000
 800544c:	3feec709 	.word	0x3feec709
 8005450:	dc3a03fd 	.word	0xdc3a03fd
 8005454:	3feec709 	.word	0x3feec709
 8005458:	145b01f5 	.word	0x145b01f5
 800545c:	be3e2fe0 	.word	0xbe3e2fe0
 8005460:	00000000 	.word	0x00000000
 8005464:	3ff00000 	.word	0x3ff00000
 8005468:	43400000 	.word	0x43400000
 800546c:	0003988e 	.word	0x0003988e
 8005470:	000bb679 	.word	0x000bb679
 8005474:	08005b58 	.word	0x08005b58
 8005478:	3ff00000 	.word	0x3ff00000
 800547c:	40080000 	.word	0x40080000
 8005480:	08005b78 	.word	0x08005b78
 8005484:	08005b68 	.word	0x08005b68
 8005488:	a3b4      	add	r3, pc, #720	; (adr r3, 800575c <__ieee754_pow+0xa14>)
 800548a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548e:	4640      	mov	r0, r8
 8005490:	4649      	mov	r1, r9
 8005492:	f7fa fe9f 	bl	80001d4 <__adddf3>
 8005496:	4622      	mov	r2, r4
 8005498:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800549c:	462b      	mov	r3, r5
 800549e:	4630      	mov	r0, r6
 80054a0:	4639      	mov	r1, r7
 80054a2:	f7fa fe95 	bl	80001d0 <__aeabi_dsub>
 80054a6:	4602      	mov	r2, r0
 80054a8:	460b      	mov	r3, r1
 80054aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80054ae:	f7fb fad7 	bl	8000a60 <__aeabi_dcmpgt>
 80054b2:	2800      	cmp	r0, #0
 80054b4:	f47f adfe 	bne.w	80050b4 <__ieee754_pow+0x36c>
 80054b8:	4aa3      	ldr	r2, [pc, #652]	; (8005748 <__ieee754_pow+0xa00>)
 80054ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80054be:	4293      	cmp	r3, r2
 80054c0:	f340 810a 	ble.w	80056d8 <__ieee754_pow+0x990>
 80054c4:	151b      	asrs	r3, r3, #20
 80054c6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80054ca:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80054ce:	fa4a f303 	asr.w	r3, sl, r3
 80054d2:	445b      	add	r3, fp
 80054d4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80054d8:	4e9c      	ldr	r6, [pc, #624]	; (800574c <__ieee754_pow+0xa04>)
 80054da:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80054de:	4116      	asrs	r6, r2
 80054e0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80054e4:	2000      	movs	r0, #0
 80054e6:	ea23 0106 	bic.w	r1, r3, r6
 80054ea:	f1c2 0214 	rsb	r2, r2, #20
 80054ee:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80054f2:	fa4a fa02 	asr.w	sl, sl, r2
 80054f6:	f1bb 0f00 	cmp.w	fp, #0
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	4620      	mov	r0, r4
 8005500:	4629      	mov	r1, r5
 8005502:	bfb8      	it	lt
 8005504:	f1ca 0a00 	rsblt	sl, sl, #0
 8005508:	f7fa fe62 	bl	80001d0 <__aeabi_dsub>
 800550c:	e9cd 0100 	strd	r0, r1, [sp]
 8005510:	4642      	mov	r2, r8
 8005512:	464b      	mov	r3, r9
 8005514:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005518:	f7fa fe5c 	bl	80001d4 <__adddf3>
 800551c:	2000      	movs	r0, #0
 800551e:	a378      	add	r3, pc, #480	; (adr r3, 8005700 <__ieee754_pow+0x9b8>)
 8005520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005524:	4604      	mov	r4, r0
 8005526:	460d      	mov	r5, r1
 8005528:	f7fb f80a 	bl	8000540 <__aeabi_dmul>
 800552c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005530:	4606      	mov	r6, r0
 8005532:	460f      	mov	r7, r1
 8005534:	4620      	mov	r0, r4
 8005536:	4629      	mov	r1, r5
 8005538:	f7fa fe4a 	bl	80001d0 <__aeabi_dsub>
 800553c:	4602      	mov	r2, r0
 800553e:	460b      	mov	r3, r1
 8005540:	4640      	mov	r0, r8
 8005542:	4649      	mov	r1, r9
 8005544:	f7fa fe44 	bl	80001d0 <__aeabi_dsub>
 8005548:	a36f      	add	r3, pc, #444	; (adr r3, 8005708 <__ieee754_pow+0x9c0>)
 800554a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554e:	f7fa fff7 	bl	8000540 <__aeabi_dmul>
 8005552:	a36f      	add	r3, pc, #444	; (adr r3, 8005710 <__ieee754_pow+0x9c8>)
 8005554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005558:	4680      	mov	r8, r0
 800555a:	4689      	mov	r9, r1
 800555c:	4620      	mov	r0, r4
 800555e:	4629      	mov	r1, r5
 8005560:	f7fa ffee 	bl	8000540 <__aeabi_dmul>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	4640      	mov	r0, r8
 800556a:	4649      	mov	r1, r9
 800556c:	f7fa fe32 	bl	80001d4 <__adddf3>
 8005570:	4604      	mov	r4, r0
 8005572:	460d      	mov	r5, r1
 8005574:	4602      	mov	r2, r0
 8005576:	460b      	mov	r3, r1
 8005578:	4630      	mov	r0, r6
 800557a:	4639      	mov	r1, r7
 800557c:	f7fa fe2a 	bl	80001d4 <__adddf3>
 8005580:	4632      	mov	r2, r6
 8005582:	463b      	mov	r3, r7
 8005584:	4680      	mov	r8, r0
 8005586:	4689      	mov	r9, r1
 8005588:	f7fa fe22 	bl	80001d0 <__aeabi_dsub>
 800558c:	4602      	mov	r2, r0
 800558e:	460b      	mov	r3, r1
 8005590:	4620      	mov	r0, r4
 8005592:	4629      	mov	r1, r5
 8005594:	f7fa fe1c 	bl	80001d0 <__aeabi_dsub>
 8005598:	4642      	mov	r2, r8
 800559a:	4606      	mov	r6, r0
 800559c:	460f      	mov	r7, r1
 800559e:	464b      	mov	r3, r9
 80055a0:	4640      	mov	r0, r8
 80055a2:	4649      	mov	r1, r9
 80055a4:	f7fa ffcc 	bl	8000540 <__aeabi_dmul>
 80055a8:	a35b      	add	r3, pc, #364	; (adr r3, 8005718 <__ieee754_pow+0x9d0>)
 80055aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ae:	4604      	mov	r4, r0
 80055b0:	460d      	mov	r5, r1
 80055b2:	f7fa ffc5 	bl	8000540 <__aeabi_dmul>
 80055b6:	a35a      	add	r3, pc, #360	; (adr r3, 8005720 <__ieee754_pow+0x9d8>)
 80055b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055bc:	f7fa fe08 	bl	80001d0 <__aeabi_dsub>
 80055c0:	4622      	mov	r2, r4
 80055c2:	462b      	mov	r3, r5
 80055c4:	f7fa ffbc 	bl	8000540 <__aeabi_dmul>
 80055c8:	a357      	add	r3, pc, #348	; (adr r3, 8005728 <__ieee754_pow+0x9e0>)
 80055ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ce:	f7fa fe01 	bl	80001d4 <__adddf3>
 80055d2:	4622      	mov	r2, r4
 80055d4:	462b      	mov	r3, r5
 80055d6:	f7fa ffb3 	bl	8000540 <__aeabi_dmul>
 80055da:	a355      	add	r3, pc, #340	; (adr r3, 8005730 <__ieee754_pow+0x9e8>)
 80055dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e0:	f7fa fdf6 	bl	80001d0 <__aeabi_dsub>
 80055e4:	4622      	mov	r2, r4
 80055e6:	462b      	mov	r3, r5
 80055e8:	f7fa ffaa 	bl	8000540 <__aeabi_dmul>
 80055ec:	a352      	add	r3, pc, #328	; (adr r3, 8005738 <__ieee754_pow+0x9f0>)
 80055ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055f2:	f7fa fdef 	bl	80001d4 <__adddf3>
 80055f6:	4622      	mov	r2, r4
 80055f8:	462b      	mov	r3, r5
 80055fa:	f7fa ffa1 	bl	8000540 <__aeabi_dmul>
 80055fe:	4602      	mov	r2, r0
 8005600:	460b      	mov	r3, r1
 8005602:	4640      	mov	r0, r8
 8005604:	4649      	mov	r1, r9
 8005606:	f7fa fde3 	bl	80001d0 <__aeabi_dsub>
 800560a:	4604      	mov	r4, r0
 800560c:	460d      	mov	r5, r1
 800560e:	4602      	mov	r2, r0
 8005610:	460b      	mov	r3, r1
 8005612:	4640      	mov	r0, r8
 8005614:	4649      	mov	r1, r9
 8005616:	f7fa ff93 	bl	8000540 <__aeabi_dmul>
 800561a:	2200      	movs	r2, #0
 800561c:	e9cd 0100 	strd	r0, r1, [sp]
 8005620:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005624:	4620      	mov	r0, r4
 8005626:	4629      	mov	r1, r5
 8005628:	f7fa fdd2 	bl	80001d0 <__aeabi_dsub>
 800562c:	4602      	mov	r2, r0
 800562e:	460b      	mov	r3, r1
 8005630:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005634:	f7fb f8ae 	bl	8000794 <__aeabi_ddiv>
 8005638:	4632      	mov	r2, r6
 800563a:	4604      	mov	r4, r0
 800563c:	460d      	mov	r5, r1
 800563e:	463b      	mov	r3, r7
 8005640:	4640      	mov	r0, r8
 8005642:	4649      	mov	r1, r9
 8005644:	f7fa ff7c 	bl	8000540 <__aeabi_dmul>
 8005648:	4632      	mov	r2, r6
 800564a:	463b      	mov	r3, r7
 800564c:	f7fa fdc2 	bl	80001d4 <__adddf3>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	4620      	mov	r0, r4
 8005656:	4629      	mov	r1, r5
 8005658:	f7fa fdba 	bl	80001d0 <__aeabi_dsub>
 800565c:	4642      	mov	r2, r8
 800565e:	464b      	mov	r3, r9
 8005660:	f7fa fdb6 	bl	80001d0 <__aeabi_dsub>
 8005664:	4602      	mov	r2, r0
 8005666:	460b      	mov	r3, r1
 8005668:	2000      	movs	r0, #0
 800566a:	4939      	ldr	r1, [pc, #228]	; (8005750 <__ieee754_pow+0xa08>)
 800566c:	f7fa fdb0 	bl	80001d0 <__aeabi_dsub>
 8005670:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8005674:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	da2f      	bge.n	80056de <__ieee754_pow+0x996>
 800567e:	4650      	mov	r0, sl
 8005680:	ec43 2b10 	vmov	d0, r2, r3
 8005684:	f000 f9c0 	bl	8005a08 <scalbn>
 8005688:	ec51 0b10 	vmov	r0, r1, d0
 800568c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005690:	f7ff bbf1 	b.w	8004e76 <__ieee754_pow+0x12e>
 8005694:	4b2f      	ldr	r3, [pc, #188]	; (8005754 <__ieee754_pow+0xa0c>)
 8005696:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800569a:	429e      	cmp	r6, r3
 800569c:	f77f af0c 	ble.w	80054b8 <__ieee754_pow+0x770>
 80056a0:	4b2d      	ldr	r3, [pc, #180]	; (8005758 <__ieee754_pow+0xa10>)
 80056a2:	440b      	add	r3, r1
 80056a4:	4303      	orrs	r3, r0
 80056a6:	d00b      	beq.n	80056c0 <__ieee754_pow+0x978>
 80056a8:	a325      	add	r3, pc, #148	; (adr r3, 8005740 <__ieee754_pow+0x9f8>)
 80056aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056ae:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80056b2:	f7fa ff45 	bl	8000540 <__aeabi_dmul>
 80056b6:	a322      	add	r3, pc, #136	; (adr r3, 8005740 <__ieee754_pow+0x9f8>)
 80056b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80056bc:	f7ff bbdb 	b.w	8004e76 <__ieee754_pow+0x12e>
 80056c0:	4622      	mov	r2, r4
 80056c2:	462b      	mov	r3, r5
 80056c4:	f7fa fd84 	bl	80001d0 <__aeabi_dsub>
 80056c8:	4642      	mov	r2, r8
 80056ca:	464b      	mov	r3, r9
 80056cc:	f7fb f9be 	bl	8000a4c <__aeabi_dcmpge>
 80056d0:	2800      	cmp	r0, #0
 80056d2:	f43f aef1 	beq.w	80054b8 <__ieee754_pow+0x770>
 80056d6:	e7e7      	b.n	80056a8 <__ieee754_pow+0x960>
 80056d8:	f04f 0a00 	mov.w	sl, #0
 80056dc:	e718      	b.n	8005510 <__ieee754_pow+0x7c8>
 80056de:	4621      	mov	r1, r4
 80056e0:	e7d4      	b.n	800568c <__ieee754_pow+0x944>
 80056e2:	2000      	movs	r0, #0
 80056e4:	491a      	ldr	r1, [pc, #104]	; (8005750 <__ieee754_pow+0xa08>)
 80056e6:	f7ff bb8f 	b.w	8004e08 <__ieee754_pow+0xc0>
 80056ea:	e9dd 0100 	ldrd	r0, r1, [sp]
 80056ee:	f7ff bb8b 	b.w	8004e08 <__ieee754_pow+0xc0>
 80056f2:	4630      	mov	r0, r6
 80056f4:	4639      	mov	r1, r7
 80056f6:	f7ff bb87 	b.w	8004e08 <__ieee754_pow+0xc0>
 80056fa:	4693      	mov	fp, r2
 80056fc:	f7ff bb98 	b.w	8004e30 <__ieee754_pow+0xe8>
 8005700:	00000000 	.word	0x00000000
 8005704:	3fe62e43 	.word	0x3fe62e43
 8005708:	fefa39ef 	.word	0xfefa39ef
 800570c:	3fe62e42 	.word	0x3fe62e42
 8005710:	0ca86c39 	.word	0x0ca86c39
 8005714:	be205c61 	.word	0xbe205c61
 8005718:	72bea4d0 	.word	0x72bea4d0
 800571c:	3e663769 	.word	0x3e663769
 8005720:	c5d26bf1 	.word	0xc5d26bf1
 8005724:	3ebbbd41 	.word	0x3ebbbd41
 8005728:	af25de2c 	.word	0xaf25de2c
 800572c:	3f11566a 	.word	0x3f11566a
 8005730:	16bebd93 	.word	0x16bebd93
 8005734:	3f66c16c 	.word	0x3f66c16c
 8005738:	5555553e 	.word	0x5555553e
 800573c:	3fc55555 	.word	0x3fc55555
 8005740:	c2f8f359 	.word	0xc2f8f359
 8005744:	01a56e1f 	.word	0x01a56e1f
 8005748:	3fe00000 	.word	0x3fe00000
 800574c:	000fffff 	.word	0x000fffff
 8005750:	3ff00000 	.word	0x3ff00000
 8005754:	4090cbff 	.word	0x4090cbff
 8005758:	3f6f3400 	.word	0x3f6f3400
 800575c:	652b82fe 	.word	0x652b82fe
 8005760:	3c971547 	.word	0x3c971547

08005764 <__ieee754_sqrt>:
 8005764:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005768:	4955      	ldr	r1, [pc, #340]	; (80058c0 <__ieee754_sqrt+0x15c>)
 800576a:	ec55 4b10 	vmov	r4, r5, d0
 800576e:	43a9      	bics	r1, r5
 8005770:	462b      	mov	r3, r5
 8005772:	462a      	mov	r2, r5
 8005774:	d112      	bne.n	800579c <__ieee754_sqrt+0x38>
 8005776:	ee10 2a10 	vmov	r2, s0
 800577a:	ee10 0a10 	vmov	r0, s0
 800577e:	4629      	mov	r1, r5
 8005780:	f7fa fede 	bl	8000540 <__aeabi_dmul>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	4620      	mov	r0, r4
 800578a:	4629      	mov	r1, r5
 800578c:	f7fa fd22 	bl	80001d4 <__adddf3>
 8005790:	4604      	mov	r4, r0
 8005792:	460d      	mov	r5, r1
 8005794:	ec45 4b10 	vmov	d0, r4, r5
 8005798:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800579c:	2d00      	cmp	r5, #0
 800579e:	ee10 0a10 	vmov	r0, s0
 80057a2:	4621      	mov	r1, r4
 80057a4:	dc0f      	bgt.n	80057c6 <__ieee754_sqrt+0x62>
 80057a6:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80057aa:	4330      	orrs	r0, r6
 80057ac:	d0f2      	beq.n	8005794 <__ieee754_sqrt+0x30>
 80057ae:	b155      	cbz	r5, 80057c6 <__ieee754_sqrt+0x62>
 80057b0:	ee10 2a10 	vmov	r2, s0
 80057b4:	4620      	mov	r0, r4
 80057b6:	4629      	mov	r1, r5
 80057b8:	f7fa fd0a 	bl	80001d0 <__aeabi_dsub>
 80057bc:	4602      	mov	r2, r0
 80057be:	460b      	mov	r3, r1
 80057c0:	f7fa ffe8 	bl	8000794 <__aeabi_ddiv>
 80057c4:	e7e4      	b.n	8005790 <__ieee754_sqrt+0x2c>
 80057c6:	151b      	asrs	r3, r3, #20
 80057c8:	d073      	beq.n	80058b2 <__ieee754_sqrt+0x14e>
 80057ca:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80057ce:	07dd      	lsls	r5, r3, #31
 80057d0:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80057d4:	bf48      	it	mi
 80057d6:	0fc8      	lsrmi	r0, r1, #31
 80057d8:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80057dc:	bf44      	itt	mi
 80057de:	0049      	lslmi	r1, r1, #1
 80057e0:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80057e4:	2500      	movs	r5, #0
 80057e6:	1058      	asrs	r0, r3, #1
 80057e8:	0fcb      	lsrs	r3, r1, #31
 80057ea:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80057ee:	0049      	lsls	r1, r1, #1
 80057f0:	2316      	movs	r3, #22
 80057f2:	462c      	mov	r4, r5
 80057f4:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80057f8:	19a7      	adds	r7, r4, r6
 80057fa:	4297      	cmp	r7, r2
 80057fc:	bfde      	ittt	le
 80057fe:	19bc      	addle	r4, r7, r6
 8005800:	1bd2      	suble	r2, r2, r7
 8005802:	19ad      	addle	r5, r5, r6
 8005804:	0fcf      	lsrs	r7, r1, #31
 8005806:	3b01      	subs	r3, #1
 8005808:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 800580c:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005810:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005814:	d1f0      	bne.n	80057f8 <__ieee754_sqrt+0x94>
 8005816:	f04f 0c20 	mov.w	ip, #32
 800581a:	469e      	mov	lr, r3
 800581c:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005820:	42a2      	cmp	r2, r4
 8005822:	eb06 070e 	add.w	r7, r6, lr
 8005826:	dc02      	bgt.n	800582e <__ieee754_sqrt+0xca>
 8005828:	d112      	bne.n	8005850 <__ieee754_sqrt+0xec>
 800582a:	428f      	cmp	r7, r1
 800582c:	d810      	bhi.n	8005850 <__ieee754_sqrt+0xec>
 800582e:	2f00      	cmp	r7, #0
 8005830:	eb07 0e06 	add.w	lr, r7, r6
 8005834:	da42      	bge.n	80058bc <__ieee754_sqrt+0x158>
 8005836:	f1be 0f00 	cmp.w	lr, #0
 800583a:	db3f      	blt.n	80058bc <__ieee754_sqrt+0x158>
 800583c:	f104 0801 	add.w	r8, r4, #1
 8005840:	1b12      	subs	r2, r2, r4
 8005842:	428f      	cmp	r7, r1
 8005844:	bf88      	it	hi
 8005846:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800584a:	1bc9      	subs	r1, r1, r7
 800584c:	4433      	add	r3, r6
 800584e:	4644      	mov	r4, r8
 8005850:	0052      	lsls	r2, r2, #1
 8005852:	f1bc 0c01 	subs.w	ip, ip, #1
 8005856:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 800585a:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800585e:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005862:	d1dd      	bne.n	8005820 <__ieee754_sqrt+0xbc>
 8005864:	430a      	orrs	r2, r1
 8005866:	d006      	beq.n	8005876 <__ieee754_sqrt+0x112>
 8005868:	1c5c      	adds	r4, r3, #1
 800586a:	bf13      	iteet	ne
 800586c:	3301      	addne	r3, #1
 800586e:	3501      	addeq	r5, #1
 8005870:	4663      	moveq	r3, ip
 8005872:	f023 0301 	bicne.w	r3, r3, #1
 8005876:	106a      	asrs	r2, r5, #1
 8005878:	085b      	lsrs	r3, r3, #1
 800587a:	07e9      	lsls	r1, r5, #31
 800587c:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005880:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8005884:	bf48      	it	mi
 8005886:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 800588a:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 800588e:	461c      	mov	r4, r3
 8005890:	e780      	b.n	8005794 <__ieee754_sqrt+0x30>
 8005892:	0aca      	lsrs	r2, r1, #11
 8005894:	3815      	subs	r0, #21
 8005896:	0549      	lsls	r1, r1, #21
 8005898:	2a00      	cmp	r2, #0
 800589a:	d0fa      	beq.n	8005892 <__ieee754_sqrt+0x12e>
 800589c:	02d6      	lsls	r6, r2, #11
 800589e:	d50a      	bpl.n	80058b6 <__ieee754_sqrt+0x152>
 80058a0:	f1c3 0420 	rsb	r4, r3, #32
 80058a4:	fa21 f404 	lsr.w	r4, r1, r4
 80058a8:	1e5d      	subs	r5, r3, #1
 80058aa:	4099      	lsls	r1, r3
 80058ac:	4322      	orrs	r2, r4
 80058ae:	1b43      	subs	r3, r0, r5
 80058b0:	e78b      	b.n	80057ca <__ieee754_sqrt+0x66>
 80058b2:	4618      	mov	r0, r3
 80058b4:	e7f0      	b.n	8005898 <__ieee754_sqrt+0x134>
 80058b6:	0052      	lsls	r2, r2, #1
 80058b8:	3301      	adds	r3, #1
 80058ba:	e7ef      	b.n	800589c <__ieee754_sqrt+0x138>
 80058bc:	46a0      	mov	r8, r4
 80058be:	e7bf      	b.n	8005840 <__ieee754_sqrt+0xdc>
 80058c0:	7ff00000 	.word	0x7ff00000

080058c4 <fabs>:
 80058c4:	ec51 0b10 	vmov	r0, r1, d0
 80058c8:	ee10 2a10 	vmov	r2, s0
 80058cc:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80058d0:	ec43 2b10 	vmov	d0, r2, r3
 80058d4:	4770      	bx	lr

080058d6 <finite>:
 80058d6:	ee10 3a90 	vmov	r3, s1
 80058da:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 80058de:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 80058e2:	0fc0      	lsrs	r0, r0, #31
 80058e4:	4770      	bx	lr

080058e6 <matherr>:
 80058e6:	2000      	movs	r0, #0
 80058e8:	4770      	bx	lr
 80058ea:	0000      	movs	r0, r0
 80058ec:	0000      	movs	r0, r0
	...

080058f0 <nan>:
 80058f0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80058f8 <nan+0x8>
 80058f4:	4770      	bx	lr
 80058f6:	bf00      	nop
 80058f8:	00000000 	.word	0x00000000
 80058fc:	7ff80000 	.word	0x7ff80000

08005900 <rint>:
 8005900:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005902:	ec51 0b10 	vmov	r0, r1, d0
 8005906:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800590a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800590e:	2e13      	cmp	r6, #19
 8005910:	460b      	mov	r3, r1
 8005912:	ee10 4a10 	vmov	r4, s0
 8005916:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800591a:	dc56      	bgt.n	80059ca <rint+0xca>
 800591c:	2e00      	cmp	r6, #0
 800591e:	da2b      	bge.n	8005978 <rint+0x78>
 8005920:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005924:	4302      	orrs	r2, r0
 8005926:	d023      	beq.n	8005970 <rint+0x70>
 8005928:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800592c:	4302      	orrs	r2, r0
 800592e:	4254      	negs	r4, r2
 8005930:	4314      	orrs	r4, r2
 8005932:	0c4b      	lsrs	r3, r1, #17
 8005934:	0b24      	lsrs	r4, r4, #12
 8005936:	045b      	lsls	r3, r3, #17
 8005938:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800593c:	ea44 0103 	orr.w	r1, r4, r3
 8005940:	460b      	mov	r3, r1
 8005942:	492f      	ldr	r1, [pc, #188]	; (8005a00 <rint+0x100>)
 8005944:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 8005948:	e9d1 6700 	ldrd	r6, r7, [r1]
 800594c:	4602      	mov	r2, r0
 800594e:	4639      	mov	r1, r7
 8005950:	4630      	mov	r0, r6
 8005952:	f7fa fc3f 	bl	80001d4 <__adddf3>
 8005956:	e9cd 0100 	strd	r0, r1, [sp]
 800595a:	463b      	mov	r3, r7
 800595c:	4632      	mov	r2, r6
 800595e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005962:	f7fa fc35 	bl	80001d0 <__aeabi_dsub>
 8005966:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800596a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800596e:	4639      	mov	r1, r7
 8005970:	ec41 0b10 	vmov	d0, r0, r1
 8005974:	b003      	add	sp, #12
 8005976:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005978:	4a22      	ldr	r2, [pc, #136]	; (8005a04 <rint+0x104>)
 800597a:	4132      	asrs	r2, r6
 800597c:	ea01 0702 	and.w	r7, r1, r2
 8005980:	4307      	orrs	r7, r0
 8005982:	d0f5      	beq.n	8005970 <rint+0x70>
 8005984:	0852      	lsrs	r2, r2, #1
 8005986:	4011      	ands	r1, r2
 8005988:	430c      	orrs	r4, r1
 800598a:	d00b      	beq.n	80059a4 <rint+0xa4>
 800598c:	ea23 0202 	bic.w	r2, r3, r2
 8005990:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005994:	2e13      	cmp	r6, #19
 8005996:	fa43 f306 	asr.w	r3, r3, r6
 800599a:	bf0c      	ite	eq
 800599c:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 80059a0:	2400      	movne	r4, #0
 80059a2:	4313      	orrs	r3, r2
 80059a4:	4916      	ldr	r1, [pc, #88]	; (8005a00 <rint+0x100>)
 80059a6:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 80059aa:	4622      	mov	r2, r4
 80059ac:	e9d5 4500 	ldrd	r4, r5, [r5]
 80059b0:	4620      	mov	r0, r4
 80059b2:	4629      	mov	r1, r5
 80059b4:	f7fa fc0e 	bl	80001d4 <__adddf3>
 80059b8:	e9cd 0100 	strd	r0, r1, [sp]
 80059bc:	4622      	mov	r2, r4
 80059be:	462b      	mov	r3, r5
 80059c0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059c4:	f7fa fc04 	bl	80001d0 <__aeabi_dsub>
 80059c8:	e7d2      	b.n	8005970 <rint+0x70>
 80059ca:	2e33      	cmp	r6, #51	; 0x33
 80059cc:	dd07      	ble.n	80059de <rint+0xde>
 80059ce:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 80059d2:	d1cd      	bne.n	8005970 <rint+0x70>
 80059d4:	ee10 2a10 	vmov	r2, s0
 80059d8:	f7fa fbfc 	bl	80001d4 <__adddf3>
 80059dc:	e7c8      	b.n	8005970 <rint+0x70>
 80059de:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 80059e2:	f04f 32ff 	mov.w	r2, #4294967295
 80059e6:	40f2      	lsrs	r2, r6
 80059e8:	4210      	tst	r0, r2
 80059ea:	d0c1      	beq.n	8005970 <rint+0x70>
 80059ec:	0852      	lsrs	r2, r2, #1
 80059ee:	4210      	tst	r0, r2
 80059f0:	bf1f      	itttt	ne
 80059f2:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 80059f6:	ea20 0202 	bicne.w	r2, r0, r2
 80059fa:	4134      	asrne	r4, r6
 80059fc:	4314      	orrne	r4, r2
 80059fe:	e7d1      	b.n	80059a4 <rint+0xa4>
 8005a00:	08005b88 	.word	0x08005b88
 8005a04:	000fffff 	.word	0x000fffff

08005a08 <scalbn>:
 8005a08:	b570      	push	{r4, r5, r6, lr}
 8005a0a:	ec55 4b10 	vmov	r4, r5, d0
 8005a0e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005a12:	4606      	mov	r6, r0
 8005a14:	462b      	mov	r3, r5
 8005a16:	b9aa      	cbnz	r2, 8005a44 <scalbn+0x3c>
 8005a18:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005a1c:	4323      	orrs	r3, r4
 8005a1e:	d03b      	beq.n	8005a98 <scalbn+0x90>
 8005a20:	4b31      	ldr	r3, [pc, #196]	; (8005ae8 <scalbn+0xe0>)
 8005a22:	4629      	mov	r1, r5
 8005a24:	2200      	movs	r2, #0
 8005a26:	ee10 0a10 	vmov	r0, s0
 8005a2a:	f7fa fd89 	bl	8000540 <__aeabi_dmul>
 8005a2e:	4b2f      	ldr	r3, [pc, #188]	; (8005aec <scalbn+0xe4>)
 8005a30:	429e      	cmp	r6, r3
 8005a32:	4604      	mov	r4, r0
 8005a34:	460d      	mov	r5, r1
 8005a36:	da12      	bge.n	8005a5e <scalbn+0x56>
 8005a38:	a327      	add	r3, pc, #156	; (adr r3, 8005ad8 <scalbn+0xd0>)
 8005a3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a3e:	f7fa fd7f 	bl	8000540 <__aeabi_dmul>
 8005a42:	e009      	b.n	8005a58 <scalbn+0x50>
 8005a44:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005a48:	428a      	cmp	r2, r1
 8005a4a:	d10c      	bne.n	8005a66 <scalbn+0x5e>
 8005a4c:	ee10 2a10 	vmov	r2, s0
 8005a50:	4620      	mov	r0, r4
 8005a52:	4629      	mov	r1, r5
 8005a54:	f7fa fbbe 	bl	80001d4 <__adddf3>
 8005a58:	4604      	mov	r4, r0
 8005a5a:	460d      	mov	r5, r1
 8005a5c:	e01c      	b.n	8005a98 <scalbn+0x90>
 8005a5e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005a62:	460b      	mov	r3, r1
 8005a64:	3a36      	subs	r2, #54	; 0x36
 8005a66:	4432      	add	r2, r6
 8005a68:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005a6c:	428a      	cmp	r2, r1
 8005a6e:	dd0b      	ble.n	8005a88 <scalbn+0x80>
 8005a70:	ec45 4b11 	vmov	d1, r4, r5
 8005a74:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8005ae0 <scalbn+0xd8>
 8005a78:	f000 f83c 	bl	8005af4 <copysign>
 8005a7c:	a318      	add	r3, pc, #96	; (adr r3, 8005ae0 <scalbn+0xd8>)
 8005a7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a82:	ec51 0b10 	vmov	r0, r1, d0
 8005a86:	e7da      	b.n	8005a3e <scalbn+0x36>
 8005a88:	2a00      	cmp	r2, #0
 8005a8a:	dd08      	ble.n	8005a9e <scalbn+0x96>
 8005a8c:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005a90:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005a94:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005a98:	ec45 4b10 	vmov	d0, r4, r5
 8005a9c:	bd70      	pop	{r4, r5, r6, pc}
 8005a9e:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005aa2:	da0d      	bge.n	8005ac0 <scalbn+0xb8>
 8005aa4:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005aa8:	429e      	cmp	r6, r3
 8005aaa:	ec45 4b11 	vmov	d1, r4, r5
 8005aae:	dce1      	bgt.n	8005a74 <scalbn+0x6c>
 8005ab0:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8005ad8 <scalbn+0xd0>
 8005ab4:	f000 f81e 	bl	8005af4 <copysign>
 8005ab8:	a307      	add	r3, pc, #28	; (adr r3, 8005ad8 <scalbn+0xd0>)
 8005aba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005abe:	e7e0      	b.n	8005a82 <scalbn+0x7a>
 8005ac0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005ac4:	3236      	adds	r2, #54	; 0x36
 8005ac6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005aca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005ace:	4620      	mov	r0, r4
 8005ad0:	4629      	mov	r1, r5
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	4b06      	ldr	r3, [pc, #24]	; (8005af0 <scalbn+0xe8>)
 8005ad6:	e7b2      	b.n	8005a3e <scalbn+0x36>
 8005ad8:	c2f8f359 	.word	0xc2f8f359
 8005adc:	01a56e1f 	.word	0x01a56e1f
 8005ae0:	8800759c 	.word	0x8800759c
 8005ae4:	7e37e43c 	.word	0x7e37e43c
 8005ae8:	43500000 	.word	0x43500000
 8005aec:	ffff3cb0 	.word	0xffff3cb0
 8005af0:	3c900000 	.word	0x3c900000

08005af4 <copysign>:
 8005af4:	ec51 0b10 	vmov	r0, r1, d0
 8005af8:	ee11 0a90 	vmov	r0, s3
 8005afc:	ee10 2a10 	vmov	r2, s0
 8005b00:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8005b04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8005b08:	ea41 0300 	orr.w	r3, r1, r0
 8005b0c:	ec43 2b10 	vmov	d0, r2, r3
 8005b10:	4770      	bx	lr
	...

08005b14 <_init>:
 8005b14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b16:	bf00      	nop
 8005b18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b1a:	bc08      	pop	{r3}
 8005b1c:	469e      	mov	lr, r3
 8005b1e:	4770      	bx	lr

08005b20 <_fini>:
 8005b20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005b22:	bf00      	nop
 8005b24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005b26:	bc08      	pop	{r3}
 8005b28:	469e      	mov	lr, r3
 8005b2a:	4770      	bx	lr
