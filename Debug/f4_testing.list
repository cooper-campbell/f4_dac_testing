
f4_testing.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000612c  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000238  080062b8  080062b8  000162b8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064f0  080064f0  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  080064f0  080064f0  000164f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064f8  080064f8  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064f8  080064f8  000164f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064fc  080064fc  000164fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08006500  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003714  20000074  08006574  00020074  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20003788  08006574  00023788  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000e3d2  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000024e3  00000000  00000000  0002e476  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000bb0  00000000  00000000  00030960  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000a88  00000000  00000000  00031510  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00021973  00000000  00000000  00031f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000b31f  00000000  00000000  0005390b  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000c5ae9  00000000  00000000  0005ec2a  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00124713  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034e8  00000000  00000000  00124790  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000074 	.word	0x20000074
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800629c 	.word	0x0800629c

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000078 	.word	0x20000078
 80001c4:	0800629c 	.word	0x0800629c

080001c8 <__aeabi_drsub>:
 80001c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001cc:	e002      	b.n	80001d4 <__adddf3>
 80001ce:	bf00      	nop

080001d0 <__aeabi_dsub>:
 80001d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001d4 <__adddf3>:
 80001d4:	b530      	push	{r4, r5, lr}
 80001d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001de:	ea94 0f05 	teq	r4, r5
 80001e2:	bf08      	it	eq
 80001e4:	ea90 0f02 	teqeq	r0, r2
 80001e8:	bf1f      	itttt	ne
 80001ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001fa:	f000 80e2 	beq.w	80003c2 <__adddf3+0x1ee>
 80001fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000202:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000206:	bfb8      	it	lt
 8000208:	426d      	neglt	r5, r5
 800020a:	dd0c      	ble.n	8000226 <__adddf3+0x52>
 800020c:	442c      	add	r4, r5
 800020e:	ea80 0202 	eor.w	r2, r0, r2
 8000212:	ea81 0303 	eor.w	r3, r1, r3
 8000216:	ea82 0000 	eor.w	r0, r2, r0
 800021a:	ea83 0101 	eor.w	r1, r3, r1
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	2d36      	cmp	r5, #54	; 0x36
 8000228:	bf88      	it	hi
 800022a:	bd30      	pophi	{r4, r5, pc}
 800022c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000230:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000234:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000238:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800023c:	d002      	beq.n	8000244 <__adddf3+0x70>
 800023e:	4240      	negs	r0, r0
 8000240:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000244:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000248:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800024c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000250:	d002      	beq.n	8000258 <__adddf3+0x84>
 8000252:	4252      	negs	r2, r2
 8000254:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000258:	ea94 0f05 	teq	r4, r5
 800025c:	f000 80a7 	beq.w	80003ae <__adddf3+0x1da>
 8000260:	f1a4 0401 	sub.w	r4, r4, #1
 8000264:	f1d5 0e20 	rsbs	lr, r5, #32
 8000268:	db0d      	blt.n	8000286 <__adddf3+0xb2>
 800026a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800026e:	fa22 f205 	lsr.w	r2, r2, r5
 8000272:	1880      	adds	r0, r0, r2
 8000274:	f141 0100 	adc.w	r1, r1, #0
 8000278:	fa03 f20e 	lsl.w	r2, r3, lr
 800027c:	1880      	adds	r0, r0, r2
 800027e:	fa43 f305 	asr.w	r3, r3, r5
 8000282:	4159      	adcs	r1, r3
 8000284:	e00e      	b.n	80002a4 <__adddf3+0xd0>
 8000286:	f1a5 0520 	sub.w	r5, r5, #32
 800028a:	f10e 0e20 	add.w	lr, lr, #32
 800028e:	2a01      	cmp	r2, #1
 8000290:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000294:	bf28      	it	cs
 8000296:	f04c 0c02 	orrcs.w	ip, ip, #2
 800029a:	fa43 f305 	asr.w	r3, r3, r5
 800029e:	18c0      	adds	r0, r0, r3
 80002a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002a8:	d507      	bpl.n	80002ba <__adddf3+0xe6>
 80002aa:	f04f 0e00 	mov.w	lr, #0
 80002ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80002b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002be:	d31b      	bcc.n	80002f8 <__adddf3+0x124>
 80002c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002c4:	d30c      	bcc.n	80002e0 <__adddf3+0x10c>
 80002c6:	0849      	lsrs	r1, r1, #1
 80002c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002d0:	f104 0401 	add.w	r4, r4, #1
 80002d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002dc:	f080 809a 	bcs.w	8000414 <__adddf3+0x240>
 80002e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002e4:	bf08      	it	eq
 80002e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002ea:	f150 0000 	adcs.w	r0, r0, #0
 80002ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002f2:	ea41 0105 	orr.w	r1, r1, r5
 80002f6:	bd30      	pop	{r4, r5, pc}
 80002f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002fc:	4140      	adcs	r0, r0
 80002fe:	eb41 0101 	adc.w	r1, r1, r1
 8000302:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000306:	f1a4 0401 	sub.w	r4, r4, #1
 800030a:	d1e9      	bne.n	80002e0 <__adddf3+0x10c>
 800030c:	f091 0f00 	teq	r1, #0
 8000310:	bf04      	itt	eq
 8000312:	4601      	moveq	r1, r0
 8000314:	2000      	moveq	r0, #0
 8000316:	fab1 f381 	clz	r3, r1
 800031a:	bf08      	it	eq
 800031c:	3320      	addeq	r3, #32
 800031e:	f1a3 030b 	sub.w	r3, r3, #11
 8000322:	f1b3 0220 	subs.w	r2, r3, #32
 8000326:	da0c      	bge.n	8000342 <__adddf3+0x16e>
 8000328:	320c      	adds	r2, #12
 800032a:	dd08      	ble.n	800033e <__adddf3+0x16a>
 800032c:	f102 0c14 	add.w	ip, r2, #20
 8000330:	f1c2 020c 	rsb	r2, r2, #12
 8000334:	fa01 f00c 	lsl.w	r0, r1, ip
 8000338:	fa21 f102 	lsr.w	r1, r1, r2
 800033c:	e00c      	b.n	8000358 <__adddf3+0x184>
 800033e:	f102 0214 	add.w	r2, r2, #20
 8000342:	bfd8      	it	le
 8000344:	f1c2 0c20 	rsble	ip, r2, #32
 8000348:	fa01 f102 	lsl.w	r1, r1, r2
 800034c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000350:	bfdc      	itt	le
 8000352:	ea41 010c 	orrle.w	r1, r1, ip
 8000356:	4090      	lslle	r0, r2
 8000358:	1ae4      	subs	r4, r4, r3
 800035a:	bfa2      	ittt	ge
 800035c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000360:	4329      	orrge	r1, r5
 8000362:	bd30      	popge	{r4, r5, pc}
 8000364:	ea6f 0404 	mvn.w	r4, r4
 8000368:	3c1f      	subs	r4, #31
 800036a:	da1c      	bge.n	80003a6 <__adddf3+0x1d2>
 800036c:	340c      	adds	r4, #12
 800036e:	dc0e      	bgt.n	800038e <__adddf3+0x1ba>
 8000370:	f104 0414 	add.w	r4, r4, #20
 8000374:	f1c4 0220 	rsb	r2, r4, #32
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f302 	lsl.w	r3, r1, r2
 8000380:	ea40 0003 	orr.w	r0, r0, r3
 8000384:	fa21 f304 	lsr.w	r3, r1, r4
 8000388:	ea45 0103 	orr.w	r1, r5, r3
 800038c:	bd30      	pop	{r4, r5, pc}
 800038e:	f1c4 040c 	rsb	r4, r4, #12
 8000392:	f1c4 0220 	rsb	r2, r4, #32
 8000396:	fa20 f002 	lsr.w	r0, r0, r2
 800039a:	fa01 f304 	lsl.w	r3, r1, r4
 800039e:	ea40 0003 	orr.w	r0, r0, r3
 80003a2:	4629      	mov	r1, r5
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	fa21 f004 	lsr.w	r0, r1, r4
 80003aa:	4629      	mov	r1, r5
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	f094 0f00 	teq	r4, #0
 80003b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003b6:	bf06      	itte	eq
 80003b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003bc:	3401      	addeq	r4, #1
 80003be:	3d01      	subne	r5, #1
 80003c0:	e74e      	b.n	8000260 <__adddf3+0x8c>
 80003c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003c6:	bf18      	it	ne
 80003c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003cc:	d029      	beq.n	8000422 <__adddf3+0x24e>
 80003ce:	ea94 0f05 	teq	r4, r5
 80003d2:	bf08      	it	eq
 80003d4:	ea90 0f02 	teqeq	r0, r2
 80003d8:	d005      	beq.n	80003e6 <__adddf3+0x212>
 80003da:	ea54 0c00 	orrs.w	ip, r4, r0
 80003de:	bf04      	itt	eq
 80003e0:	4619      	moveq	r1, r3
 80003e2:	4610      	moveq	r0, r2
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	ea91 0f03 	teq	r1, r3
 80003ea:	bf1e      	ittt	ne
 80003ec:	2100      	movne	r1, #0
 80003ee:	2000      	movne	r0, #0
 80003f0:	bd30      	popne	{r4, r5, pc}
 80003f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003f6:	d105      	bne.n	8000404 <__adddf3+0x230>
 80003f8:	0040      	lsls	r0, r0, #1
 80003fa:	4149      	adcs	r1, r1
 80003fc:	bf28      	it	cs
 80003fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000402:	bd30      	pop	{r4, r5, pc}
 8000404:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000408:	bf3c      	itt	cc
 800040a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800040e:	bd30      	popcc	{r4, r5, pc}
 8000410:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000414:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd30      	pop	{r4, r5, pc}
 8000422:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000426:	bf1a      	itte	ne
 8000428:	4619      	movne	r1, r3
 800042a:	4610      	movne	r0, r2
 800042c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000430:	bf1c      	itt	ne
 8000432:	460b      	movne	r3, r1
 8000434:	4602      	movne	r2, r0
 8000436:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800043a:	bf06      	itte	eq
 800043c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000440:	ea91 0f03 	teqeq	r1, r3
 8000444:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	bf00      	nop

0800044c <__aeabi_ui2d>:
 800044c:	f090 0f00 	teq	r0, #0
 8000450:	bf04      	itt	eq
 8000452:	2100      	moveq	r1, #0
 8000454:	4770      	bxeq	lr
 8000456:	b530      	push	{r4, r5, lr}
 8000458:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800045c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000460:	f04f 0500 	mov.w	r5, #0
 8000464:	f04f 0100 	mov.w	r1, #0
 8000468:	e750      	b.n	800030c <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_i2d>:
 800046c:	f090 0f00 	teq	r0, #0
 8000470:	bf04      	itt	eq
 8000472:	2100      	moveq	r1, #0
 8000474:	4770      	bxeq	lr
 8000476:	b530      	push	{r4, r5, lr}
 8000478:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800047c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000480:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000484:	bf48      	it	mi
 8000486:	4240      	negmi	r0, r0
 8000488:	f04f 0100 	mov.w	r1, #0
 800048c:	e73e      	b.n	800030c <__adddf3+0x138>
 800048e:	bf00      	nop

08000490 <__aeabi_f2d>:
 8000490:	0042      	lsls	r2, r0, #1
 8000492:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000496:	ea4f 0131 	mov.w	r1, r1, rrx
 800049a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800049e:	bf1f      	itttt	ne
 80004a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ac:	4770      	bxne	lr
 80004ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004b2:	bf08      	it	eq
 80004b4:	4770      	bxeq	lr
 80004b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ba:	bf04      	itt	eq
 80004bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004c0:	4770      	bxeq	lr
 80004c2:	b530      	push	{r4, r5, lr}
 80004c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004d0:	e71c      	b.n	800030c <__adddf3+0x138>
 80004d2:	bf00      	nop

080004d4 <__aeabi_ul2d>:
 80004d4:	ea50 0201 	orrs.w	r2, r0, r1
 80004d8:	bf08      	it	eq
 80004da:	4770      	bxeq	lr
 80004dc:	b530      	push	{r4, r5, lr}
 80004de:	f04f 0500 	mov.w	r5, #0
 80004e2:	e00a      	b.n	80004fa <__aeabi_l2d+0x16>

080004e4 <__aeabi_l2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004f2:	d502      	bpl.n	80004fa <__aeabi_l2d+0x16>
 80004f4:	4240      	negs	r0, r0
 80004f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000502:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000506:	f43f aed8 	beq.w	80002ba <__adddf3+0xe6>
 800050a:	f04f 0203 	mov.w	r2, #3
 800050e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000512:	bf18      	it	ne
 8000514:	3203      	addne	r2, #3
 8000516:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800051a:	bf18      	it	ne
 800051c:	3203      	addne	r2, #3
 800051e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000522:	f1c2 0320 	rsb	r3, r2, #32
 8000526:	fa00 fc03 	lsl.w	ip, r0, r3
 800052a:	fa20 f002 	lsr.w	r0, r0, r2
 800052e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000532:	ea40 000e 	orr.w	r0, r0, lr
 8000536:	fa21 f102 	lsr.w	r1, r1, r2
 800053a:	4414      	add	r4, r2
 800053c:	e6bd      	b.n	80002ba <__adddf3+0xe6>
 800053e:	bf00      	nop

08000540 <__aeabi_dmul>:
 8000540:	b570      	push	{r4, r5, r6, lr}
 8000542:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000546:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800054a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800054e:	bf1d      	ittte	ne
 8000550:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000554:	ea94 0f0c 	teqne	r4, ip
 8000558:	ea95 0f0c 	teqne	r5, ip
 800055c:	f000 f8de 	bleq	800071c <__aeabi_dmul+0x1dc>
 8000560:	442c      	add	r4, r5
 8000562:	ea81 0603 	eor.w	r6, r1, r3
 8000566:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800056a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800056e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000572:	bf18      	it	ne
 8000574:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000578:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800057c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000580:	d038      	beq.n	80005f4 <__aeabi_dmul+0xb4>
 8000582:	fba0 ce02 	umull	ip, lr, r0, r2
 8000586:	f04f 0500 	mov.w	r5, #0
 800058a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800058e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000592:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000596:	f04f 0600 	mov.w	r6, #0
 800059a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800059e:	f09c 0f00 	teq	ip, #0
 80005a2:	bf18      	it	ne
 80005a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005b4:	d204      	bcs.n	80005c0 <__aeabi_dmul+0x80>
 80005b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ba:	416d      	adcs	r5, r5
 80005bc:	eb46 0606 	adc.w	r6, r6, r6
 80005c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005d8:	bf88      	it	hi
 80005da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005de:	d81e      	bhi.n	800061e <__aeabi_dmul+0xde>
 80005e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005e4:	bf08      	it	eq
 80005e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005ea:	f150 0000 	adcs.w	r0, r0, #0
 80005ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005f2:	bd70      	pop	{r4, r5, r6, pc}
 80005f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005f8:	ea46 0101 	orr.w	r1, r6, r1
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	ea81 0103 	eor.w	r1, r1, r3
 8000604:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000608:	bfc2      	ittt	gt
 800060a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800060e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000612:	bd70      	popgt	{r4, r5, r6, pc}
 8000614:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000618:	f04f 0e00 	mov.w	lr, #0
 800061c:	3c01      	subs	r4, #1
 800061e:	f300 80ab 	bgt.w	8000778 <__aeabi_dmul+0x238>
 8000622:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000626:	bfde      	ittt	le
 8000628:	2000      	movle	r0, #0
 800062a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800062e:	bd70      	pople	{r4, r5, r6, pc}
 8000630:	f1c4 0400 	rsb	r4, r4, #0
 8000634:	3c20      	subs	r4, #32
 8000636:	da35      	bge.n	80006a4 <__aeabi_dmul+0x164>
 8000638:	340c      	adds	r4, #12
 800063a:	dc1b      	bgt.n	8000674 <__aeabi_dmul+0x134>
 800063c:	f104 0414 	add.w	r4, r4, #20
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f305 	lsl.w	r3, r0, r5
 8000648:	fa20 f004 	lsr.w	r0, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000658:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800065c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000660:	fa21 f604 	lsr.w	r6, r1, r4
 8000664:	eb42 0106 	adc.w	r1, r2, r6
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f1c4 040c 	rsb	r4, r4, #12
 8000678:	f1c4 0520 	rsb	r5, r4, #32
 800067c:	fa00 f304 	lsl.w	r3, r0, r4
 8000680:	fa20 f005 	lsr.w	r0, r0, r5
 8000684:	fa01 f204 	lsl.w	r2, r1, r4
 8000688:	ea40 0002 	orr.w	r0, r0, r2
 800068c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000690:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000694:	f141 0100 	adc.w	r1, r1, #0
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f1c4 0520 	rsb	r5, r4, #32
 80006a8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80006b0:	fa20 f304 	lsr.w	r3, r0, r4
 80006b4:	fa01 f205 	lsl.w	r2, r1, r5
 80006b8:	ea43 0302 	orr.w	r3, r3, r2
 80006bc:	fa21 f004 	lsr.w	r0, r1, r4
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c4:	fa21 f204 	lsr.w	r2, r1, r4
 80006c8:	ea20 0002 	bic.w	r0, r0, r2
 80006cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006d4:	bf08      	it	eq
 80006d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006da:	bd70      	pop	{r4, r5, r6, pc}
 80006dc:	f094 0f00 	teq	r4, #0
 80006e0:	d10f      	bne.n	8000702 <__aeabi_dmul+0x1c2>
 80006e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006e6:	0040      	lsls	r0, r0, #1
 80006e8:	eb41 0101 	adc.w	r1, r1, r1
 80006ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006f0:	bf08      	it	eq
 80006f2:	3c01      	subeq	r4, #1
 80006f4:	d0f7      	beq.n	80006e6 <__aeabi_dmul+0x1a6>
 80006f6:	ea41 0106 	orr.w	r1, r1, r6
 80006fa:	f095 0f00 	teq	r5, #0
 80006fe:	bf18      	it	ne
 8000700:	4770      	bxne	lr
 8000702:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000706:	0052      	lsls	r2, r2, #1
 8000708:	eb43 0303 	adc.w	r3, r3, r3
 800070c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000710:	bf08      	it	eq
 8000712:	3d01      	subeq	r5, #1
 8000714:	d0f7      	beq.n	8000706 <__aeabi_dmul+0x1c6>
 8000716:	ea43 0306 	orr.w	r3, r3, r6
 800071a:	4770      	bx	lr
 800071c:	ea94 0f0c 	teq	r4, ip
 8000720:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000724:	bf18      	it	ne
 8000726:	ea95 0f0c 	teqne	r5, ip
 800072a:	d00c      	beq.n	8000746 <__aeabi_dmul+0x206>
 800072c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000730:	bf18      	it	ne
 8000732:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000736:	d1d1      	bne.n	80006dc <__aeabi_dmul+0x19c>
 8000738:	ea81 0103 	eor.w	r1, r1, r3
 800073c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000740:	f04f 0000 	mov.w	r0, #0
 8000744:	bd70      	pop	{r4, r5, r6, pc}
 8000746:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800074a:	bf06      	itte	eq
 800074c:	4610      	moveq	r0, r2
 800074e:	4619      	moveq	r1, r3
 8000750:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000754:	d019      	beq.n	800078a <__aeabi_dmul+0x24a>
 8000756:	ea94 0f0c 	teq	r4, ip
 800075a:	d102      	bne.n	8000762 <__aeabi_dmul+0x222>
 800075c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000760:	d113      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000762:	ea95 0f0c 	teq	r5, ip
 8000766:	d105      	bne.n	8000774 <__aeabi_dmul+0x234>
 8000768:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800076c:	bf1c      	itt	ne
 800076e:	4610      	movne	r0, r2
 8000770:	4619      	movne	r1, r3
 8000772:	d10a      	bne.n	800078a <__aeabi_dmul+0x24a>
 8000774:	ea81 0103 	eor.w	r1, r1, r3
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000780:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000784:	f04f 0000 	mov.w	r0, #0
 8000788:	bd70      	pop	{r4, r5, r6, pc}
 800078a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800078e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000792:	bd70      	pop	{r4, r5, r6, pc}

08000794 <__aeabi_ddiv>:
 8000794:	b570      	push	{r4, r5, r6, lr}
 8000796:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800079a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800079e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007a2:	bf1d      	ittte	ne
 80007a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007a8:	ea94 0f0c 	teqne	r4, ip
 80007ac:	ea95 0f0c 	teqne	r5, ip
 80007b0:	f000 f8a7 	bleq	8000902 <__aeabi_ddiv+0x16e>
 80007b4:	eba4 0405 	sub.w	r4, r4, r5
 80007b8:	ea81 0e03 	eor.w	lr, r1, r3
 80007bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007c4:	f000 8088 	beq.w	80008d8 <__aeabi_ddiv+0x144>
 80007c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007ec:	429d      	cmp	r5, r3
 80007ee:	bf08      	it	eq
 80007f0:	4296      	cmpeq	r6, r2
 80007f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007fa:	d202      	bcs.n	8000802 <__aeabi_ddiv+0x6e>
 80007fc:	085b      	lsrs	r3, r3, #1
 80007fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000802:	1ab6      	subs	r6, r6, r2
 8000804:	eb65 0503 	sbc.w	r5, r5, r3
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000812:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000816:	ebb6 0e02 	subs.w	lr, r6, r2
 800081a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800081e:	bf22      	ittt	cs
 8000820:	1ab6      	subcs	r6, r6, r2
 8000822:	4675      	movcs	r5, lr
 8000824:	ea40 000c 	orrcs.w	r0, r0, ip
 8000828:	085b      	lsrs	r3, r3, #1
 800082a:	ea4f 0232 	mov.w	r2, r2, rrx
 800082e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000832:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000836:	bf22      	ittt	cs
 8000838:	1ab6      	subcs	r6, r6, r2
 800083a:	4675      	movcs	r5, lr
 800083c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000840:	085b      	lsrs	r3, r3, #1
 8000842:	ea4f 0232 	mov.w	r2, r2, rrx
 8000846:	ebb6 0e02 	subs.w	lr, r6, r2
 800084a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800084e:	bf22      	ittt	cs
 8000850:	1ab6      	subcs	r6, r6, r2
 8000852:	4675      	movcs	r5, lr
 8000854:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000858:	085b      	lsrs	r3, r3, #1
 800085a:	ea4f 0232 	mov.w	r2, r2, rrx
 800085e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000862:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000866:	bf22      	ittt	cs
 8000868:	1ab6      	subcs	r6, r6, r2
 800086a:	4675      	movcs	r5, lr
 800086c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000870:	ea55 0e06 	orrs.w	lr, r5, r6
 8000874:	d018      	beq.n	80008a8 <__aeabi_ddiv+0x114>
 8000876:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800087a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800087e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000882:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000886:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800088a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800088e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000892:	d1c0      	bne.n	8000816 <__aeabi_ddiv+0x82>
 8000894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000898:	d10b      	bne.n	80008b2 <__aeabi_ddiv+0x11e>
 800089a:	ea41 0100 	orr.w	r1, r1, r0
 800089e:	f04f 0000 	mov.w	r0, #0
 80008a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008a6:	e7b6      	b.n	8000816 <__aeabi_ddiv+0x82>
 80008a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ac:	bf04      	itt	eq
 80008ae:	4301      	orreq	r1, r0
 80008b0:	2000      	moveq	r0, #0
 80008b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008b6:	bf88      	it	hi
 80008b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008bc:	f63f aeaf 	bhi.w	800061e <__aeabi_dmul+0xde>
 80008c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008c4:	bf04      	itt	eq
 80008c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008ce:	f150 0000 	adcs.w	r0, r0, #0
 80008d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008d6:	bd70      	pop	{r4, r5, r6, pc}
 80008d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008e4:	bfc2      	ittt	gt
 80008e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008ee:	bd70      	popgt	{r4, r5, r6, pc}
 80008f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008f4:	f04f 0e00 	mov.w	lr, #0
 80008f8:	3c01      	subs	r4, #1
 80008fa:	e690      	b.n	800061e <__aeabi_dmul+0xde>
 80008fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000900:	e68d      	b.n	800061e <__aeabi_dmul+0xde>
 8000902:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000906:	ea94 0f0c 	teq	r4, ip
 800090a:	bf08      	it	eq
 800090c:	ea95 0f0c 	teqeq	r5, ip
 8000910:	f43f af3b 	beq.w	800078a <__aeabi_dmul+0x24a>
 8000914:	ea94 0f0c 	teq	r4, ip
 8000918:	d10a      	bne.n	8000930 <__aeabi_ddiv+0x19c>
 800091a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800091e:	f47f af34 	bne.w	800078a <__aeabi_dmul+0x24a>
 8000922:	ea95 0f0c 	teq	r5, ip
 8000926:	f47f af25 	bne.w	8000774 <__aeabi_dmul+0x234>
 800092a:	4610      	mov	r0, r2
 800092c:	4619      	mov	r1, r3
 800092e:	e72c      	b.n	800078a <__aeabi_dmul+0x24a>
 8000930:	ea95 0f0c 	teq	r5, ip
 8000934:	d106      	bne.n	8000944 <__aeabi_ddiv+0x1b0>
 8000936:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800093a:	f43f aefd 	beq.w	8000738 <__aeabi_dmul+0x1f8>
 800093e:	4610      	mov	r0, r2
 8000940:	4619      	mov	r1, r3
 8000942:	e722      	b.n	800078a <__aeabi_dmul+0x24a>
 8000944:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000948:	bf18      	it	ne
 800094a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800094e:	f47f aec5 	bne.w	80006dc <__aeabi_dmul+0x19c>
 8000952:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000956:	f47f af0d 	bne.w	8000774 <__aeabi_dmul+0x234>
 800095a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800095e:	f47f aeeb 	bne.w	8000738 <__aeabi_dmul+0x1f8>
 8000962:	e712      	b.n	800078a <__aeabi_dmul+0x24a>

08000964 <__gedf2>:
 8000964:	f04f 3cff 	mov.w	ip, #4294967295
 8000968:	e006      	b.n	8000978 <__cmpdf2+0x4>
 800096a:	bf00      	nop

0800096c <__ledf2>:
 800096c:	f04f 0c01 	mov.w	ip, #1
 8000970:	e002      	b.n	8000978 <__cmpdf2+0x4>
 8000972:	bf00      	nop

08000974 <__cmpdf2>:
 8000974:	f04f 0c01 	mov.w	ip, #1
 8000978:	f84d cd04 	str.w	ip, [sp, #-4]!
 800097c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000980:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800098e:	d01b      	beq.n	80009c8 <__cmpdf2+0x54>
 8000990:	b001      	add	sp, #4
 8000992:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000996:	bf0c      	ite	eq
 8000998:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800099c:	ea91 0f03 	teqne	r1, r3
 80009a0:	bf02      	ittt	eq
 80009a2:	ea90 0f02 	teqeq	r0, r2
 80009a6:	2000      	moveq	r0, #0
 80009a8:	4770      	bxeq	lr
 80009aa:	f110 0f00 	cmn.w	r0, #0
 80009ae:	ea91 0f03 	teq	r1, r3
 80009b2:	bf58      	it	pl
 80009b4:	4299      	cmppl	r1, r3
 80009b6:	bf08      	it	eq
 80009b8:	4290      	cmpeq	r0, r2
 80009ba:	bf2c      	ite	cs
 80009bc:	17d8      	asrcs	r0, r3, #31
 80009be:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009c2:	f040 0001 	orr.w	r0, r0, #1
 80009c6:	4770      	bx	lr
 80009c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009d0:	d102      	bne.n	80009d8 <__cmpdf2+0x64>
 80009d2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009d6:	d107      	bne.n	80009e8 <__cmpdf2+0x74>
 80009d8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d1d6      	bne.n	8000990 <__cmpdf2+0x1c>
 80009e2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009e6:	d0d3      	beq.n	8000990 <__cmpdf2+0x1c>
 80009e8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop

080009f0 <__aeabi_cdrcmple>:
 80009f0:	4684      	mov	ip, r0
 80009f2:	4610      	mov	r0, r2
 80009f4:	4662      	mov	r2, ip
 80009f6:	468c      	mov	ip, r1
 80009f8:	4619      	mov	r1, r3
 80009fa:	4663      	mov	r3, ip
 80009fc:	e000      	b.n	8000a00 <__aeabi_cdcmpeq>
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdcmpeq>:
 8000a00:	b501      	push	{r0, lr}
 8000a02:	f7ff ffb7 	bl	8000974 <__cmpdf2>
 8000a06:	2800      	cmp	r0, #0
 8000a08:	bf48      	it	mi
 8000a0a:	f110 0f00 	cmnmi.w	r0, #0
 8000a0e:	bd01      	pop	{r0, pc}

08000a10 <__aeabi_dcmpeq>:
 8000a10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a14:	f7ff fff4 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a18:	bf0c      	ite	eq
 8000a1a:	2001      	moveq	r0, #1
 8000a1c:	2000      	movne	r0, #0
 8000a1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a22:	bf00      	nop

08000a24 <__aeabi_dcmplt>:
 8000a24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a28:	f7ff ffea 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a2c:	bf34      	ite	cc
 8000a2e:	2001      	movcc	r0, #1
 8000a30:	2000      	movcs	r0, #0
 8000a32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a36:	bf00      	nop

08000a38 <__aeabi_dcmple>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff ffe0 	bl	8000a00 <__aeabi_cdcmpeq>
 8000a40:	bf94      	ite	ls
 8000a42:	2001      	movls	r0, #1
 8000a44:	2000      	movhi	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmpge>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffce 	bl	80009f0 <__aeabi_cdrcmple>
 8000a54:	bf94      	ite	ls
 8000a56:	2001      	movls	r0, #1
 8000a58:	2000      	movhi	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmpgt>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffc4 	bl	80009f0 <__aeabi_cdrcmple>
 8000a68:	bf34      	ite	cc
 8000a6a:	2001      	movcc	r0, #1
 8000a6c:	2000      	movcs	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpun>:
 8000a74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a7c:	d102      	bne.n	8000a84 <__aeabi_dcmpun+0x10>
 8000a7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a82:	d10a      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x20>
 8000a8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a92:	d102      	bne.n	8000a9a <__aeabi_dcmpun+0x26>
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	f04f 0001 	mov.w	r0, #1
 8000a9e:	4770      	bx	lr

08000aa0 <__aeabi_d2iz>:
 8000aa0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa8:	d215      	bcs.n	8000ad6 <__aeabi_d2iz+0x36>
 8000aaa:	d511      	bpl.n	8000ad0 <__aeabi_d2iz+0x30>
 8000aac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ab0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab4:	d912      	bls.n	8000adc <__aeabi_d2iz+0x3c>
 8000ab6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000abe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ac2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac6:	fa23 f002 	lsr.w	r0, r3, r2
 8000aca:	bf18      	it	ne
 8000acc:	4240      	negne	r0, r0
 8000ace:	4770      	bx	lr
 8000ad0:	f04f 0000 	mov.w	r0, #0
 8000ad4:	4770      	bx	lr
 8000ad6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ada:	d105      	bne.n	8000ae8 <__aeabi_d2iz+0x48>
 8000adc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ae0:	bf08      	it	eq
 8000ae2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae6:	4770      	bx	lr
 8000ae8:	f04f 0000 	mov.w	r0, #0
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_d2uiz>:
 8000af0:	004a      	lsls	r2, r1, #1
 8000af2:	d211      	bcs.n	8000b18 <__aeabi_d2uiz+0x28>
 8000af4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af8:	d211      	bcs.n	8000b1e <__aeabi_d2uiz+0x2e>
 8000afa:	d50d      	bpl.n	8000b18 <__aeabi_d2uiz+0x28>
 8000afc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b04:	d40e      	bmi.n	8000b24 <__aeabi_d2uiz+0x34>
 8000b06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b12:	fa23 f002 	lsr.w	r0, r3, r2
 8000b16:	4770      	bx	lr
 8000b18:	f04f 0000 	mov.w	r0, #0
 8000b1c:	4770      	bx	lr
 8000b1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b22:	d102      	bne.n	8000b2a <__aeabi_d2uiz+0x3a>
 8000b24:	f04f 30ff 	mov.w	r0, #4294967295
 8000b28:	4770      	bx	lr
 8000b2a:	f04f 0000 	mov.w	r0, #0
 8000b2e:	4770      	bx	lr

08000b30 <__aeabi_uldivmod>:
 8000b30:	b953      	cbnz	r3, 8000b48 <__aeabi_uldivmod+0x18>
 8000b32:	b94a      	cbnz	r2, 8000b48 <__aeabi_uldivmod+0x18>
 8000b34:	2900      	cmp	r1, #0
 8000b36:	bf08      	it	eq
 8000b38:	2800      	cmpeq	r0, #0
 8000b3a:	bf1c      	itt	ne
 8000b3c:	f04f 31ff 	movne.w	r1, #4294967295
 8000b40:	f04f 30ff 	movne.w	r0, #4294967295
 8000b44:	f000 b972 	b.w	8000e2c <__aeabi_idiv0>
 8000b48:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b4c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b50:	f000 f806 	bl	8000b60 <__udivmoddi4>
 8000b54:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b58:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b5c:	b004      	add	sp, #16
 8000b5e:	4770      	bx	lr

08000b60 <__udivmoddi4>:
 8000b60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b64:	9e08      	ldr	r6, [sp, #32]
 8000b66:	4604      	mov	r4, r0
 8000b68:	4688      	mov	r8, r1
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d14b      	bne.n	8000c06 <__udivmoddi4+0xa6>
 8000b6e:	428a      	cmp	r2, r1
 8000b70:	4615      	mov	r5, r2
 8000b72:	d967      	bls.n	8000c44 <__udivmoddi4+0xe4>
 8000b74:	fab2 f282 	clz	r2, r2
 8000b78:	b14a      	cbz	r2, 8000b8e <__udivmoddi4+0x2e>
 8000b7a:	f1c2 0720 	rsb	r7, r2, #32
 8000b7e:	fa01 f302 	lsl.w	r3, r1, r2
 8000b82:	fa20 f707 	lsr.w	r7, r0, r7
 8000b86:	4095      	lsls	r5, r2
 8000b88:	ea47 0803 	orr.w	r8, r7, r3
 8000b8c:	4094      	lsls	r4, r2
 8000b8e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000b92:	0c23      	lsrs	r3, r4, #16
 8000b94:	fbb8 f7fe 	udiv	r7, r8, lr
 8000b98:	fa1f fc85 	uxth.w	ip, r5
 8000b9c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000ba0:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ba4:	fb07 f10c 	mul.w	r1, r7, ip
 8000ba8:	4299      	cmp	r1, r3
 8000baa:	d909      	bls.n	8000bc0 <__udivmoddi4+0x60>
 8000bac:	18eb      	adds	r3, r5, r3
 8000bae:	f107 30ff 	add.w	r0, r7, #4294967295
 8000bb2:	f080 811b 	bcs.w	8000dec <__udivmoddi4+0x28c>
 8000bb6:	4299      	cmp	r1, r3
 8000bb8:	f240 8118 	bls.w	8000dec <__udivmoddi4+0x28c>
 8000bbc:	3f02      	subs	r7, #2
 8000bbe:	442b      	add	r3, r5
 8000bc0:	1a5b      	subs	r3, r3, r1
 8000bc2:	b2a4      	uxth	r4, r4
 8000bc4:	fbb3 f0fe 	udiv	r0, r3, lr
 8000bc8:	fb0e 3310 	mls	r3, lr, r0, r3
 8000bcc:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000bd0:	fb00 fc0c 	mul.w	ip, r0, ip
 8000bd4:	45a4      	cmp	ip, r4
 8000bd6:	d909      	bls.n	8000bec <__udivmoddi4+0x8c>
 8000bd8:	192c      	adds	r4, r5, r4
 8000bda:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bde:	f080 8107 	bcs.w	8000df0 <__udivmoddi4+0x290>
 8000be2:	45a4      	cmp	ip, r4
 8000be4:	f240 8104 	bls.w	8000df0 <__udivmoddi4+0x290>
 8000be8:	3802      	subs	r0, #2
 8000bea:	442c      	add	r4, r5
 8000bec:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000bf0:	eba4 040c 	sub.w	r4, r4, ip
 8000bf4:	2700      	movs	r7, #0
 8000bf6:	b11e      	cbz	r6, 8000c00 <__udivmoddi4+0xa0>
 8000bf8:	40d4      	lsrs	r4, r2
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	e9c6 4300 	strd	r4, r3, [r6]
 8000c00:	4639      	mov	r1, r7
 8000c02:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c06:	428b      	cmp	r3, r1
 8000c08:	d909      	bls.n	8000c1e <__udivmoddi4+0xbe>
 8000c0a:	2e00      	cmp	r6, #0
 8000c0c:	f000 80eb 	beq.w	8000de6 <__udivmoddi4+0x286>
 8000c10:	2700      	movs	r7, #0
 8000c12:	e9c6 0100 	strd	r0, r1, [r6]
 8000c16:	4638      	mov	r0, r7
 8000c18:	4639      	mov	r1, r7
 8000c1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1e:	fab3 f783 	clz	r7, r3
 8000c22:	2f00      	cmp	r7, #0
 8000c24:	d147      	bne.n	8000cb6 <__udivmoddi4+0x156>
 8000c26:	428b      	cmp	r3, r1
 8000c28:	d302      	bcc.n	8000c30 <__udivmoddi4+0xd0>
 8000c2a:	4282      	cmp	r2, r0
 8000c2c:	f200 80fa 	bhi.w	8000e24 <__udivmoddi4+0x2c4>
 8000c30:	1a84      	subs	r4, r0, r2
 8000c32:	eb61 0303 	sbc.w	r3, r1, r3
 8000c36:	2001      	movs	r0, #1
 8000c38:	4698      	mov	r8, r3
 8000c3a:	2e00      	cmp	r6, #0
 8000c3c:	d0e0      	beq.n	8000c00 <__udivmoddi4+0xa0>
 8000c3e:	e9c6 4800 	strd	r4, r8, [r6]
 8000c42:	e7dd      	b.n	8000c00 <__udivmoddi4+0xa0>
 8000c44:	b902      	cbnz	r2, 8000c48 <__udivmoddi4+0xe8>
 8000c46:	deff      	udf	#255	; 0xff
 8000c48:	fab2 f282 	clz	r2, r2
 8000c4c:	2a00      	cmp	r2, #0
 8000c4e:	f040 808f 	bne.w	8000d70 <__udivmoddi4+0x210>
 8000c52:	1b49      	subs	r1, r1, r5
 8000c54:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c58:	fa1f f885 	uxth.w	r8, r5
 8000c5c:	2701      	movs	r7, #1
 8000c5e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000c62:	0c23      	lsrs	r3, r4, #16
 8000c64:	fb0e 111c 	mls	r1, lr, ip, r1
 8000c68:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000c6c:	fb08 f10c 	mul.w	r1, r8, ip
 8000c70:	4299      	cmp	r1, r3
 8000c72:	d907      	bls.n	8000c84 <__udivmoddi4+0x124>
 8000c74:	18eb      	adds	r3, r5, r3
 8000c76:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c7a:	d202      	bcs.n	8000c82 <__udivmoddi4+0x122>
 8000c7c:	4299      	cmp	r1, r3
 8000c7e:	f200 80cd 	bhi.w	8000e1c <__udivmoddi4+0x2bc>
 8000c82:	4684      	mov	ip, r0
 8000c84:	1a59      	subs	r1, r3, r1
 8000c86:	b2a3      	uxth	r3, r4
 8000c88:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c8c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000c90:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000c94:	fb08 f800 	mul.w	r8, r8, r0
 8000c98:	45a0      	cmp	r8, r4
 8000c9a:	d907      	bls.n	8000cac <__udivmoddi4+0x14c>
 8000c9c:	192c      	adds	r4, r5, r4
 8000c9e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000ca2:	d202      	bcs.n	8000caa <__udivmoddi4+0x14a>
 8000ca4:	45a0      	cmp	r8, r4
 8000ca6:	f200 80b6 	bhi.w	8000e16 <__udivmoddi4+0x2b6>
 8000caa:	4618      	mov	r0, r3
 8000cac:	eba4 0408 	sub.w	r4, r4, r8
 8000cb0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000cb4:	e79f      	b.n	8000bf6 <__udivmoddi4+0x96>
 8000cb6:	f1c7 0c20 	rsb	ip, r7, #32
 8000cba:	40bb      	lsls	r3, r7
 8000cbc:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000cc0:	ea4e 0e03 	orr.w	lr, lr, r3
 8000cc4:	fa01 f407 	lsl.w	r4, r1, r7
 8000cc8:	fa20 f50c 	lsr.w	r5, r0, ip
 8000ccc:	fa21 f30c 	lsr.w	r3, r1, ip
 8000cd0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000cd4:	4325      	orrs	r5, r4
 8000cd6:	fbb3 f9f8 	udiv	r9, r3, r8
 8000cda:	0c2c      	lsrs	r4, r5, #16
 8000cdc:	fb08 3319 	mls	r3, r8, r9, r3
 8000ce0:	fa1f fa8e 	uxth.w	sl, lr
 8000ce4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000ce8:	fb09 f40a 	mul.w	r4, r9, sl
 8000cec:	429c      	cmp	r4, r3
 8000cee:	fa02 f207 	lsl.w	r2, r2, r7
 8000cf2:	fa00 f107 	lsl.w	r1, r0, r7
 8000cf6:	d90b      	bls.n	8000d10 <__udivmoddi4+0x1b0>
 8000cf8:	eb1e 0303 	adds.w	r3, lr, r3
 8000cfc:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d00:	f080 8087 	bcs.w	8000e12 <__udivmoddi4+0x2b2>
 8000d04:	429c      	cmp	r4, r3
 8000d06:	f240 8084 	bls.w	8000e12 <__udivmoddi4+0x2b2>
 8000d0a:	f1a9 0902 	sub.w	r9, r9, #2
 8000d0e:	4473      	add	r3, lr
 8000d10:	1b1b      	subs	r3, r3, r4
 8000d12:	b2ad      	uxth	r5, r5
 8000d14:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d18:	fb08 3310 	mls	r3, r8, r0, r3
 8000d1c:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000d20:	fb00 fa0a 	mul.w	sl, r0, sl
 8000d24:	45a2      	cmp	sl, r4
 8000d26:	d908      	bls.n	8000d3a <__udivmoddi4+0x1da>
 8000d28:	eb1e 0404 	adds.w	r4, lr, r4
 8000d2c:	f100 33ff 	add.w	r3, r0, #4294967295
 8000d30:	d26b      	bcs.n	8000e0a <__udivmoddi4+0x2aa>
 8000d32:	45a2      	cmp	sl, r4
 8000d34:	d969      	bls.n	8000e0a <__udivmoddi4+0x2aa>
 8000d36:	3802      	subs	r0, #2
 8000d38:	4474      	add	r4, lr
 8000d3a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000d3e:	fba0 8902 	umull	r8, r9, r0, r2
 8000d42:	eba4 040a 	sub.w	r4, r4, sl
 8000d46:	454c      	cmp	r4, r9
 8000d48:	46c2      	mov	sl, r8
 8000d4a:	464b      	mov	r3, r9
 8000d4c:	d354      	bcc.n	8000df8 <__udivmoddi4+0x298>
 8000d4e:	d051      	beq.n	8000df4 <__udivmoddi4+0x294>
 8000d50:	2e00      	cmp	r6, #0
 8000d52:	d069      	beq.n	8000e28 <__udivmoddi4+0x2c8>
 8000d54:	ebb1 050a 	subs.w	r5, r1, sl
 8000d58:	eb64 0403 	sbc.w	r4, r4, r3
 8000d5c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000d60:	40fd      	lsrs	r5, r7
 8000d62:	40fc      	lsrs	r4, r7
 8000d64:	ea4c 0505 	orr.w	r5, ip, r5
 8000d68:	e9c6 5400 	strd	r5, r4, [r6]
 8000d6c:	2700      	movs	r7, #0
 8000d6e:	e747      	b.n	8000c00 <__udivmoddi4+0xa0>
 8000d70:	f1c2 0320 	rsb	r3, r2, #32
 8000d74:	fa20 f703 	lsr.w	r7, r0, r3
 8000d78:	4095      	lsls	r5, r2
 8000d7a:	fa01 f002 	lsl.w	r0, r1, r2
 8000d7e:	fa21 f303 	lsr.w	r3, r1, r3
 8000d82:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d86:	4338      	orrs	r0, r7
 8000d88:	0c01      	lsrs	r1, r0, #16
 8000d8a:	fbb3 f7fe 	udiv	r7, r3, lr
 8000d8e:	fa1f f885 	uxth.w	r8, r5
 8000d92:	fb0e 3317 	mls	r3, lr, r7, r3
 8000d96:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d9a:	fb07 f308 	mul.w	r3, r7, r8
 8000d9e:	428b      	cmp	r3, r1
 8000da0:	fa04 f402 	lsl.w	r4, r4, r2
 8000da4:	d907      	bls.n	8000db6 <__udivmoddi4+0x256>
 8000da6:	1869      	adds	r1, r5, r1
 8000da8:	f107 3cff 	add.w	ip, r7, #4294967295
 8000dac:	d22f      	bcs.n	8000e0e <__udivmoddi4+0x2ae>
 8000dae:	428b      	cmp	r3, r1
 8000db0:	d92d      	bls.n	8000e0e <__udivmoddi4+0x2ae>
 8000db2:	3f02      	subs	r7, #2
 8000db4:	4429      	add	r1, r5
 8000db6:	1acb      	subs	r3, r1, r3
 8000db8:	b281      	uxth	r1, r0
 8000dba:	fbb3 f0fe 	udiv	r0, r3, lr
 8000dbe:	fb0e 3310 	mls	r3, lr, r0, r3
 8000dc2:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000dc6:	fb00 f308 	mul.w	r3, r0, r8
 8000dca:	428b      	cmp	r3, r1
 8000dcc:	d907      	bls.n	8000dde <__udivmoddi4+0x27e>
 8000dce:	1869      	adds	r1, r5, r1
 8000dd0:	f100 3cff 	add.w	ip, r0, #4294967295
 8000dd4:	d217      	bcs.n	8000e06 <__udivmoddi4+0x2a6>
 8000dd6:	428b      	cmp	r3, r1
 8000dd8:	d915      	bls.n	8000e06 <__udivmoddi4+0x2a6>
 8000dda:	3802      	subs	r0, #2
 8000ddc:	4429      	add	r1, r5
 8000dde:	1ac9      	subs	r1, r1, r3
 8000de0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000de4:	e73b      	b.n	8000c5e <__udivmoddi4+0xfe>
 8000de6:	4637      	mov	r7, r6
 8000de8:	4630      	mov	r0, r6
 8000dea:	e709      	b.n	8000c00 <__udivmoddi4+0xa0>
 8000dec:	4607      	mov	r7, r0
 8000dee:	e6e7      	b.n	8000bc0 <__udivmoddi4+0x60>
 8000df0:	4618      	mov	r0, r3
 8000df2:	e6fb      	b.n	8000bec <__udivmoddi4+0x8c>
 8000df4:	4541      	cmp	r1, r8
 8000df6:	d2ab      	bcs.n	8000d50 <__udivmoddi4+0x1f0>
 8000df8:	ebb8 0a02 	subs.w	sl, r8, r2
 8000dfc:	eb69 020e 	sbc.w	r2, r9, lr
 8000e00:	3801      	subs	r0, #1
 8000e02:	4613      	mov	r3, r2
 8000e04:	e7a4      	b.n	8000d50 <__udivmoddi4+0x1f0>
 8000e06:	4660      	mov	r0, ip
 8000e08:	e7e9      	b.n	8000dde <__udivmoddi4+0x27e>
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	e795      	b.n	8000d3a <__udivmoddi4+0x1da>
 8000e0e:	4667      	mov	r7, ip
 8000e10:	e7d1      	b.n	8000db6 <__udivmoddi4+0x256>
 8000e12:	4681      	mov	r9, r0
 8000e14:	e77c      	b.n	8000d10 <__udivmoddi4+0x1b0>
 8000e16:	3802      	subs	r0, #2
 8000e18:	442c      	add	r4, r5
 8000e1a:	e747      	b.n	8000cac <__udivmoddi4+0x14c>
 8000e1c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e20:	442b      	add	r3, r5
 8000e22:	e72f      	b.n	8000c84 <__udivmoddi4+0x124>
 8000e24:	4638      	mov	r0, r7
 8000e26:	e708      	b.n	8000c3a <__udivmoddi4+0xda>
 8000e28:	4637      	mov	r7, r6
 8000e2a:	e6e9      	b.n	8000c00 <__udivmoddi4+0xa0>

08000e2c <__aeabi_idiv0>:
 8000e2c:	4770      	bx	lr
 8000e2e:	bf00      	nop

08000e30 <gen_sine>:

#define N 2048

uint16_t wavetable[N];

void gen_sine(void) {
 8000e30:	b590      	push	{r4, r7, lr}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
	int x;
	for(x=0; x<N; x++) {
 8000e36:	2300      	movs	r3, #0
 8000e38:	607b      	str	r3, [r7, #4]
 8000e3a:	e039      	b.n	8000eb0 <gen_sine+0x80>
		// 2^16 / 2 = 32768
		wavetable[x] = 32767 + 32767 * sin(2 * M_PI * x / N);
 8000e3c:	6878      	ldr	r0, [r7, #4]
 8000e3e:	f7ff fb15 	bl	800046c <__aeabi_i2d>
 8000e42:	a323      	add	r3, pc, #140	; (adr r3, 8000ed0 <gen_sine+0xa0>)
 8000e44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e48:	f7ff fb7a 	bl	8000540 <__aeabi_dmul>
 8000e4c:	4603      	mov	r3, r0
 8000e4e:	460c      	mov	r4, r1
 8000e50:	4618      	mov	r0, r3
 8000e52:	4621      	mov	r1, r4
 8000e54:	f04f 0200 	mov.w	r2, #0
 8000e58:	4b1b      	ldr	r3, [pc, #108]	; (8000ec8 <gen_sine+0x98>)
 8000e5a:	f7ff fc9b 	bl	8000794 <__aeabi_ddiv>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	460c      	mov	r4, r1
 8000e62:	ec44 3b17 	vmov	d7, r3, r4
 8000e66:	eeb0 0a47 	vmov.f32	s0, s14
 8000e6a:	eef0 0a67 	vmov.f32	s1, s15
 8000e6e:	f003 fa3b 	bl	80042e8 <sin>
 8000e72:	ec51 0b10 	vmov	r0, r1, d0
 8000e76:	a312      	add	r3, pc, #72	; (adr r3, 8000ec0 <gen_sine+0x90>)
 8000e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e7c:	f7ff fb60 	bl	8000540 <__aeabi_dmul>
 8000e80:	4603      	mov	r3, r0
 8000e82:	460c      	mov	r4, r1
 8000e84:	4618      	mov	r0, r3
 8000e86:	4621      	mov	r1, r4
 8000e88:	a30d      	add	r3, pc, #52	; (adr r3, 8000ec0 <gen_sine+0x90>)
 8000e8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e8e:	f7ff f9a1 	bl	80001d4 <__adddf3>
 8000e92:	4603      	mov	r3, r0
 8000e94:	460c      	mov	r4, r1
 8000e96:	4618      	mov	r0, r3
 8000e98:	4621      	mov	r1, r4
 8000e9a:	f7ff fe29 	bl	8000af0 <__aeabi_d2uiz>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	b299      	uxth	r1, r3
 8000ea2:	4a0a      	ldr	r2, [pc, #40]	; (8000ecc <gen_sine+0x9c>)
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	for(x=0; x<N; x++) {
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	3301      	adds	r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8000eb6:	dbc1      	blt.n	8000e3c <gen_sine+0xc>
//		wavetable[x] = 32767 * sin(2 * M_PI * x / N);
		/* NOTICE those two definitions make different sounds! */
	}
}
 8000eb8:	bf00      	nop
 8000eba:	370c      	adds	r7, #12
 8000ebc:	46bd      	mov	sp, r7
 8000ebe:	bd90      	pop	{r4, r7, pc}
 8000ec0:	00000000 	.word	0x00000000
 8000ec4:	40dfffc0 	.word	0x40dfffc0
 8000ec8:	40a00000 	.word	0x40a00000
 8000ecc:	20002354 	.word	0x20002354
 8000ed0:	54442d18 	.word	0x54442d18
 8000ed4:	401921fb 	.word	0x401921fb

08000ed8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000edc:	f000 fd14 	bl	8001908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ee0:	f000 f840 	bl	8000f64 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ee4:	f000 f97a 	bl	80011dc <MX_GPIO_Init>
  MX_DMA_Init();
 8000ee8:	f000 f942 	bl	8001170 <MX_DMA_Init>
  MX_USB_OTG_FS_HCD_Init();
 8000eec:	f000 f91e 	bl	800112c <MX_USB_OTG_FS_HCD_Init>
  MX_I2S2_Init();
 8000ef0:	f000 f8ba 	bl	8001068 <MX_I2S2_Init>
  MX_SPI1_Init();
 8000ef4:	f000 f8e6 	bl	80010c4 <MX_SPI1_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//  gen_square();
  gen_sine();
 8000ef8:	f7ff ff9a 	bl	8000e30 <gen_sine>
//  gen_sawtooth();
  init_note_steps();
 8000efc:	f000 fa74 	bl	80013e8 <init_note_steps>

//  active_notes[active_count++] = 0;
//  active_notes[active_count++] = 87;
//  active_notes[active_count++] = 66; // DS2
  active_notes[active_count++] = 34;
 8000f00:	4b13      	ldr	r3, [pc, #76]	; (8000f50 <main+0x78>)
 8000f02:	681b      	ldr	r3, [r3, #0]
 8000f04:	1c5a      	adds	r2, r3, #1
 8000f06:	4912      	ldr	r1, [pc, #72]	; (8000f50 <main+0x78>)
 8000f08:	600a      	str	r2, [r1, #0]
 8000f0a:	4a12      	ldr	r2, [pc, #72]	; (8000f54 <main+0x7c>)
 8000f0c:	2122      	movs	r1, #34	; 0x22
 8000f0e:	54d1      	strb	r1, [r2, r3]
  active_notes[active_count++] = 37;
 8000f10:	4b0f      	ldr	r3, [pc, #60]	; (8000f50 <main+0x78>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	1c5a      	adds	r2, r3, #1
 8000f16:	490e      	ldr	r1, [pc, #56]	; (8000f50 <main+0x78>)
 8000f18:	600a      	str	r2, [r1, #0]
 8000f1a:	4a0e      	ldr	r2, [pc, #56]	; (8000f54 <main+0x7c>)
 8000f1c:	2125      	movs	r1, #37	; 0x25
 8000f1e:	54d1      	strb	r1, [r2, r3]
  active_notes[active_count++] = 41;
 8000f20:	4b0b      	ldr	r3, [pc, #44]	; (8000f50 <main+0x78>)
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	1c5a      	adds	r2, r3, #1
 8000f26:	490a      	ldr	r1, [pc, #40]	; (8000f50 <main+0x78>)
 8000f28:	600a      	str	r2, [r1, #0]
 8000f2a:	4a0a      	ldr	r2, [pc, #40]	; (8000f54 <main+0x7c>)
 8000f2c:	2129      	movs	r1, #41	; 0x29
 8000f2e:	54d1      	strb	r1, [r2, r3]

  fill_buffer(buffer, BUFFERSIZE);
 8000f30:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <main+0x80>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	4619      	mov	r1, r3
 8000f36:	4809      	ldr	r0, [pc, #36]	; (8000f5c <main+0x84>)
 8000f38:	f000 f9da 	bl	80012f0 <fill_buffer>
  HAL_I2S_Transmit_DMA(&hi2s2, buffer, BUFFERSIZE);
 8000f3c:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <main+0x80>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	461a      	mov	r2, r3
 8000f44:	4905      	ldr	r1, [pc, #20]	; (8000f5c <main+0x84>)
 8000f46:	4806      	ldr	r0, [pc, #24]	; (8000f60 <main+0x88>)
 8000f48:	f001 fd6c 	bl	8002a24 <HAL_I2S_Transmit_DMA>
//	  HAL_Delay(500);
//	  if (HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0))
//		  active_count = 3;
//	  else
//		  active_count = 0;
	  asm("wfi");
 8000f4c:	bf30      	wfi
 8000f4e:	e7fd      	b.n	8000f4c <main+0x74>
 8000f50:	20000090 	.word	0x20000090
 8000f54:	20003778 	.word	0x20003778
 8000f58:	080062b8 	.word	0x080062b8
 8000f5c:	20000094 	.word	0x20000094
 8000f60:	20003730 	.word	0x20003730

08000f64 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b098      	sub	sp, #96	; 0x60
 8000f68:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f6a:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000f6e:	2230      	movs	r2, #48	; 0x30
 8000f70:	2100      	movs	r1, #0
 8000f72:	4618      	mov	r0, r3
 8000f74:	f003 f9b0 	bl	80042d8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f78:	f107 031c 	add.w	r3, r7, #28
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	601a      	str	r2, [r3, #0]
 8000f80:	605a      	str	r2, [r3, #4]
 8000f82:	609a      	str	r2, [r3, #8]
 8000f84:	60da      	str	r2, [r3, #12]
 8000f86:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f88:	f107 030c 	add.w	r3, r7, #12
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	601a      	str	r2, [r3, #0]
 8000f90:	605a      	str	r2, [r3, #4]
 8000f92:	609a      	str	r2, [r3, #8]
 8000f94:	60da      	str	r2, [r3, #12]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	60bb      	str	r3, [r7, #8]
 8000f9a:	4b31      	ldr	r3, [pc, #196]	; (8001060 <SystemClock_Config+0xfc>)
 8000f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9e:	4a30      	ldr	r2, [pc, #192]	; (8001060 <SystemClock_Config+0xfc>)
 8000fa0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <SystemClock_Config+0xfc>)
 8000fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000faa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fae:	60bb      	str	r3, [r7, #8]
 8000fb0:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	607b      	str	r3, [r7, #4]
 8000fb6:	4b2b      	ldr	r3, [pc, #172]	; (8001064 <SystemClock_Config+0x100>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	4a2a      	ldr	r2, [pc, #168]	; (8001064 <SystemClock_Config+0x100>)
 8000fbc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fc0:	6013      	str	r3, [r2, #0]
 8000fc2:	4b28      	ldr	r3, [pc, #160]	; (8001064 <SystemClock_Config+0x100>)
 8000fc4:	681b      	ldr	r3, [r3, #0]
 8000fc6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fca:	607b      	str	r3, [r7, #4]
 8000fcc:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
 8000fce:	2303      	movs	r3, #3
 8000fd0:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000fd2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000fd6:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000fd8:	2301      	movs	r3, #1
 8000fda:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000fdc:	2310      	movs	r3, #16
 8000fde:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fe0:	2302      	movs	r3, #2
 8000fe2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fe4:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fe8:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fea:	2304      	movs	r3, #4
 8000fec:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000fee:	2348      	movs	r3, #72	; 0x48
 8000ff0:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ff2:	2302      	movs	r3, #2
 8000ff4:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000ffa:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ffe:	4618      	mov	r0, r3
 8001000:	f002 f962 	bl	80032c8 <HAL_RCC_OscConfig>
 8001004:	4603      	mov	r3, r0
 8001006:	2b00      	cmp	r3, #0
 8001008:	d001      	beq.n	800100e <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800100a:	f000 f96d 	bl	80012e8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800100e:	230f      	movs	r3, #15
 8001010:	61fb      	str	r3, [r7, #28]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8001012:	2300      	movs	r3, #0
 8001014:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001016:	2300      	movs	r3, #0
 8001018:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800101a:	2300      	movs	r3, #0
 800101c:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800101e:	2300      	movs	r3, #0
 8001020:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8001022:	f107 031c 	add.w	r3, r7, #28
 8001026:	2100      	movs	r1, #0
 8001028:	4618      	mov	r0, r3
 800102a:	f002 fbbd 	bl	80037a8 <HAL_RCC_ClockConfig>
 800102e:	4603      	mov	r3, r0
 8001030:	2b00      	cmp	r3, #0
 8001032:	d001      	beq.n	8001038 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8001034:	f000 f958 	bl	80012e8 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2S;
 8001038:	2301      	movs	r3, #1
 800103a:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLLI2S.PLLI2SN = 96;
 800103c:	2360      	movs	r3, #96	; 0x60
 800103e:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLLI2S.PLLI2SR = 5;
 8001040:	2305      	movs	r3, #5
 8001042:	617b      	str	r3, [r7, #20]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001044:	f107 030c 	add.w	r3, r7, #12
 8001048:	4618      	mov	r0, r3
 800104a:	f002 fd6b 	bl	8003b24 <HAL_RCCEx_PeriphCLKConfig>
 800104e:	4603      	mov	r3, r0
 8001050:	2b00      	cmp	r3, #0
 8001052:	d001      	beq.n	8001058 <SystemClock_Config+0xf4>
  {
    Error_Handler();
 8001054:	f000 f948 	bl	80012e8 <Error_Handler>
  }
}
 8001058:	bf00      	nop
 800105a:	3760      	adds	r7, #96	; 0x60
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800
 8001064:	40007000 	.word	0x40007000

08001068 <MX_I2S2_Init>:
  * @brief I2S2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2S2_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 800106c:	4b13      	ldr	r3, [pc, #76]	; (80010bc <MX_I2S2_Init+0x54>)
 800106e:	4a14      	ldr	r2, [pc, #80]	; (80010c0 <MX_I2S2_Init+0x58>)
 8001070:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_TX;
 8001072:	4b12      	ldr	r3, [pc, #72]	; (80010bc <MX_I2S2_Init+0x54>)
 8001074:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001078:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_MSB;
 800107a:	4b10      	ldr	r3, [pc, #64]	; (80010bc <MX_I2S2_Init+0x54>)
 800107c:	2210      	movs	r2, #16
 800107e:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_16B;
 8001080:	4b0e      	ldr	r3, [pc, #56]	; (80010bc <MX_I2S2_Init+0x54>)
 8001082:	2200      	movs	r2, #0
 8001084:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8001086:	4b0d      	ldr	r3, [pc, #52]	; (80010bc <MX_I2S2_Init+0x54>)
 8001088:	2200      	movs	r2, #0
 800108a:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_48K;
 800108c:	4b0b      	ldr	r3, [pc, #44]	; (80010bc <MX_I2S2_Init+0x54>)
 800108e:	f64b 3280 	movw	r2, #48000	; 0xbb80
 8001092:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8001094:	4b09      	ldr	r3, [pc, #36]	; (80010bc <MX_I2S2_Init+0x54>)
 8001096:	2200      	movs	r2, #0
 8001098:	619a      	str	r2, [r3, #24]
  hi2s2.Init.ClockSource = I2S_CLOCK_PLL;
 800109a:	4b08      	ldr	r3, [pc, #32]	; (80010bc <MX_I2S2_Init+0x54>)
 800109c:	2200      	movs	r2, #0
 800109e:	61da      	str	r2, [r3, #28]
  hi2s2.Init.FullDuplexMode = I2S_FULLDUPLEXMODE_DISABLE;
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <MX_I2S2_Init+0x54>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	621a      	str	r2, [r3, #32]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 80010a6:	4805      	ldr	r0, [pc, #20]	; (80010bc <MX_I2S2_Init+0x54>)
 80010a8:	f001 fb7c 	bl	80027a4 <HAL_I2S_Init>
 80010ac:	4603      	mov	r3, r0
 80010ae:	2b00      	cmp	r3, #0
 80010b0:	d001      	beq.n	80010b6 <MX_I2S2_Init+0x4e>
  {
    Error_Handler();
 80010b2:	f000 f919 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 80010b6:	bf00      	nop
 80010b8:	bd80      	pop	{r7, pc}
 80010ba:	bf00      	nop
 80010bc:	20003730 	.word	0x20003730
 80010c0:	40003800 	.word	0x40003800

080010c4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80010c8:	4b16      	ldr	r3, [pc, #88]	; (8001124 <MX_SPI1_Init+0x60>)
 80010ca:	4a17      	ldr	r2, [pc, #92]	; (8001128 <MX_SPI1_Init+0x64>)
 80010cc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 80010ce:	4b15      	ldr	r3, [pc, #84]	; (8001124 <MX_SPI1_Init+0x60>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES_RXONLY;
 80010d4:	4b13      	ldr	r3, [pc, #76]	; (8001124 <MX_SPI1_Init+0x60>)
 80010d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80010da:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_16BIT;
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <MX_SPI1_Init+0x60>)
 80010de:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80010e2:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010e4:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <MX_SPI1_Init+0x60>)
 80010e6:	2200      	movs	r2, #0
 80010e8:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ea:	4b0e      	ldr	r3, [pc, #56]	; (8001124 <MX_SPI1_Init+0x60>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <MX_SPI1_Init+0x60>)
 80010f2:	2200      	movs	r2, #0
 80010f4:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <MX_SPI1_Init+0x60>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80010fc:	4b09      	ldr	r3, [pc, #36]	; (8001124 <MX_SPI1_Init+0x60>)
 80010fe:	2200      	movs	r2, #0
 8001100:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <MX_SPI1_Init+0x60>)
 8001104:	2200      	movs	r2, #0
 8001106:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001108:	4b06      	ldr	r3, [pc, #24]	; (8001124 <MX_SPI1_Init+0x60>)
 800110a:	220a      	movs	r2, #10
 800110c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800110e:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_SPI1_Init+0x60>)
 8001110:	f002 fe46 	bl	8003da0 <HAL_SPI_Init>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d001      	beq.n	800111e <MX_SPI1_Init+0x5a>
  {
    Error_Handler();
 800111a:	f000 f8e5 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800111e:	bf00      	nop
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20003354 	.word	0x20003354
 8001128:	40013000 	.word	0x40013000

0800112c <MX_USB_OTG_FS_HCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_HCD_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001130:	4b0e      	ldr	r3, [pc, #56]	; (800116c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001132:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8001136:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 8001138:	4b0c      	ldr	r3, [pc, #48]	; (800116c <MX_USB_OTG_FS_HCD_Init+0x40>)
 800113a:	2208      	movs	r2, #8
 800113c:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 800113e:	4b0b      	ldr	r3, [pc, #44]	; (800116c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001140:	2201      	movs	r2, #1
 8001142:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8001144:	4b09      	ldr	r3, [pc, #36]	; (800116c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001146:	2200      	movs	r2, #0
 8001148:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 800114a:	4b08      	ldr	r3, [pc, #32]	; (800116c <MX_USB_OTG_FS_HCD_Init+0x40>)
 800114c:	2202      	movs	r2, #2
 800114e:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8001150:	4b06      	ldr	r3, [pc, #24]	; (800116c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001152:	2200      	movs	r2, #0
 8001154:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8001156:	4805      	ldr	r0, [pc, #20]	; (800116c <MX_USB_OTG_FS_HCD_Init+0x40>)
 8001158:	f001 fac1 	bl	80026de <HAL_HCD_Init>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <MX_USB_OTG_FS_HCD_Init+0x3a>
  {
    Error_Handler();
 8001162:	f000 f8c1 	bl	80012e8 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8001166:	bf00      	nop
 8001168:	bd80      	pop	{r7, pc}
 800116a:	bf00      	nop
 800116c:	200033ac 	.word	0x200033ac

08001170 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	4b17      	ldr	r3, [pc, #92]	; (80011d8 <MX_DMA_Init+0x68>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a16      	ldr	r2, [pc, #88]	; (80011d8 <MX_DMA_Init+0x68>)
 8001180:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b14      	ldr	r3, [pc, #80]	; (80011d8 <MX_DMA_Init+0x68>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	4b10      	ldr	r3, [pc, #64]	; (80011d8 <MX_DMA_Init+0x68>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a0f      	ldr	r2, [pc, #60]	; (80011d8 <MX_DMA_Init+0x68>)
 800119c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b0d      	ldr	r3, [pc, #52]	; (80011d8 <MX_DMA_Init+0x68>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 0, 0);
 80011ae:	2200      	movs	r2, #0
 80011b0:	2100      	movs	r1, #0
 80011b2:	200f      	movs	r0, #15
 80011b4:	f000 fd17 	bl	8001be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 80011b8:	200f      	movs	r0, #15
 80011ba:	f000 fd30 	bl	8001c1e <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 80011be:	2200      	movs	r2, #0
 80011c0:	2100      	movs	r1, #0
 80011c2:	2038      	movs	r0, #56	; 0x38
 80011c4:	f000 fd0f 	bl	8001be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80011c8:	2038      	movs	r0, #56	; 0x38
 80011ca:	f000 fd28 	bl	8001c1e <HAL_NVIC_EnableIRQ>

}
 80011ce:	bf00      	nop
 80011d0:	3708      	adds	r7, #8
 80011d2:	46bd      	mov	sp, r7
 80011d4:	bd80      	pop	{r7, pc}
 80011d6:	bf00      	nop
 80011d8:	40023800 	.word	0x40023800

080011dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011dc:	b580      	push	{r7, lr}
 80011de:	b08a      	sub	sp, #40	; 0x28
 80011e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011e2:	f107 0314 	add.w	r3, r7, #20
 80011e6:	2200      	movs	r2, #0
 80011e8:	601a      	str	r2, [r3, #0]
 80011ea:	605a      	str	r2, [r3, #4]
 80011ec:	609a      	str	r2, [r3, #8]
 80011ee:	60da      	str	r2, [r3, #12]
 80011f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80011f2:	2300      	movs	r3, #0
 80011f4:	613b      	str	r3, [r7, #16]
 80011f6:	4b38      	ldr	r3, [pc, #224]	; (80012d8 <MX_GPIO_Init+0xfc>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	4a37      	ldr	r2, [pc, #220]	; (80012d8 <MX_GPIO_Init+0xfc>)
 80011fc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001200:	6313      	str	r3, [r2, #48]	; 0x30
 8001202:	4b35      	ldr	r3, [pc, #212]	; (80012d8 <MX_GPIO_Init+0xfc>)
 8001204:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001206:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800120a:	613b      	str	r3, [r7, #16]
 800120c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800120e:	2300      	movs	r3, #0
 8001210:	60fb      	str	r3, [r7, #12]
 8001212:	4b31      	ldr	r3, [pc, #196]	; (80012d8 <MX_GPIO_Init+0xfc>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a30      	ldr	r2, [pc, #192]	; (80012d8 <MX_GPIO_Init+0xfc>)
 8001218:	f043 0304 	orr.w	r3, r3, #4
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b2e      	ldr	r3, [pc, #184]	; (80012d8 <MX_GPIO_Init+0xfc>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f003 0304 	and.w	r3, r3, #4
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	2300      	movs	r3, #0
 800122c:	60bb      	str	r3, [r7, #8]
 800122e:	4b2a      	ldr	r3, [pc, #168]	; (80012d8 <MX_GPIO_Init+0xfc>)
 8001230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001232:	4a29      	ldr	r2, [pc, #164]	; (80012d8 <MX_GPIO_Init+0xfc>)
 8001234:	f043 0301 	orr.w	r3, r3, #1
 8001238:	6313      	str	r3, [r2, #48]	; 0x30
 800123a:	4b27      	ldr	r3, [pc, #156]	; (80012d8 <MX_GPIO_Init+0xfc>)
 800123c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123e:	f003 0301 	and.w	r3, r3, #1
 8001242:	60bb      	str	r3, [r7, #8]
 8001244:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001246:	2300      	movs	r3, #0
 8001248:	607b      	str	r3, [r7, #4]
 800124a:	4b23      	ldr	r3, [pc, #140]	; (80012d8 <MX_GPIO_Init+0xfc>)
 800124c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124e:	4a22      	ldr	r2, [pc, #136]	; (80012d8 <MX_GPIO_Init+0xfc>)
 8001250:	f043 0302 	orr.w	r3, r3, #2
 8001254:	6313      	str	r3, [r2, #48]	; 0x30
 8001256:	4b20      	ldr	r3, [pc, #128]	; (80012d8 <MX_GPIO_Init+0xfc>)
 8001258:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800125a:	f003 0302 	and.w	r3, r3, #2
 800125e:	607b      	str	r3, [r7, #4]
 8001260:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001262:	2300      	movs	r3, #0
 8001264:	603b      	str	r3, [r7, #0]
 8001266:	4b1c      	ldr	r3, [pc, #112]	; (80012d8 <MX_GPIO_Init+0xfc>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a1b      	ldr	r2, [pc, #108]	; (80012d8 <MX_GPIO_Init+0xfc>)
 800126c:	f043 0308 	orr.w	r3, r3, #8
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b19      	ldr	r3, [pc, #100]	; (80012d8 <MX_GPIO_Init+0xfc>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0308 	and.w	r3, r3, #8
 800127a:	603b      	str	r3, [r7, #0]
 800127c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800127e:	2200      	movs	r2, #0
 8001280:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 8001284:	4815      	ldr	r0, [pc, #84]	; (80012dc <MX_GPIO_Init+0x100>)
 8001286:	f001 f9ed 	bl	8002664 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800128a:	2301      	movs	r3, #1
 800128c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800128e:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_GPIO_Init+0x104>)
 8001290:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001292:	2300      	movs	r3, #0
 8001294:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001296:	f107 0314 	add.w	r3, r7, #20
 800129a:	4619      	mov	r1, r3
 800129c:	4811      	ldr	r0, [pc, #68]	; (80012e4 <MX_GPIO_Init+0x108>)
 800129e:	f001 f847 	bl	8002330 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80012a2:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80012a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a8:	2301      	movs	r3, #1
 80012aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b4:	f107 0314 	add.w	r3, r7, #20
 80012b8:	4619      	mov	r1, r3
 80012ba:	4808      	ldr	r0, [pc, #32]	; (80012dc <MX_GPIO_Init+0x100>)
 80012bc:	f001 f838 	bl	8002330 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 80012c0:	2200      	movs	r2, #0
 80012c2:	2100      	movs	r1, #0
 80012c4:	2006      	movs	r0, #6
 80012c6:	f000 fc8e 	bl	8001be6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80012ca:	2006      	movs	r0, #6
 80012cc:	f000 fca7 	bl	8001c1e <HAL_NVIC_EnableIRQ>

}
 80012d0:	bf00      	nop
 80012d2:	3728      	adds	r7, #40	; 0x28
 80012d4:	46bd      	mov	sp, r7
 80012d6:	bd80      	pop	{r7, pc}
 80012d8:	40023800 	.word	0x40023800
 80012dc:	40020c00 	.word	0x40020c00
 80012e0:	10110000 	.word	0x10110000
 80012e4:	40020000 	.word	0x40020000

080012e8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012e8:	b480      	push	{r7}
 80012ea:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012ec:	b672      	cpsid	i
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012ee:	e7fe      	b.n	80012ee <Error_Handler+0x6>

080012f0 <fill_buffer>:
int active_count = 0;
int table_steps[88];
int table_indeces[88];


void fill_buffer(uint16_t * buffer, int num_samples) {
 80012f0:	b480      	push	{r7}
 80012f2:	b087      	sub	sp, #28
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
 80012f8:	6039      	str	r1, [r7, #0]
	int i, j, note, sample;
	for (i = 0; i < num_samples; i+=2) {
 80012fa:	2300      	movs	r3, #0
 80012fc:	617b      	str	r3, [r7, #20]
 80012fe:	e05d      	b.n	80013bc <fill_buffer+0xcc>
		sample = 0;
 8001300:	2300      	movs	r3, #0
 8001302:	60fb      	str	r3, [r7, #12]
		for (j = 0; j < active_count; j++) {
 8001304:	2300      	movs	r3, #0
 8001306:	613b      	str	r3, [r7, #16]
 8001308:	e035      	b.n	8001376 <fill_buffer+0x86>
			note = active_notes[j];
 800130a:	4a31      	ldr	r2, [pc, #196]	; (80013d0 <fill_buffer+0xe0>)
 800130c:	693b      	ldr	r3, [r7, #16]
 800130e:	4413      	add	r3, r2
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	60bb      	str	r3, [r7, #8]
			sample += wavetable[table_indeces[note] >> 16];
 8001314:	4a2f      	ldr	r2, [pc, #188]	; (80013d4 <fill_buffer+0xe4>)
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800131c:	141b      	asrs	r3, r3, #16
 800131e:	4a2e      	ldr	r2, [pc, #184]	; (80013d8 <fill_buffer+0xe8>)
 8001320:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001324:	461a      	mov	r2, r3
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	4413      	add	r3, r2
 800132a:	60fb      	str	r3, [r7, #12]
			table_indeces[note] += table_steps[note];
 800132c:	4a29      	ldr	r2, [pc, #164]	; (80013d4 <fill_buffer+0xe4>)
 800132e:	68bb      	ldr	r3, [r7, #8]
 8001330:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001334:	4929      	ldr	r1, [pc, #164]	; (80013dc <fill_buffer+0xec>)
 8001336:	68bb      	ldr	r3, [r7, #8]
 8001338:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800133c:	441a      	add	r2, r3
 800133e:	4925      	ldr	r1, [pc, #148]	; (80013d4 <fill_buffer+0xe4>)
 8001340:	68bb      	ldr	r3, [r7, #8]
 8001342:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			if ((table_indeces[note] >> 16) >= TABLESIZE)
 8001346:	4a23      	ldr	r2, [pc, #140]	; (80013d4 <fill_buffer+0xe4>)
 8001348:	68bb      	ldr	r3, [r7, #8]
 800134a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800134e:	141b      	asrs	r3, r3, #16
 8001350:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001354:	4293      	cmp	r3, r2
 8001356:	db0b      	blt.n	8001370 <fill_buffer+0x80>
				table_indeces[note] -= TABLESIZE << 16;
 8001358:	4a1e      	ldr	r2, [pc, #120]	; (80013d4 <fill_buffer+0xe4>)
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001360:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001364:	041b      	lsls	r3, r3, #16
 8001366:	1ad2      	subs	r2, r2, r3
 8001368:	491a      	ldr	r1, [pc, #104]	; (80013d4 <fill_buffer+0xe4>)
 800136a:	68bb      	ldr	r3, [r7, #8]
 800136c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
		for (j = 0; j < active_count; j++) {
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	3301      	adds	r3, #1
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	4b1a      	ldr	r3, [pc, #104]	; (80013e0 <fill_buffer+0xf0>)
 8001378:	681b      	ldr	r3, [r3, #0]
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	429a      	cmp	r2, r3
 800137e:	dbc4      	blt.n	800130a <fill_buffer+0x1a>
		}
		sample /= 16; //what is the magic number here? definitely >= 4
 8001380:	68fb      	ldr	r3, [r7, #12]
 8001382:	2b00      	cmp	r3, #0
 8001384:	da00      	bge.n	8001388 <fill_buffer+0x98>
 8001386:	330f      	adds	r3, #15
 8001388:	111b      	asrs	r3, r3, #4
 800138a:	60fb      	str	r3, [r7, #12]
		if (sample > 0xffff) sample = 0xffff;
 800138c:	68fb      	ldr	r3, [r7, #12]
 800138e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001392:	db02      	blt.n	800139a <fill_buffer+0xaa>
 8001394:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001398:	60fb      	str	r3, [r7, #12]
		buffer[i] = buffer[i+1] = sample;
 800139a:	697b      	ldr	r3, [r7, #20]
 800139c:	3301      	adds	r3, #1
 800139e:	005b      	lsls	r3, r3, #1
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	4413      	add	r3, r2
 80013a4:	68fa      	ldr	r2, [r7, #12]
 80013a6:	b292      	uxth	r2, r2
 80013a8:	801a      	strh	r2, [r3, #0]
 80013aa:	697a      	ldr	r2, [r7, #20]
 80013ac:	0052      	lsls	r2, r2, #1
 80013ae:	6879      	ldr	r1, [r7, #4]
 80013b0:	440a      	add	r2, r1
 80013b2:	881b      	ldrh	r3, [r3, #0]
 80013b4:	8013      	strh	r3, [r2, #0]
	for (i = 0; i < num_samples; i+=2) {
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	3302      	adds	r3, #2
 80013ba:	617b      	str	r3, [r7, #20]
 80013bc:	697a      	ldr	r2, [r7, #20]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	db9d      	blt.n	8001300 <fill_buffer+0x10>
	}
}
 80013c4:	bf00      	nop
 80013c6:	371c      	adds	r7, #28
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr
 80013d0:	20003778 	.word	0x20003778
 80013d4:	20002094 	.word	0x20002094
 80013d8:	20002354 	.word	0x20002354
 80013dc:	200021f4 	.word	0x200021f4
 80013e0:	20000090 	.word	0x20000090
 80013e4:	00000000 	.word	0x00000000

080013e8 <init_note_steps>:

void init_note_steps(void) {
 80013e8:	b590      	push	{r4, r7, lr}
 80013ea:	b085      	sub	sp, #20
 80013ec:	af00      	add	r7, sp, #0
	double freq;
	for (int k = 0; k < 88; k++) {
 80013ee:	2300      	movs	r3, #0
 80013f0:	60fb      	str	r3, [r7, #12]
 80013f2:	e040      	b.n	8001476 <init_note_steps+0x8e>
		freq = pow(1.05946309436, k - 48) * 440;
 80013f4:	68fb      	ldr	r3, [r7, #12]
 80013f6:	3b30      	subs	r3, #48	; 0x30
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff f837 	bl	800046c <__aeabi_i2d>
 80013fe:	4603      	mov	r3, r0
 8001400:	460c      	mov	r4, r1
 8001402:	ec44 3b11 	vmov	d1, r3, r4
 8001406:	ed9f 0b20 	vldr	d0, [pc, #128]	; 8001488 <init_note_steps+0xa0>
 800140a:	f002 ffb5 	bl	8004378 <pow>
 800140e:	ec51 0b10 	vmov	r0, r1, d0
 8001412:	f04f 0200 	mov.w	r2, #0
 8001416:	4b20      	ldr	r3, [pc, #128]	; (8001498 <init_note_steps+0xb0>)
 8001418:	f7ff f892 	bl	8000540 <__aeabi_dmul>
 800141c:	4603      	mov	r3, r0
 800141e:	460c      	mov	r4, r1
 8001420:	e9c7 3400 	strd	r3, r4, [r7]
		table_steps[k] = freq * TABLESIZE / 48000 * (1 << 16);
 8001424:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001428:	4618      	mov	r0, r3
 800142a:	f7ff f81f 	bl	800046c <__aeabi_i2d>
 800142e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001432:	f7ff f885 	bl	8000540 <__aeabi_dmul>
 8001436:	4603      	mov	r3, r0
 8001438:	460c      	mov	r4, r1
 800143a:	4618      	mov	r0, r3
 800143c:	4621      	mov	r1, r4
 800143e:	a314      	add	r3, pc, #80	; (adr r3, 8001490 <init_note_steps+0xa8>)
 8001440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001444:	f7ff f9a6 	bl	8000794 <__aeabi_ddiv>
 8001448:	4603      	mov	r3, r0
 800144a:	460c      	mov	r4, r1
 800144c:	4618      	mov	r0, r3
 800144e:	4621      	mov	r1, r4
 8001450:	f04f 0200 	mov.w	r2, #0
 8001454:	4b11      	ldr	r3, [pc, #68]	; (800149c <init_note_steps+0xb4>)
 8001456:	f7ff f873 	bl	8000540 <__aeabi_dmul>
 800145a:	4603      	mov	r3, r0
 800145c:	460c      	mov	r4, r1
 800145e:	4618      	mov	r0, r3
 8001460:	4621      	mov	r1, r4
 8001462:	f7ff fb1d 	bl	8000aa0 <__aeabi_d2iz>
 8001466:	4601      	mov	r1, r0
 8001468:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <init_note_steps+0xb8>)
 800146a:	68fb      	ldr	r3, [r7, #12]
 800146c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	for (int k = 0; k < 88; k++) {
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	3301      	adds	r3, #1
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	68fb      	ldr	r3, [r7, #12]
 8001478:	2b57      	cmp	r3, #87	; 0x57
 800147a:	ddbb      	ble.n	80013f4 <init_note_steps+0xc>
	}
}
 800147c:	bf00      	nop
 800147e:	3714      	adds	r7, #20
 8001480:	46bd      	mov	sp, r7
 8001482:	bd90      	pop	{r4, r7, pc}
 8001484:	f3af 8000 	nop.w
 8001488:	92d985c9 	.word	0x92d985c9
 800148c:	3ff0f38f 	.word	0x3ff0f38f
 8001490:	00000000 	.word	0x00000000
 8001494:	40e77000 	.word	0x40e77000
 8001498:	407b8000 	.word	0x407b8000
 800149c:	40f00000 	.word	0x40f00000
 80014a0:	200021f4 	.word	0x200021f4

080014a4 <HAL_I2S_TxHalfCpltCallback>:


void HAL_I2S_TxHalfCpltCallback(I2S_HandleTypeDef *hi2s) {
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b082      	sub	sp, #8
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	6078      	str	r0, [r7, #4]
//	if (!HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_0)) {
//		active_count = 0;
//	}
	fill_buffer(&buffer[0], BUFSIZE / 2);
 80014ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014b0:	4803      	ldr	r0, [pc, #12]	; (80014c0 <HAL_I2S_TxHalfCpltCallback+0x1c>)
 80014b2:	f7ff ff1d 	bl	80012f0 <fill_buffer>
}
 80014b6:	bf00      	nop
 80014b8:	3708      	adds	r7, #8
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000094 	.word	0x20000094

080014c4 <HAL_I2S_TxCpltCallback>:

void HAL_I2S_TxCpltCallback(I2S_HandleTypeDef *hi2s) {
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b082      	sub	sp, #8
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	fill_buffer(&buffer[BUFSIZE / 2], BUFSIZE / 2);
 80014cc:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80014d0:	4803      	ldr	r0, [pc, #12]	; (80014e0 <HAL_I2S_TxCpltCallback+0x1c>)
 80014d2:	f7ff ff0d 	bl	80012f0 <fill_buffer>
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	20000894 	.word	0x20000894

080014e4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e4:	b480      	push	{r7}
 80014e6:	b083      	sub	sp, #12
 80014e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ea:	2300      	movs	r3, #0
 80014ec:	607b      	str	r3, [r7, #4]
 80014ee:	4b10      	ldr	r3, [pc, #64]	; (8001530 <HAL_MspInit+0x4c>)
 80014f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014f2:	4a0f      	ldr	r2, [pc, #60]	; (8001530 <HAL_MspInit+0x4c>)
 80014f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80014f8:	6453      	str	r3, [r2, #68]	; 0x44
 80014fa:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <HAL_MspInit+0x4c>)
 80014fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001502:	607b      	str	r3, [r7, #4]
 8001504:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	603b      	str	r3, [r7, #0]
 800150a:	4b09      	ldr	r3, [pc, #36]	; (8001530 <HAL_MspInit+0x4c>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a08      	ldr	r2, [pc, #32]	; (8001530 <HAL_MspInit+0x4c>)
 8001510:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b06      	ldr	r3, [pc, #24]	; (8001530 <HAL_MspInit+0x4c>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800151e:	603b      	str	r3, [r7, #0]
 8001520:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001522:	bf00      	nop
 8001524:	370c      	adds	r7, #12
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	40023800 	.word	0x40023800

08001534 <HAL_I2S_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2s: I2S handle pointer
* @retval None
*/
void HAL_I2S_MspInit(I2S_HandleTypeDef* hi2s)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	b08a      	sub	sp, #40	; 0x28
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800153c:	f107 0314 	add.w	r3, r7, #20
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]
 8001546:	609a      	str	r2, [r3, #8]
 8001548:	60da      	str	r2, [r3, #12]
 800154a:	611a      	str	r2, [r3, #16]
  if(hi2s->Instance==SPI2)
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	4a40      	ldr	r2, [pc, #256]	; (8001654 <HAL_I2S_MspInit+0x120>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d17a      	bne.n	800164c <HAL_I2S_MspInit+0x118>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	613b      	str	r3, [r7, #16]
 800155a:	4b3f      	ldr	r3, [pc, #252]	; (8001658 <HAL_I2S_MspInit+0x124>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800155e:	4a3e      	ldr	r2, [pc, #248]	; (8001658 <HAL_I2S_MspInit+0x124>)
 8001560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001564:	6413      	str	r3, [r2, #64]	; 0x40
 8001566:	4b3c      	ldr	r3, [pc, #240]	; (8001658 <HAL_I2S_MspInit+0x124>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800156e:	613b      	str	r3, [r7, #16]
 8001570:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001572:	2300      	movs	r3, #0
 8001574:	60fb      	str	r3, [r7, #12]
 8001576:	4b38      	ldr	r3, [pc, #224]	; (8001658 <HAL_I2S_MspInit+0x124>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	4a37      	ldr	r2, [pc, #220]	; (8001658 <HAL_I2S_MspInit+0x124>)
 800157c:	f043 0304 	orr.w	r3, r3, #4
 8001580:	6313      	str	r3, [r2, #48]	; 0x30
 8001582:	4b35      	ldr	r3, [pc, #212]	; (8001658 <HAL_I2S_MspInit+0x124>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	f003 0304 	and.w	r3, r3, #4
 800158a:	60fb      	str	r3, [r7, #12]
 800158c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800158e:	2300      	movs	r3, #0
 8001590:	60bb      	str	r3, [r7, #8]
 8001592:	4b31      	ldr	r3, [pc, #196]	; (8001658 <HAL_I2S_MspInit+0x124>)
 8001594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001596:	4a30      	ldr	r2, [pc, #192]	; (8001658 <HAL_I2S_MspInit+0x124>)
 8001598:	f043 0302 	orr.w	r3, r3, #2
 800159c:	6313      	str	r3, [r2, #48]	; 0x30
 800159e:	4b2e      	ldr	r3, [pc, #184]	; (8001658 <HAL_I2S_MspInit+0x124>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	f003 0302 	and.w	r3, r3, #2
 80015a6:	60bb      	str	r3, [r7, #8]
 80015a8:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PC3     ------> I2S2_SD
    PB10     ------> I2S2_CK
    PB12     ------> I2S2_WS
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015aa:	2308      	movs	r3, #8
 80015ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ae:	2302      	movs	r3, #2
 80015b0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015b2:	2300      	movs	r3, #0
 80015b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b6:	2300      	movs	r3, #0
 80015b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015ba:	2305      	movs	r3, #5
 80015bc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	4825      	ldr	r0, [pc, #148]	; (800165c <HAL_I2S_MspInit+0x128>)
 80015c6:	f000 feb3 	bl	8002330 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_12;
 80015ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80015ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d0:	2302      	movs	r3, #2
 80015d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d4:	2300      	movs	r3, #0
 80015d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015dc:	2305      	movs	r3, #5
 80015de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e0:	f107 0314 	add.w	r3, r7, #20
 80015e4:	4619      	mov	r1, r3
 80015e6:	481e      	ldr	r0, [pc, #120]	; (8001660 <HAL_I2S_MspInit+0x12c>)
 80015e8:	f000 fea2 	bl	8002330 <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_TX Init */
    hdma_spi2_tx.Instance = DMA1_Stream4;
 80015ec:	4b1d      	ldr	r3, [pc, #116]	; (8001664 <HAL_I2S_MspInit+0x130>)
 80015ee:	4a1e      	ldr	r2, [pc, #120]	; (8001668 <HAL_I2S_MspInit+0x134>)
 80015f0:	601a      	str	r2, [r3, #0]
    hdma_spi2_tx.Init.Channel = DMA_CHANNEL_0;
 80015f2:	4b1c      	ldr	r3, [pc, #112]	; (8001664 <HAL_I2S_MspInit+0x130>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	605a      	str	r2, [r3, #4]
    hdma_spi2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80015f8:	4b1a      	ldr	r3, [pc, #104]	; (8001664 <HAL_I2S_MspInit+0x130>)
 80015fa:	2240      	movs	r2, #64	; 0x40
 80015fc:	609a      	str	r2, [r3, #8]
    hdma_spi2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80015fe:	4b19      	ldr	r3, [pc, #100]	; (8001664 <HAL_I2S_MspInit+0x130>)
 8001600:	2200      	movs	r2, #0
 8001602:	60da      	str	r2, [r3, #12]
    hdma_spi2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001604:	4b17      	ldr	r3, [pc, #92]	; (8001664 <HAL_I2S_MspInit+0x130>)
 8001606:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800160a:	611a      	str	r2, [r3, #16]
    hdma_spi2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800160c:	4b15      	ldr	r3, [pc, #84]	; (8001664 <HAL_I2S_MspInit+0x130>)
 800160e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001612:	615a      	str	r2, [r3, #20]
    hdma_spi2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001614:	4b13      	ldr	r3, [pc, #76]	; (8001664 <HAL_I2S_MspInit+0x130>)
 8001616:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800161a:	619a      	str	r2, [r3, #24]
    hdma_spi2_tx.Init.Mode = DMA_CIRCULAR;
 800161c:	4b11      	ldr	r3, [pc, #68]	; (8001664 <HAL_I2S_MspInit+0x130>)
 800161e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001622:	61da      	str	r2, [r3, #28]
    hdma_spi2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001624:	4b0f      	ldr	r3, [pc, #60]	; (8001664 <HAL_I2S_MspInit+0x130>)
 8001626:	2200      	movs	r2, #0
 8001628:	621a      	str	r2, [r3, #32]
    hdma_spi2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800162a:	4b0e      	ldr	r3, [pc, #56]	; (8001664 <HAL_I2S_MspInit+0x130>)
 800162c:	2200      	movs	r2, #0
 800162e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_tx) != HAL_OK)
 8001630:	480c      	ldr	r0, [pc, #48]	; (8001664 <HAL_I2S_MspInit+0x130>)
 8001632:	f000 fb0f 	bl	8001c54 <HAL_DMA_Init>
 8001636:	4603      	mov	r3, r0
 8001638:	2b00      	cmp	r3, #0
 800163a:	d001      	beq.n	8001640 <HAL_I2S_MspInit+0x10c>
    {
      Error_Handler();
 800163c:	f7ff fe54 	bl	80012e8 <Error_Handler>
    }

    __HAL_LINKDMA(hi2s,hdmatx,hdma_spi2_tx);
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	4a08      	ldr	r2, [pc, #32]	; (8001664 <HAL_I2S_MspInit+0x130>)
 8001644:	639a      	str	r2, [r3, #56]	; 0x38
 8001646:	4a07      	ldr	r2, [pc, #28]	; (8001664 <HAL_I2S_MspInit+0x130>)
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800164c:	bf00      	nop
 800164e:	3728      	adds	r7, #40	; 0x28
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	40003800 	.word	0x40003800
 8001658:	40023800 	.word	0x40023800
 800165c:	40020800 	.word	0x40020800
 8001660:	40020400 	.word	0x40020400
 8001664:	200036d0 	.word	0x200036d0
 8001668:	40026070 	.word	0x40026070

0800166c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b08a      	sub	sp, #40	; 0x28
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	2200      	movs	r2, #0
 800167a:	601a      	str	r2, [r3, #0]
 800167c:	605a      	str	r2, [r3, #4]
 800167e:	609a      	str	r2, [r3, #8]
 8001680:	60da      	str	r2, [r3, #12]
 8001682:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a31      	ldr	r2, [pc, #196]	; (8001750 <HAL_SPI_MspInit+0xe4>)
 800168a:	4293      	cmp	r3, r2
 800168c:	d15c      	bne.n	8001748 <HAL_SPI_MspInit+0xdc>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800168e:	2300      	movs	r3, #0
 8001690:	613b      	str	r3, [r7, #16]
 8001692:	4b30      	ldr	r3, [pc, #192]	; (8001754 <HAL_SPI_MspInit+0xe8>)
 8001694:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001696:	4a2f      	ldr	r2, [pc, #188]	; (8001754 <HAL_SPI_MspInit+0xe8>)
 8001698:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800169c:	6453      	str	r3, [r2, #68]	; 0x44
 800169e:	4b2d      	ldr	r3, [pc, #180]	; (8001754 <HAL_SPI_MspInit+0xe8>)
 80016a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016a2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016a6:	613b      	str	r3, [r7, #16]
 80016a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016aa:	2300      	movs	r3, #0
 80016ac:	60fb      	str	r3, [r7, #12]
 80016ae:	4b29      	ldr	r3, [pc, #164]	; (8001754 <HAL_SPI_MspInit+0xe8>)
 80016b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016b2:	4a28      	ldr	r2, [pc, #160]	; (8001754 <HAL_SPI_MspInit+0xe8>)
 80016b4:	f043 0301 	orr.w	r3, r3, #1
 80016b8:	6313      	str	r3, [r2, #48]	; 0x30
 80016ba:	4b26      	ldr	r3, [pc, #152]	; (8001754 <HAL_SPI_MspInit+0xe8>)
 80016bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016be:	f003 0301 	and.w	r3, r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
 80016c4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_7;
 80016c6:	23b0      	movs	r3, #176	; 0xb0
 80016c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ca:	2302      	movs	r3, #2
 80016cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ce:	2300      	movs	r3, #0
 80016d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016d2:	2303      	movs	r3, #3
 80016d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80016d6:	2305      	movs	r3, #5
 80016d8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016da:	f107 0314 	add.w	r3, r7, #20
 80016de:	4619      	mov	r1, r3
 80016e0:	481d      	ldr	r0, [pc, #116]	; (8001758 <HAL_SPI_MspInit+0xec>)
 80016e2:	f000 fe25 	bl	8002330 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream0;
 80016e6:	4b1d      	ldr	r3, [pc, #116]	; (800175c <HAL_SPI_MspInit+0xf0>)
 80016e8:	4a1d      	ldr	r2, [pc, #116]	; (8001760 <HAL_SPI_MspInit+0xf4>)
 80016ea:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80016ec:	4b1b      	ldr	r3, [pc, #108]	; (800175c <HAL_SPI_MspInit+0xf0>)
 80016ee:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80016f2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80016f4:	4b19      	ldr	r3, [pc, #100]	; (800175c <HAL_SPI_MspInit+0xf0>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016fa:	4b18      	ldr	r3, [pc, #96]	; (800175c <HAL_SPI_MspInit+0xf0>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001700:	4b16      	ldr	r3, [pc, #88]	; (800175c <HAL_SPI_MspInit+0xf0>)
 8001702:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001706:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001708:	4b14      	ldr	r3, [pc, #80]	; (800175c <HAL_SPI_MspInit+0xf0>)
 800170a:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800170e:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001710:	4b12      	ldr	r3, [pc, #72]	; (800175c <HAL_SPI_MspInit+0xf0>)
 8001712:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001716:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_CIRCULAR;
 8001718:	4b10      	ldr	r3, [pc, #64]	; (800175c <HAL_SPI_MspInit+0xf0>)
 800171a:	f44f 7280 	mov.w	r2, #256	; 0x100
 800171e:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001720:	4b0e      	ldr	r3, [pc, #56]	; (800175c <HAL_SPI_MspInit+0xf0>)
 8001722:	2200      	movs	r2, #0
 8001724:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001726:	4b0d      	ldr	r3, [pc, #52]	; (800175c <HAL_SPI_MspInit+0xf0>)
 8001728:	2200      	movs	r2, #0
 800172a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 800172c:	480b      	ldr	r0, [pc, #44]	; (800175c <HAL_SPI_MspInit+0xf0>)
 800172e:	f000 fa91 	bl	8001c54 <HAL_DMA_Init>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <HAL_SPI_MspInit+0xd0>
    {
      Error_Handler();
 8001738:	f7ff fdd6 	bl	80012e8 <Error_Handler>
    }

    __HAL_LINKDMA(hspi,hdmarx,hdma_spi1_rx);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	4a07      	ldr	r2, [pc, #28]	; (800175c <HAL_SPI_MspInit+0xf0>)
 8001740:	64da      	str	r2, [r3, #76]	; 0x4c
 8001742:	4a06      	ldr	r2, [pc, #24]	; (800175c <HAL_SPI_MspInit+0xf0>)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001748:	bf00      	nop
 800174a:	3728      	adds	r7, #40	; 0x28
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	40013000 	.word	0x40013000
 8001754:	40023800 	.word	0x40023800
 8001758:	40020000 	.word	0x40020000
 800175c:	20003670 	.word	0x20003670
 8001760:	40026410 	.word	0x40026410

08001764 <HAL_HCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hhcd: HCD handle pointer
* @retval None
*/
void HAL_HCD_MspInit(HCD_HandleTypeDef* hhcd)
{
 8001764:	b580      	push	{r7, lr}
 8001766:	b08a      	sub	sp, #40	; 0x28
 8001768:	af00      	add	r7, sp, #0
 800176a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800176c:	f107 0314 	add.w	r3, r7, #20
 8001770:	2200      	movs	r2, #0
 8001772:	601a      	str	r2, [r3, #0]
 8001774:	605a      	str	r2, [r3, #4]
 8001776:	609a      	str	r2, [r3, #8]
 8001778:	60da      	str	r2, [r3, #12]
 800177a:	611a      	str	r2, [r3, #16]
  if(hhcd->Instance==USB_OTG_FS)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001784:	d132      	bne.n	80017ec <HAL_HCD_MspInit+0x88>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	613b      	str	r3, [r7, #16]
 800178a:	4b1a      	ldr	r3, [pc, #104]	; (80017f4 <HAL_HCD_MspInit+0x90>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a19      	ldr	r2, [pc, #100]	; (80017f4 <HAL_HCD_MspInit+0x90>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b17      	ldr	r3, [pc, #92]	; (80017f4 <HAL_HCD_MspInit+0x90>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	613b      	str	r3, [r7, #16]
 80017a0:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80017a2:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80017a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80017b4:	230a      	movs	r3, #10
 80017b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017b8:	f107 0314 	add.w	r3, r7, #20
 80017bc:	4619      	mov	r1, r3
 80017be:	480e      	ldr	r0, [pc, #56]	; (80017f8 <HAL_HCD_MspInit+0x94>)
 80017c0:	f000 fdb6 	bl	8002330 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80017c4:	4b0b      	ldr	r3, [pc, #44]	; (80017f4 <HAL_HCD_MspInit+0x90>)
 80017c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80017c8:	4a0a      	ldr	r2, [pc, #40]	; (80017f4 <HAL_HCD_MspInit+0x90>)
 80017ca:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80017ce:	6353      	str	r3, [r2, #52]	; 0x34
 80017d0:	2300      	movs	r3, #0
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <HAL_HCD_MspInit+0x90>)
 80017d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017d8:	4a06      	ldr	r2, [pc, #24]	; (80017f4 <HAL_HCD_MspInit+0x90>)
 80017da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80017de:	6453      	str	r3, [r2, #68]	; 0x44
 80017e0:	4b04      	ldr	r3, [pc, #16]	; (80017f4 <HAL_HCD_MspInit+0x90>)
 80017e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80017e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80017e8:	60fb      	str	r3, [r7, #12]
 80017ea:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80017ec:	bf00      	nop
 80017ee:	3728      	adds	r7, #40	; 0x28
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	40023800 	.word	0x40023800
 80017f8:	40020000 	.word	0x40020000

080017fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <NMI_Handler+0x4>

08001802 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <HardFault_Handler+0x4>

08001808 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <MemManage_Handler+0x4>

0800180e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001812:	e7fe      	b.n	8001812 <BusFault_Handler+0x4>

08001814 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001814:	b480      	push	{r7}
 8001816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001818:	e7fe      	b.n	8001818 <UsageFault_Handler+0x4>

0800181a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800181a:	b480      	push	{r7}
 800181c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800181e:	bf00      	nop
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr

08001828 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001828:	b480      	push	{r7}
 800182a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800182c:	bf00      	nop
 800182e:	46bd      	mov	sp, r7
 8001830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001834:	4770      	bx	lr

08001836 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001836:	b480      	push	{r7}
 8001838:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800183a:	bf00      	nop
 800183c:	46bd      	mov	sp, r7
 800183e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001842:	4770      	bx	lr

08001844 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001848:	f000 f8b0 	bl	80019ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800184c:	bf00      	nop
 800184e:	bd80      	pop	{r7, pc}

08001850 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8001854:	2001      	movs	r0, #1
 8001856:	f000 ff1f 	bl	8002698 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800185a:	bf00      	nop
 800185c:	bd80      	pop	{r7, pc}
	...

08001860 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_tx);
 8001864:	4802      	ldr	r0, [pc, #8]	; (8001870 <DMA1_Stream4_IRQHandler+0x10>)
 8001866:	f000 fafb 	bl	8001e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800186a:	bf00      	nop
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	200036d0 	.word	0x200036d0

08001874 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001878:	4802      	ldr	r0, [pc, #8]	; (8001884 <DMA2_Stream0_IRQHandler+0x10>)
 800187a:	f000 faf1 	bl	8001e60 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800187e:	bf00      	nop
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	20003670 	.word	0x20003670

08001888 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800188c:	4b08      	ldr	r3, [pc, #32]	; (80018b0 <SystemInit+0x28>)
 800188e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001892:	4a07      	ldr	r2, [pc, #28]	; (80018b0 <SystemInit+0x28>)
 8001894:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001898:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800189c:	4b04      	ldr	r3, [pc, #16]	; (80018b0 <SystemInit+0x28>)
 800189e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80018a2:	609a      	str	r2, [r3, #8]
#endif
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ac:	4770      	bx	lr
 80018ae:	bf00      	nop
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80018b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80018ec <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80018b8:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80018ba:	e003      	b.n	80018c4 <LoopCopyDataInit>

080018bc <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80018bc:	4b0c      	ldr	r3, [pc, #48]	; (80018f0 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80018be:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80018c0:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80018c2:	3104      	adds	r1, #4

080018c4 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80018c4:	480b      	ldr	r0, [pc, #44]	; (80018f4 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80018c6:	4b0c      	ldr	r3, [pc, #48]	; (80018f8 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80018c8:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80018ca:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80018cc:	d3f6      	bcc.n	80018bc <CopyDataInit>
  ldr  r2, =_sbss
 80018ce:	4a0b      	ldr	r2, [pc, #44]	; (80018fc <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80018d0:	e002      	b.n	80018d8 <LoopFillZerobss>

080018d2 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80018d2:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80018d4:	f842 3b04 	str.w	r3, [r2], #4

080018d8 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80018d8:	4b09      	ldr	r3, [pc, #36]	; (8001900 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80018da:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80018dc:	d3f9      	bcc.n	80018d2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80018de:	f7ff ffd3 	bl	8001888 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018e2:	f002 fcd5 	bl	8004290 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80018e6:	f7ff faf7 	bl	8000ed8 <main>
  bx  lr    
 80018ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80018ec:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80018f0:	08006500 	.word	0x08006500
  ldr  r0, =_sdata
 80018f4:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80018f8:	20000074 	.word	0x20000074
  ldr  r2, =_sbss
 80018fc:	20000074 	.word	0x20000074
  ldr  r3, = _ebss
 8001900:	20003788 	.word	0x20003788

08001904 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001904:	e7fe      	b.n	8001904 <ADC_IRQHandler>
	...

08001908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001908:	b580      	push	{r7, lr}
 800190a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800190c:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <HAL_Init+0x40>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4a0d      	ldr	r2, [pc, #52]	; (8001948 <HAL_Init+0x40>)
 8001912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001916:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001918:	4b0b      	ldr	r3, [pc, #44]	; (8001948 <HAL_Init+0x40>)
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	4a0a      	ldr	r2, [pc, #40]	; (8001948 <HAL_Init+0x40>)
 800191e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001922:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001924:	4b08      	ldr	r3, [pc, #32]	; (8001948 <HAL_Init+0x40>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a07      	ldr	r2, [pc, #28]	; (8001948 <HAL_Init+0x40>)
 800192a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800192e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001930:	2003      	movs	r0, #3
 8001932:	f000 f94d 	bl	8001bd0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001936:	2000      	movs	r0, #0
 8001938:	f000 f808 	bl	800194c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800193c:	f7ff fdd2 	bl	80014e4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001940:	2300      	movs	r3, #0
}
 8001942:	4618      	mov	r0, r3
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	40023c00 	.word	0x40023c00

0800194c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001954:	4b12      	ldr	r3, [pc, #72]	; (80019a0 <HAL_InitTick+0x54>)
 8001956:	681a      	ldr	r2, [r3, #0]
 8001958:	4b12      	ldr	r3, [pc, #72]	; (80019a4 <HAL_InitTick+0x58>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	4619      	mov	r1, r3
 800195e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001962:	fbb3 f3f1 	udiv	r3, r3, r1
 8001966:	fbb2 f3f3 	udiv	r3, r2, r3
 800196a:	4618      	mov	r0, r3
 800196c:	f000 f965 	bl	8001c3a <HAL_SYSTICK_Config>
 8001970:	4603      	mov	r3, r0
 8001972:	2b00      	cmp	r3, #0
 8001974:	d001      	beq.n	800197a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001976:	2301      	movs	r3, #1
 8001978:	e00e      	b.n	8001998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	2b0f      	cmp	r3, #15
 800197e:	d80a      	bhi.n	8001996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001980:	2200      	movs	r2, #0
 8001982:	6879      	ldr	r1, [r7, #4]
 8001984:	f04f 30ff 	mov.w	r0, #4294967295
 8001988:	f000 f92d 	bl	8001be6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800198c:	4a06      	ldr	r2, [pc, #24]	; (80019a8 <HAL_InitTick+0x5c>)
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001992:	2300      	movs	r3, #0
 8001994:	e000      	b.n	8001998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001996:	2301      	movs	r3, #1
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000000 	.word	0x20000000
 80019a4:	20000008 	.word	0x20000008
 80019a8:	20000004 	.word	0x20000004

080019ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80019b0:	4b06      	ldr	r3, [pc, #24]	; (80019cc <HAL_IncTick+0x20>)
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	461a      	mov	r2, r3
 80019b6:	4b06      	ldr	r3, [pc, #24]	; (80019d0 <HAL_IncTick+0x24>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4413      	add	r3, r2
 80019bc:	4a04      	ldr	r2, [pc, #16]	; (80019d0 <HAL_IncTick+0x24>)
 80019be:	6013      	str	r3, [r2, #0]
}
 80019c0:	bf00      	nop
 80019c2:	46bd      	mov	sp, r7
 80019c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c8:	4770      	bx	lr
 80019ca:	bf00      	nop
 80019cc:	20000008 	.word	0x20000008
 80019d0:	20003784 	.word	0x20003784

080019d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019d4:	b480      	push	{r7}
 80019d6:	af00      	add	r7, sp, #0
  return uwTick;
 80019d8:	4b03      	ldr	r3, [pc, #12]	; (80019e8 <HAL_GetTick+0x14>)
 80019da:	681b      	ldr	r3, [r3, #0]
}
 80019dc:	4618      	mov	r0, r3
 80019de:	46bd      	mov	sp, r7
 80019e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e4:	4770      	bx	lr
 80019e6:	bf00      	nop
 80019e8:	20003784 	.word	0x20003784

080019ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b084      	sub	sp, #16
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019f4:	f7ff ffee 	bl	80019d4 <HAL_GetTick>
 80019f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019fe:	68fb      	ldr	r3, [r7, #12]
 8001a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a04:	d005      	beq.n	8001a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a06:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <HAL_Delay+0x40>)
 8001a08:	781b      	ldrb	r3, [r3, #0]
 8001a0a:	461a      	mov	r2, r3
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4413      	add	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a12:	bf00      	nop
 8001a14:	f7ff ffde 	bl	80019d4 <HAL_GetTick>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	1ad3      	subs	r3, r2, r3
 8001a1e:	68fa      	ldr	r2, [r7, #12]
 8001a20:	429a      	cmp	r2, r3
 8001a22:	d8f7      	bhi.n	8001a14 <HAL_Delay+0x28>
  {
  }
}
 8001a24:	bf00      	nop
 8001a26:	3710      	adds	r7, #16
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	20000008 	.word	0x20000008

08001a30 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a30:	b480      	push	{r7}
 8001a32:	b085      	sub	sp, #20
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	f003 0307 	and.w	r3, r3, #7
 8001a3e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001a40:	4b0c      	ldr	r3, [pc, #48]	; (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a42:	68db      	ldr	r3, [r3, #12]
 8001a44:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001a46:	68ba      	ldr	r2, [r7, #8]
 8001a48:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001a4c:	4013      	ands	r3, r2
 8001a4e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001a54:	68bb      	ldr	r3, [r7, #8]
 8001a56:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001a58:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001a5c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001a60:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001a62:	4a04      	ldr	r2, [pc, #16]	; (8001a74 <__NVIC_SetPriorityGrouping+0x44>)
 8001a64:	68bb      	ldr	r3, [r7, #8]
 8001a66:	60d3      	str	r3, [r2, #12]
}
 8001a68:	bf00      	nop
 8001a6a:	3714      	adds	r7, #20
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr
 8001a74:	e000ed00 	.word	0xe000ed00

08001a78 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001a78:	b480      	push	{r7}
 8001a7a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001a7c:	4b04      	ldr	r3, [pc, #16]	; (8001a90 <__NVIC_GetPriorityGrouping+0x18>)
 8001a7e:	68db      	ldr	r3, [r3, #12]
 8001a80:	0a1b      	lsrs	r3, r3, #8
 8001a82:	f003 0307 	and.w	r3, r3, #7
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr
 8001a90:	e000ed00 	.word	0xe000ed00

08001a94 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a94:	b480      	push	{r7}
 8001a96:	b083      	sub	sp, #12
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	4603      	mov	r3, r0
 8001a9c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	db0b      	blt.n	8001abe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001aa6:	79fb      	ldrb	r3, [r7, #7]
 8001aa8:	f003 021f 	and.w	r2, r3, #31
 8001aac:	4907      	ldr	r1, [pc, #28]	; (8001acc <__NVIC_EnableIRQ+0x38>)
 8001aae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab2:	095b      	lsrs	r3, r3, #5
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	fa00 f202 	lsl.w	r2, r0, r2
 8001aba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001abe:	bf00      	nop
 8001ac0:	370c      	adds	r7, #12
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac8:	4770      	bx	lr
 8001aca:	bf00      	nop
 8001acc:	e000e100 	.word	0xe000e100

08001ad0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	6039      	str	r1, [r7, #0]
 8001ada:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001adc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	db0a      	blt.n	8001afa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ae4:	683b      	ldr	r3, [r7, #0]
 8001ae6:	b2da      	uxtb	r2, r3
 8001ae8:	490c      	ldr	r1, [pc, #48]	; (8001b1c <__NVIC_SetPriority+0x4c>)
 8001aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aee:	0112      	lsls	r2, r2, #4
 8001af0:	b2d2      	uxtb	r2, r2
 8001af2:	440b      	add	r3, r1
 8001af4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001af8:	e00a      	b.n	8001b10 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001afa:	683b      	ldr	r3, [r7, #0]
 8001afc:	b2da      	uxtb	r2, r3
 8001afe:	4908      	ldr	r1, [pc, #32]	; (8001b20 <__NVIC_SetPriority+0x50>)
 8001b00:	79fb      	ldrb	r3, [r7, #7]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	3b04      	subs	r3, #4
 8001b08:	0112      	lsls	r2, r2, #4
 8001b0a:	b2d2      	uxtb	r2, r2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	761a      	strb	r2, [r3, #24]
}
 8001b10:	bf00      	nop
 8001b12:	370c      	adds	r7, #12
 8001b14:	46bd      	mov	sp, r7
 8001b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b1a:	4770      	bx	lr
 8001b1c:	e000e100 	.word	0xe000e100
 8001b20:	e000ed00 	.word	0xe000ed00

08001b24 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b480      	push	{r7}
 8001b26:	b089      	sub	sp, #36	; 0x24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60f8      	str	r0, [r7, #12]
 8001b2c:	60b9      	str	r1, [r7, #8]
 8001b2e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b30:	68fb      	ldr	r3, [r7, #12]
 8001b32:	f003 0307 	and.w	r3, r3, #7
 8001b36:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	f1c3 0307 	rsb	r3, r3, #7
 8001b3e:	2b04      	cmp	r3, #4
 8001b40:	bf28      	it	cs
 8001b42:	2304      	movcs	r3, #4
 8001b44:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	3304      	adds	r3, #4
 8001b4a:	2b06      	cmp	r3, #6
 8001b4c:	d902      	bls.n	8001b54 <NVIC_EncodePriority+0x30>
 8001b4e:	69fb      	ldr	r3, [r7, #28]
 8001b50:	3b03      	subs	r3, #3
 8001b52:	e000      	b.n	8001b56 <NVIC_EncodePriority+0x32>
 8001b54:	2300      	movs	r3, #0
 8001b56:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b58:	f04f 32ff 	mov.w	r2, #4294967295
 8001b5c:	69bb      	ldr	r3, [r7, #24]
 8001b5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001b62:	43da      	mvns	r2, r3
 8001b64:	68bb      	ldr	r3, [r7, #8]
 8001b66:	401a      	ands	r2, r3
 8001b68:	697b      	ldr	r3, [r7, #20]
 8001b6a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43d9      	mvns	r1, r3
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001b7c:	4313      	orrs	r3, r2
         );
}
 8001b7e:	4618      	mov	r0, r3
 8001b80:	3724      	adds	r7, #36	; 0x24
 8001b82:	46bd      	mov	sp, r7
 8001b84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b88:	4770      	bx	lr
	...

08001b8c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b082      	sub	sp, #8
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	3b01      	subs	r3, #1
 8001b98:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b9c:	d301      	bcc.n	8001ba2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e00f      	b.n	8001bc2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ba2:	4a0a      	ldr	r2, [pc, #40]	; (8001bcc <SysTick_Config+0x40>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3b01      	subs	r3, #1
 8001ba8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001baa:	210f      	movs	r1, #15
 8001bac:	f04f 30ff 	mov.w	r0, #4294967295
 8001bb0:	f7ff ff8e 	bl	8001ad0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001bb4:	4b05      	ldr	r3, [pc, #20]	; (8001bcc <SysTick_Config+0x40>)
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001bba:	4b04      	ldr	r3, [pc, #16]	; (8001bcc <SysTick_Config+0x40>)
 8001bbc:	2207      	movs	r2, #7
 8001bbe:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001bc0:	2300      	movs	r3, #0
}
 8001bc2:	4618      	mov	r0, r3
 8001bc4:	3708      	adds	r7, #8
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}
 8001bca:	bf00      	nop
 8001bcc:	e000e010 	.word	0xe000e010

08001bd0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001bd8:	6878      	ldr	r0, [r7, #4]
 8001bda:	f7ff ff29 	bl	8001a30 <__NVIC_SetPriorityGrouping>
}
 8001bde:	bf00      	nop
 8001be0:	3708      	adds	r7, #8
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b086      	sub	sp, #24
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	4603      	mov	r3, r0
 8001bee:	60b9      	str	r1, [r7, #8]
 8001bf0:	607a      	str	r2, [r7, #4]
 8001bf2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001bf4:	2300      	movs	r3, #0
 8001bf6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001bf8:	f7ff ff3e 	bl	8001a78 <__NVIC_GetPriorityGrouping>
 8001bfc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001bfe:	687a      	ldr	r2, [r7, #4]
 8001c00:	68b9      	ldr	r1, [r7, #8]
 8001c02:	6978      	ldr	r0, [r7, #20]
 8001c04:	f7ff ff8e 	bl	8001b24 <NVIC_EncodePriority>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c0e:	4611      	mov	r1, r2
 8001c10:	4618      	mov	r0, r3
 8001c12:	f7ff ff5d 	bl	8001ad0 <__NVIC_SetPriority>
}
 8001c16:	bf00      	nop
 8001c18:	3718      	adds	r7, #24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	bd80      	pop	{r7, pc}

08001c1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c1e:	b580      	push	{r7, lr}
 8001c20:	b082      	sub	sp, #8
 8001c22:	af00      	add	r7, sp, #0
 8001c24:	4603      	mov	r3, r0
 8001c26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	f7ff ff31 	bl	8001a94 <__NVIC_EnableIRQ>
}
 8001c32:	bf00      	nop
 8001c34:	3708      	adds	r7, #8
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bd80      	pop	{r7, pc}

08001c3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c3a:	b580      	push	{r7, lr}
 8001c3c:	b082      	sub	sp, #8
 8001c3e:	af00      	add	r7, sp, #0
 8001c40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001c42:	6878      	ldr	r0, [r7, #4]
 8001c44:	f7ff ffa2 	bl	8001b8c <SysTick_Config>
 8001c48:	4603      	mov	r3, r0
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3708      	adds	r7, #8
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b086      	sub	sp, #24
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001c5c:	2300      	movs	r3, #0
 8001c5e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001c60:	f7ff feb8 	bl	80019d4 <HAL_GetTick>
 8001c64:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d101      	bne.n	8001c70 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
 8001c6e:	e099      	b.n	8001da4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	2200      	movs	r2, #0
 8001c74:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	2202      	movs	r2, #2
 8001c7c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	681a      	ldr	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f022 0201 	bic.w	r2, r2, #1
 8001c8e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001c90:	e00f      	b.n	8001cb2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001c92:	f7ff fe9f 	bl	80019d4 <HAL_GetTick>
 8001c96:	4602      	mov	r2, r0
 8001c98:	693b      	ldr	r3, [r7, #16]
 8001c9a:	1ad3      	subs	r3, r2, r3
 8001c9c:	2b05      	cmp	r3, #5
 8001c9e:	d908      	bls.n	8001cb2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	2220      	movs	r2, #32
 8001ca4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2203      	movs	r2, #3
 8001caa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001cae:	2303      	movs	r3, #3
 8001cb0:	e078      	b.n	8001da4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	f003 0301 	and.w	r3, r3, #1
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	d1e8      	bne.n	8001c92 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	681b      	ldr	r3, [r3, #0]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001cc8:	697a      	ldr	r2, [r7, #20]
 8001cca:	4b38      	ldr	r3, [pc, #224]	; (8001dac <HAL_DMA_Init+0x158>)
 8001ccc:	4013      	ands	r3, r2
 8001cce:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	685a      	ldr	r2, [r3, #4]
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	689b      	ldr	r3, [r3, #8]
 8001cd8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cde:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	691b      	ldr	r3, [r3, #16]
 8001ce4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001cea:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	699b      	ldr	r3, [r3, #24]
 8001cf0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001cf6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6a1b      	ldr	r3, [r3, #32]
 8001cfc:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001cfe:	697a      	ldr	r2, [r7, #20]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d08:	2b04      	cmp	r3, #4
 8001d0a:	d107      	bne.n	8001d1c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001d14:	4313      	orrs	r3, r2
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4313      	orrs	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	697a      	ldr	r2, [r7, #20]
 8001d22:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	681b      	ldr	r3, [r3, #0]
 8001d28:	695b      	ldr	r3, [r3, #20]
 8001d2a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001d2c:	697b      	ldr	r3, [r7, #20]
 8001d2e:	f023 0307 	bic.w	r3, r3, #7
 8001d32:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d38:	697a      	ldr	r2, [r7, #20]
 8001d3a:	4313      	orrs	r3, r2
 8001d3c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d42:	2b04      	cmp	r3, #4
 8001d44:	d117      	bne.n	8001d76 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d00e      	beq.n	8001d76 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001d58:	6878      	ldr	r0, [r7, #4]
 8001d5a:	f000 fa6f 	bl	800223c <DMA_CheckFifoParam>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	2b00      	cmp	r3, #0
 8001d62:	d008      	beq.n	8001d76 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	2240      	movs	r2, #64	; 0x40
 8001d68:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001d72:	2301      	movs	r3, #1
 8001d74:	e016      	b.n	8001da4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	697a      	ldr	r2, [r7, #20]
 8001d7c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001d7e:	6878      	ldr	r0, [r7, #4]
 8001d80:	f000 fa26 	bl	80021d0 <DMA_CalcBaseAndBitshift>
 8001d84:	4603      	mov	r3, r0
 8001d86:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8c:	223f      	movs	r2, #63	; 0x3f
 8001d8e:	409a      	lsls	r2, r3
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	2200      	movs	r2, #0
 8001d98:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2201      	movs	r2, #1
 8001d9e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001da2:	2300      	movs	r3, #0
}
 8001da4:	4618      	mov	r0, r3
 8001da6:	3718      	adds	r7, #24
 8001da8:	46bd      	mov	sp, r7
 8001daa:	bd80      	pop	{r7, pc}
 8001dac:	f010803f 	.word	0xf010803f

08001db0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b086      	sub	sp, #24
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	60f8      	str	r0, [r7, #12]
 8001db8:	60b9      	str	r1, [r7, #8]
 8001dba:	607a      	str	r2, [r7, #4]
 8001dbc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001dce:	2b01      	cmp	r3, #1
 8001dd0:	d101      	bne.n	8001dd6 <HAL_DMA_Start_IT+0x26>
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	e040      	b.n	8001e58 <HAL_DMA_Start_IT+0xa8>
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	2201      	movs	r2, #1
 8001dda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001dde:	68fb      	ldr	r3, [r7, #12]
 8001de0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001de4:	b2db      	uxtb	r3, r3
 8001de6:	2b01      	cmp	r3, #1
 8001de8:	d12f      	bne.n	8001e4a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2202      	movs	r2, #2
 8001dee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	2200      	movs	r2, #0
 8001df6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	687a      	ldr	r2, [r7, #4]
 8001dfc:	68b9      	ldr	r1, [r7, #8]
 8001dfe:	68f8      	ldr	r0, [r7, #12]
 8001e00:	f000 f9b8 	bl	8002174 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e08:	223f      	movs	r2, #63	; 0x3f
 8001e0a:	409a      	lsls	r2, r3
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001e10:	68fb      	ldr	r3, [r7, #12]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	681a      	ldr	r2, [r3, #0]
 8001e16:	68fb      	ldr	r3, [r7, #12]
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	f042 0216 	orr.w	r2, r2, #22
 8001e1e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d007      	beq.n	8001e38 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	681a      	ldr	r2, [r3, #0]
 8001e2e:	68fb      	ldr	r3, [r7, #12]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f042 0208 	orr.w	r2, r2, #8
 8001e36:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	681a      	ldr	r2, [r3, #0]
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	f042 0201 	orr.w	r2, r2, #1
 8001e46:	601a      	str	r2, [r3, #0]
 8001e48:	e005      	b.n	8001e56 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	2200      	movs	r2, #0
 8001e4e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001e52:	2302      	movs	r3, #2
 8001e54:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001e56:	7dfb      	ldrb	r3, [r7, #23]
}
 8001e58:	4618      	mov	r0, r3
 8001e5a:	3718      	adds	r7, #24
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	bd80      	pop	{r7, pc}

08001e60 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001e6c:	4b92      	ldr	r3, [pc, #584]	; (80020b8 <HAL_DMA_IRQHandler+0x258>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	4a92      	ldr	r2, [pc, #584]	; (80020bc <HAL_DMA_IRQHandler+0x25c>)
 8001e72:	fba2 2303 	umull	r2, r3, r2, r3
 8001e76:	0a9b      	lsrs	r3, r3, #10
 8001e78:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e7e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e8a:	2208      	movs	r2, #8
 8001e8c:	409a      	lsls	r2, r3
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	4013      	ands	r3, r2
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d01a      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0304 	and.w	r3, r3, #4
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d013      	beq.n	8001ecc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681a      	ldr	r2, [r3, #0]
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f022 0204 	bic.w	r2, r2, #4
 8001eb2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eb8:	2208      	movs	r2, #8
 8001eba:	409a      	lsls	r2, r3
 8001ebc:	693b      	ldr	r3, [r7, #16]
 8001ebe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ec4:	f043 0201 	orr.w	r2, r3, #1
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	409a      	lsls	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	4013      	ands	r3, r2
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d012      	beq.n	8001f02 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	695b      	ldr	r3, [r3, #20]
 8001ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d00b      	beq.n	8001f02 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eee:	2201      	movs	r2, #1
 8001ef0:	409a      	lsls	r2, r3
 8001ef2:	693b      	ldr	r3, [r7, #16]
 8001ef4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001efa:	f043 0202 	orr.w	r2, r3, #2
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f06:	2204      	movs	r2, #4
 8001f08:	409a      	lsls	r2, r3
 8001f0a:	68fb      	ldr	r3, [r7, #12]
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d012      	beq.n	8001f38 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d00b      	beq.n	8001f38 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f24:	2204      	movs	r2, #4
 8001f26:	409a      	lsls	r2, r3
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001f30:	f043 0204 	orr.w	r2, r3, #4
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f3c:	2210      	movs	r2, #16
 8001f3e:	409a      	lsls	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4013      	ands	r3, r2
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d043      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	681b      	ldr	r3, [r3, #0]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0308 	and.w	r3, r3, #8
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d03c      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f5a:	2210      	movs	r2, #16
 8001f5c:	409a      	lsls	r2, r3
 8001f5e:	693b      	ldr	r3, [r7, #16]
 8001f60:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d018      	beq.n	8001fa2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d108      	bne.n	8001f90 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d024      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	6878      	ldr	r0, [r7, #4]
 8001f8c:	4798      	blx	r3
 8001f8e:	e01f      	b.n	8001fd0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f94:	2b00      	cmp	r3, #0
 8001f96:	d01b      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f9c:	6878      	ldr	r0, [r7, #4]
 8001f9e:	4798      	blx	r3
 8001fa0:	e016      	b.n	8001fd0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d107      	bne.n	8001fc0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	681a      	ldr	r2, [r3, #0]
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f022 0208 	bic.w	r2, r2, #8
 8001fbe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d003      	beq.n	8001fd0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fd4:	2220      	movs	r2, #32
 8001fd6:	409a      	lsls	r2, r3
 8001fd8:	68fb      	ldr	r3, [r7, #12]
 8001fda:	4013      	ands	r3, r2
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	f000 808e 	beq.w	80020fe <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	f003 0310 	and.w	r3, r3, #16
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	f000 8086 	beq.w	80020fe <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ff6:	2220      	movs	r2, #32
 8001ff8:	409a      	lsls	r2, r3
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002004:	b2db      	uxtb	r3, r3
 8002006:	2b05      	cmp	r3, #5
 8002008:	d136      	bne.n	8002078 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	681a      	ldr	r2, [r3, #0]
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f022 0216 	bic.w	r2, r2, #22
 8002018:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	681b      	ldr	r3, [r3, #0]
 800201e:	695a      	ldr	r2, [r3, #20]
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002028:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	2b00      	cmp	r3, #0
 8002030:	d103      	bne.n	800203a <HAL_DMA_IRQHandler+0x1da>
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002036:	2b00      	cmp	r3, #0
 8002038:	d007      	beq.n	800204a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	681a      	ldr	r2, [r3, #0]
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f022 0208 	bic.w	r2, r2, #8
 8002048:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800204e:	223f      	movs	r2, #63	; 0x3f
 8002050:	409a      	lsls	r2, r3
 8002052:	693b      	ldr	r3, [r7, #16]
 8002054:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2200      	movs	r2, #0
 800205a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	2201      	movs	r2, #1
 8002062:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800206a:	2b00      	cmp	r3, #0
 800206c:	d07d      	beq.n	800216a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	4798      	blx	r3
        }
        return;
 8002076:	e078      	b.n	800216a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002082:	2b00      	cmp	r3, #0
 8002084:	d01c      	beq.n	80020c0 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002090:	2b00      	cmp	r3, #0
 8002092:	d108      	bne.n	80020a6 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002098:	2b00      	cmp	r3, #0
 800209a:	d030      	beq.n	80020fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	4798      	blx	r3
 80020a4:	e02b      	b.n	80020fe <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d027      	beq.n	80020fe <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	4798      	blx	r3
 80020b6:	e022      	b.n	80020fe <HAL_DMA_IRQHandler+0x29e>
 80020b8:	20000000 	.word	0x20000000
 80020bc:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d10f      	bne.n	80020ee <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0210 	bic.w	r2, r2, #16
 80020dc:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	2201      	movs	r2, #1
 80020ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80020fa:	6878      	ldr	r0, [r7, #4]
 80020fc:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002102:	2b00      	cmp	r3, #0
 8002104:	d032      	beq.n	800216c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800210a:	f003 0301 	and.w	r3, r3, #1
 800210e:	2b00      	cmp	r3, #0
 8002110:	d022      	beq.n	8002158 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	2205      	movs	r2, #5
 8002116:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	681a      	ldr	r2, [r3, #0]
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	f022 0201 	bic.w	r2, r2, #1
 8002128:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	3301      	adds	r3, #1
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	697a      	ldr	r2, [r7, #20]
 8002132:	429a      	cmp	r2, r3
 8002134:	d307      	bcc.n	8002146 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 0301 	and.w	r3, r3, #1
 8002140:	2b00      	cmp	r3, #0
 8002142:	d1f2      	bne.n	800212a <HAL_DMA_IRQHandler+0x2ca>
 8002144:	e000      	b.n	8002148 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002146:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	2200      	movs	r2, #0
 800214c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	2201      	movs	r2, #1
 8002154:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800215c:	2b00      	cmp	r3, #0
 800215e:	d005      	beq.n	800216c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002164:	6878      	ldr	r0, [r7, #4]
 8002166:	4798      	blx	r3
 8002168:	e000      	b.n	800216c <HAL_DMA_IRQHandler+0x30c>
        return;
 800216a:	bf00      	nop
    }
  }
}
 800216c:	3718      	adds	r7, #24
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}
 8002172:	bf00      	nop

08002174 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
 8002180:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	681a      	ldr	r2, [r3, #0]
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002190:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002192:	68fb      	ldr	r3, [r7, #12]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	683a      	ldr	r2, [r7, #0]
 8002198:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	689b      	ldr	r3, [r3, #8]
 800219e:	2b40      	cmp	r3, #64	; 0x40
 80021a0:	d108      	bne.n	80021b4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	687a      	ldr	r2, [r7, #4]
 80021a8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	681b      	ldr	r3, [r3, #0]
 80021ae:	68ba      	ldr	r2, [r7, #8]
 80021b0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80021b2:	e007      	b.n	80021c4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	68ba      	ldr	r2, [r7, #8]
 80021ba:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	687a      	ldr	r2, [r7, #4]
 80021c2:	60da      	str	r2, [r3, #12]
}
 80021c4:	bf00      	nop
 80021c6:	3714      	adds	r7, #20
 80021c8:	46bd      	mov	sp, r7
 80021ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ce:	4770      	bx	lr

080021d0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	b2db      	uxtb	r3, r3
 80021de:	3b10      	subs	r3, #16
 80021e0:	4a14      	ldr	r2, [pc, #80]	; (8002234 <DMA_CalcBaseAndBitshift+0x64>)
 80021e2:	fba2 2303 	umull	r2, r3, r2, r3
 80021e6:	091b      	lsrs	r3, r3, #4
 80021e8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80021ea:	4a13      	ldr	r2, [pc, #76]	; (8002238 <DMA_CalcBaseAndBitshift+0x68>)
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	4413      	add	r3, r2
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	461a      	mov	r2, r3
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80021f8:	68fb      	ldr	r3, [r7, #12]
 80021fa:	2b03      	cmp	r3, #3
 80021fc:	d909      	bls.n	8002212 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002206:	f023 0303 	bic.w	r3, r3, #3
 800220a:	1d1a      	adds	r2, r3, #4
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	659a      	str	r2, [r3, #88]	; 0x58
 8002210:	e007      	b.n	8002222 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800221a:	f023 0303 	bic.w	r3, r3, #3
 800221e:	687a      	ldr	r2, [r7, #4]
 8002220:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002226:	4618      	mov	r0, r3
 8002228:	3714      	adds	r7, #20
 800222a:	46bd      	mov	sp, r7
 800222c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002230:	4770      	bx	lr
 8002232:	bf00      	nop
 8002234:	aaaaaaab 	.word	0xaaaaaaab
 8002238:	080062cc 	.word	0x080062cc

0800223c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800223c:	b480      	push	{r7}
 800223e:	b085      	sub	sp, #20
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002244:	2300      	movs	r3, #0
 8002246:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800224c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	699b      	ldr	r3, [r3, #24]
 8002252:	2b00      	cmp	r3, #0
 8002254:	d11f      	bne.n	8002296 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002256:	68bb      	ldr	r3, [r7, #8]
 8002258:	2b03      	cmp	r3, #3
 800225a:	d855      	bhi.n	8002308 <DMA_CheckFifoParam+0xcc>
 800225c:	a201      	add	r2, pc, #4	; (adr r2, 8002264 <DMA_CheckFifoParam+0x28>)
 800225e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002262:	bf00      	nop
 8002264:	08002275 	.word	0x08002275
 8002268:	08002287 	.word	0x08002287
 800226c:	08002275 	.word	0x08002275
 8002270:	08002309 	.word	0x08002309
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002278:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800227c:	2b00      	cmp	r3, #0
 800227e:	d045      	beq.n	800230c <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002284:	e042      	b.n	800230c <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800228a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800228e:	d13f      	bne.n	8002310 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8002290:	2301      	movs	r3, #1
 8002292:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002294:	e03c      	b.n	8002310 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	699b      	ldr	r3, [r3, #24]
 800229a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800229e:	d121      	bne.n	80022e4 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80022a0:	68bb      	ldr	r3, [r7, #8]
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	d836      	bhi.n	8002314 <DMA_CheckFifoParam+0xd8>
 80022a6:	a201      	add	r2, pc, #4	; (adr r2, 80022ac <DMA_CheckFifoParam+0x70>)
 80022a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ac:	080022bd 	.word	0x080022bd
 80022b0:	080022c3 	.word	0x080022c3
 80022b4:	080022bd 	.word	0x080022bd
 80022b8:	080022d5 	.word	0x080022d5
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80022bc:	2301      	movs	r3, #1
 80022be:	73fb      	strb	r3, [r7, #15]
      break;
 80022c0:	e02f      	b.n	8002322 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022c6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d024      	beq.n	8002318 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 80022ce:	2301      	movs	r3, #1
 80022d0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80022d2:	e021      	b.n	8002318 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80022dc:	d11e      	bne.n	800231c <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 80022de:	2301      	movs	r3, #1
 80022e0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80022e2:	e01b      	b.n	800231c <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80022e4:	68bb      	ldr	r3, [r7, #8]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d902      	bls.n	80022f0 <DMA_CheckFifoParam+0xb4>
 80022ea:	2b03      	cmp	r3, #3
 80022ec:	d003      	beq.n	80022f6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80022ee:	e018      	b.n	8002322 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 80022f0:	2301      	movs	r3, #1
 80022f2:	73fb      	strb	r3, [r7, #15]
      break;
 80022f4:	e015      	b.n	8002322 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022fa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d00e      	beq.n	8002320 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8002302:	2301      	movs	r3, #1
 8002304:	73fb      	strb	r3, [r7, #15]
      break;
 8002306:	e00b      	b.n	8002320 <DMA_CheckFifoParam+0xe4>
      break;
 8002308:	bf00      	nop
 800230a:	e00a      	b.n	8002322 <DMA_CheckFifoParam+0xe6>
      break;
 800230c:	bf00      	nop
 800230e:	e008      	b.n	8002322 <DMA_CheckFifoParam+0xe6>
      break;
 8002310:	bf00      	nop
 8002312:	e006      	b.n	8002322 <DMA_CheckFifoParam+0xe6>
      break;
 8002314:	bf00      	nop
 8002316:	e004      	b.n	8002322 <DMA_CheckFifoParam+0xe6>
      break;
 8002318:	bf00      	nop
 800231a:	e002      	b.n	8002322 <DMA_CheckFifoParam+0xe6>
      break;   
 800231c:	bf00      	nop
 800231e:	e000      	b.n	8002322 <DMA_CheckFifoParam+0xe6>
      break;
 8002320:	bf00      	nop
    }
  } 
  
  return status; 
 8002322:	7bfb      	ldrb	r3, [r7, #15]
}
 8002324:	4618      	mov	r0, r3
 8002326:	3714      	adds	r7, #20
 8002328:	46bd      	mov	sp, r7
 800232a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800232e:	4770      	bx	lr

08002330 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002330:	b480      	push	{r7}
 8002332:	b089      	sub	sp, #36	; 0x24
 8002334:	af00      	add	r7, sp, #0
 8002336:	6078      	str	r0, [r7, #4]
 8002338:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800233a:	2300      	movs	r3, #0
 800233c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002342:	2300      	movs	r3, #0
 8002344:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002346:	2300      	movs	r3, #0
 8002348:	61fb      	str	r3, [r7, #28]
 800234a:	e16b      	b.n	8002624 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800234c:	2201      	movs	r2, #1
 800234e:	69fb      	ldr	r3, [r7, #28]
 8002350:	fa02 f303 	lsl.w	r3, r2, r3
 8002354:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002356:	683b      	ldr	r3, [r7, #0]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	697a      	ldr	r2, [r7, #20]
 800235c:	4013      	ands	r3, r2
 800235e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002360:	693a      	ldr	r2, [r7, #16]
 8002362:	697b      	ldr	r3, [r7, #20]
 8002364:	429a      	cmp	r2, r3
 8002366:	f040 815a 	bne.w	800261e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800236a:	683b      	ldr	r3, [r7, #0]
 800236c:	685b      	ldr	r3, [r3, #4]
 800236e:	2b01      	cmp	r3, #1
 8002370:	d00b      	beq.n	800238a <HAL_GPIO_Init+0x5a>
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	2b02      	cmp	r3, #2
 8002378:	d007      	beq.n	800238a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800237a:	683b      	ldr	r3, [r7, #0]
 800237c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800237e:	2b11      	cmp	r3, #17
 8002380:	d003      	beq.n	800238a <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002382:	683b      	ldr	r3, [r7, #0]
 8002384:	685b      	ldr	r3, [r3, #4]
 8002386:	2b12      	cmp	r3, #18
 8002388:	d130      	bne.n	80023ec <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	689b      	ldr	r3, [r3, #8]
 800238e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002390:	69fb      	ldr	r3, [r7, #28]
 8002392:	005b      	lsls	r3, r3, #1
 8002394:	2203      	movs	r2, #3
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	68da      	ldr	r2, [r3, #12]
 80023a6:	69fb      	ldr	r3, [r7, #28]
 80023a8:	005b      	lsls	r3, r3, #1
 80023aa:	fa02 f303 	lsl.w	r3, r2, r3
 80023ae:	69ba      	ldr	r2, [r7, #24]
 80023b0:	4313      	orrs	r3, r2
 80023b2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	69ba      	ldr	r2, [r7, #24]
 80023b8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	685b      	ldr	r3, [r3, #4]
 80023be:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80023c0:	2201      	movs	r2, #1
 80023c2:	69fb      	ldr	r3, [r7, #28]
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	091b      	lsrs	r3, r3, #4
 80023d6:	f003 0201 	and.w	r2, r3, #1
 80023da:	69fb      	ldr	r3, [r7, #28]
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	69ba      	ldr	r2, [r7, #24]
 80023ea:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	68db      	ldr	r3, [r3, #12]
 80023f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	005b      	lsls	r3, r3, #1
 80023f6:	2203      	movs	r2, #3
 80023f8:	fa02 f303 	lsl.w	r3, r2, r3
 80023fc:	43db      	mvns	r3, r3
 80023fe:	69ba      	ldr	r2, [r7, #24]
 8002400:	4013      	ands	r3, r2
 8002402:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002404:	683b      	ldr	r3, [r7, #0]
 8002406:	689a      	ldr	r2, [r3, #8]
 8002408:	69fb      	ldr	r3, [r7, #28]
 800240a:	005b      	lsls	r3, r3, #1
 800240c:	fa02 f303 	lsl.w	r3, r2, r3
 8002410:	69ba      	ldr	r2, [r7, #24]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	69ba      	ldr	r2, [r7, #24]
 800241a:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	2b02      	cmp	r3, #2
 8002422:	d003      	beq.n	800242c <HAL_GPIO_Init+0xfc>
 8002424:	683b      	ldr	r3, [r7, #0]
 8002426:	685b      	ldr	r3, [r3, #4]
 8002428:	2b12      	cmp	r3, #18
 800242a:	d123      	bne.n	8002474 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800242c:	69fb      	ldr	r3, [r7, #28]
 800242e:	08da      	lsrs	r2, r3, #3
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	3208      	adds	r2, #8
 8002434:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002438:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	f003 0307 	and.w	r3, r3, #7
 8002440:	009b      	lsls	r3, r3, #2
 8002442:	220f      	movs	r2, #15
 8002444:	fa02 f303 	lsl.w	r3, r2, r3
 8002448:	43db      	mvns	r3, r3
 800244a:	69ba      	ldr	r2, [r7, #24]
 800244c:	4013      	ands	r3, r2
 800244e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	691a      	ldr	r2, [r3, #16]
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	009b      	lsls	r3, r3, #2
 800245c:	fa02 f303 	lsl.w	r3, r2, r3
 8002460:	69ba      	ldr	r2, [r7, #24]
 8002462:	4313      	orrs	r3, r2
 8002464:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002466:	69fb      	ldr	r3, [r7, #28]
 8002468:	08da      	lsrs	r2, r3, #3
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	3208      	adds	r2, #8
 800246e:	69b9      	ldr	r1, [r7, #24]
 8002470:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800247a:	69fb      	ldr	r3, [r7, #28]
 800247c:	005b      	lsls	r3, r3, #1
 800247e:	2203      	movs	r2, #3
 8002480:	fa02 f303 	lsl.w	r3, r2, r3
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f003 0203 	and.w	r2, r3, #3
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	005b      	lsls	r3, r3, #1
 8002498:	fa02 f303 	lsl.w	r3, r2, r3
 800249c:	69ba      	ldr	r2, [r7, #24]
 800249e:	4313      	orrs	r3, r2
 80024a0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	69ba      	ldr	r2, [r7, #24]
 80024a6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024a8:	683b      	ldr	r3, [r7, #0]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 80b4 	beq.w	800261e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024b6:	2300      	movs	r3, #0
 80024b8:	60fb      	str	r3, [r7, #12]
 80024ba:	4b5f      	ldr	r3, [pc, #380]	; (8002638 <HAL_GPIO_Init+0x308>)
 80024bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024be:	4a5e      	ldr	r2, [pc, #376]	; (8002638 <HAL_GPIO_Init+0x308>)
 80024c0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80024c4:	6453      	str	r3, [r2, #68]	; 0x44
 80024c6:	4b5c      	ldr	r3, [pc, #368]	; (8002638 <HAL_GPIO_Init+0x308>)
 80024c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80024ca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80024ce:	60fb      	str	r3, [r7, #12]
 80024d0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80024d2:	4a5a      	ldr	r2, [pc, #360]	; (800263c <HAL_GPIO_Init+0x30c>)
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	089b      	lsrs	r3, r3, #2
 80024d8:	3302      	adds	r3, #2
 80024da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80024de:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80024e0:	69fb      	ldr	r3, [r7, #28]
 80024e2:	f003 0303 	and.w	r3, r3, #3
 80024e6:	009b      	lsls	r3, r3, #2
 80024e8:	220f      	movs	r2, #15
 80024ea:	fa02 f303 	lsl.w	r3, r2, r3
 80024ee:	43db      	mvns	r3, r3
 80024f0:	69ba      	ldr	r2, [r7, #24]
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	4a51      	ldr	r2, [pc, #324]	; (8002640 <HAL_GPIO_Init+0x310>)
 80024fa:	4293      	cmp	r3, r2
 80024fc:	d02b      	beq.n	8002556 <HAL_GPIO_Init+0x226>
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	4a50      	ldr	r2, [pc, #320]	; (8002644 <HAL_GPIO_Init+0x314>)
 8002502:	4293      	cmp	r3, r2
 8002504:	d025      	beq.n	8002552 <HAL_GPIO_Init+0x222>
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	4a4f      	ldr	r2, [pc, #316]	; (8002648 <HAL_GPIO_Init+0x318>)
 800250a:	4293      	cmp	r3, r2
 800250c:	d01f      	beq.n	800254e <HAL_GPIO_Init+0x21e>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	4a4e      	ldr	r2, [pc, #312]	; (800264c <HAL_GPIO_Init+0x31c>)
 8002512:	4293      	cmp	r3, r2
 8002514:	d019      	beq.n	800254a <HAL_GPIO_Init+0x21a>
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	4a4d      	ldr	r2, [pc, #308]	; (8002650 <HAL_GPIO_Init+0x320>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d013      	beq.n	8002546 <HAL_GPIO_Init+0x216>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	4a4c      	ldr	r2, [pc, #304]	; (8002654 <HAL_GPIO_Init+0x324>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d00d      	beq.n	8002542 <HAL_GPIO_Init+0x212>
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	4a4b      	ldr	r2, [pc, #300]	; (8002658 <HAL_GPIO_Init+0x328>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d007      	beq.n	800253e <HAL_GPIO_Init+0x20e>
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	4a4a      	ldr	r2, [pc, #296]	; (800265c <HAL_GPIO_Init+0x32c>)
 8002532:	4293      	cmp	r3, r2
 8002534:	d101      	bne.n	800253a <HAL_GPIO_Init+0x20a>
 8002536:	2307      	movs	r3, #7
 8002538:	e00e      	b.n	8002558 <HAL_GPIO_Init+0x228>
 800253a:	2308      	movs	r3, #8
 800253c:	e00c      	b.n	8002558 <HAL_GPIO_Init+0x228>
 800253e:	2306      	movs	r3, #6
 8002540:	e00a      	b.n	8002558 <HAL_GPIO_Init+0x228>
 8002542:	2305      	movs	r3, #5
 8002544:	e008      	b.n	8002558 <HAL_GPIO_Init+0x228>
 8002546:	2304      	movs	r3, #4
 8002548:	e006      	b.n	8002558 <HAL_GPIO_Init+0x228>
 800254a:	2303      	movs	r3, #3
 800254c:	e004      	b.n	8002558 <HAL_GPIO_Init+0x228>
 800254e:	2302      	movs	r3, #2
 8002550:	e002      	b.n	8002558 <HAL_GPIO_Init+0x228>
 8002552:	2301      	movs	r3, #1
 8002554:	e000      	b.n	8002558 <HAL_GPIO_Init+0x228>
 8002556:	2300      	movs	r3, #0
 8002558:	69fa      	ldr	r2, [r7, #28]
 800255a:	f002 0203 	and.w	r2, r2, #3
 800255e:	0092      	lsls	r2, r2, #2
 8002560:	4093      	lsls	r3, r2
 8002562:	69ba      	ldr	r2, [r7, #24]
 8002564:	4313      	orrs	r3, r2
 8002566:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002568:	4934      	ldr	r1, [pc, #208]	; (800263c <HAL_GPIO_Init+0x30c>)
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	089b      	lsrs	r3, r3, #2
 800256e:	3302      	adds	r3, #2
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002576:	4b3a      	ldr	r3, [pc, #232]	; (8002660 <HAL_GPIO_Init+0x330>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	43db      	mvns	r3, r3
 8002580:	69ba      	ldr	r2, [r7, #24]
 8002582:	4013      	ands	r3, r2
 8002584:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002586:	683b      	ldr	r3, [r7, #0]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800258e:	2b00      	cmp	r3, #0
 8002590:	d003      	beq.n	800259a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800259a:	4a31      	ldr	r2, [pc, #196]	; (8002660 <HAL_GPIO_Init+0x330>)
 800259c:	69bb      	ldr	r3, [r7, #24]
 800259e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80025a0:	4b2f      	ldr	r3, [pc, #188]	; (8002660 <HAL_GPIO_Init+0x330>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025a6:	693b      	ldr	r3, [r7, #16]
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d003      	beq.n	80025c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80025bc:	69ba      	ldr	r2, [r7, #24]
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	4313      	orrs	r3, r2
 80025c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80025c4:	4a26      	ldr	r2, [pc, #152]	; (8002660 <HAL_GPIO_Init+0x330>)
 80025c6:	69bb      	ldr	r3, [r7, #24]
 80025c8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80025ca:	4b25      	ldr	r3, [pc, #148]	; (8002660 <HAL_GPIO_Init+0x330>)
 80025cc:	689b      	ldr	r3, [r3, #8]
 80025ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	43db      	mvns	r3, r3
 80025d4:	69ba      	ldr	r2, [r7, #24]
 80025d6:	4013      	ands	r3, r2
 80025d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025da:	683b      	ldr	r3, [r7, #0]
 80025dc:	685b      	ldr	r3, [r3, #4]
 80025de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d003      	beq.n	80025ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80025e6:	69ba      	ldr	r2, [r7, #24]
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	4313      	orrs	r3, r2
 80025ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80025ee:	4a1c      	ldr	r2, [pc, #112]	; (8002660 <HAL_GPIO_Init+0x330>)
 80025f0:	69bb      	ldr	r3, [r7, #24]
 80025f2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80025f4:	4b1a      	ldr	r3, [pc, #104]	; (8002660 <HAL_GPIO_Init+0x330>)
 80025f6:	68db      	ldr	r3, [r3, #12]
 80025f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	43db      	mvns	r3, r3
 80025fe:	69ba      	ldr	r2, [r7, #24]
 8002600:	4013      	ands	r3, r2
 8002602:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	685b      	ldr	r3, [r3, #4]
 8002608:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d003      	beq.n	8002618 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002610:	69ba      	ldr	r2, [r7, #24]
 8002612:	693b      	ldr	r3, [r7, #16]
 8002614:	4313      	orrs	r3, r2
 8002616:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002618:	4a11      	ldr	r2, [pc, #68]	; (8002660 <HAL_GPIO_Init+0x330>)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800261e:	69fb      	ldr	r3, [r7, #28]
 8002620:	3301      	adds	r3, #1
 8002622:	61fb      	str	r3, [r7, #28]
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	2b0f      	cmp	r3, #15
 8002628:	f67f ae90 	bls.w	800234c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800262c:	bf00      	nop
 800262e:	3724      	adds	r7, #36	; 0x24
 8002630:	46bd      	mov	sp, r7
 8002632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002636:	4770      	bx	lr
 8002638:	40023800 	.word	0x40023800
 800263c:	40013800 	.word	0x40013800
 8002640:	40020000 	.word	0x40020000
 8002644:	40020400 	.word	0x40020400
 8002648:	40020800 	.word	0x40020800
 800264c:	40020c00 	.word	0x40020c00
 8002650:	40021000 	.word	0x40021000
 8002654:	40021400 	.word	0x40021400
 8002658:	40021800 	.word	0x40021800
 800265c:	40021c00 	.word	0x40021c00
 8002660:	40013c00 	.word	0x40013c00

08002664 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002664:	b480      	push	{r7}
 8002666:	b083      	sub	sp, #12
 8002668:	af00      	add	r7, sp, #0
 800266a:	6078      	str	r0, [r7, #4]
 800266c:	460b      	mov	r3, r1
 800266e:	807b      	strh	r3, [r7, #2]
 8002670:	4613      	mov	r3, r2
 8002672:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002674:	787b      	ldrb	r3, [r7, #1]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d003      	beq.n	8002682 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800267a:	887a      	ldrh	r2, [r7, #2]
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002680:	e003      	b.n	800268a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002682:	887b      	ldrh	r3, [r7, #2]
 8002684:	041a      	lsls	r2, r3, #16
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	619a      	str	r2, [r3, #24]
}
 800268a:	bf00      	nop
 800268c:	370c      	adds	r7, #12
 800268e:	46bd      	mov	sp, r7
 8002690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002694:	4770      	bx	lr
	...

08002698 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	4603      	mov	r3, r0
 80026a0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80026a2:	4b08      	ldr	r3, [pc, #32]	; (80026c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026a4:	695a      	ldr	r2, [r3, #20]
 80026a6:	88fb      	ldrh	r3, [r7, #6]
 80026a8:	4013      	ands	r3, r2
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	d006      	beq.n	80026bc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80026ae:	4a05      	ldr	r2, [pc, #20]	; (80026c4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026b0:	88fb      	ldrh	r3, [r7, #6]
 80026b2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80026b4:	88fb      	ldrh	r3, [r7, #6]
 80026b6:	4618      	mov	r0, r3
 80026b8:	f000 f806 	bl	80026c8 <HAL_GPIO_EXTI_Callback>
  }
}
 80026bc:	bf00      	nop
 80026be:	3708      	adds	r7, #8
 80026c0:	46bd      	mov	sp, r7
 80026c2:	bd80      	pop	{r7, pc}
 80026c4:	40013c00 	.word	0x40013c00

080026c8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b083      	sub	sp, #12
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	4603      	mov	r3, r0
 80026d0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80026d2:	bf00      	nop
 80026d4:	370c      	adds	r7, #12
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr

080026de <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 80026de:	b5f0      	push	{r4, r5, r6, r7, lr}
 80026e0:	b08f      	sub	sp, #60	; 0x3c
 80026e2:	af0a      	add	r7, sp, #40	; 0x28
 80026e4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d101      	bne.n	80026f0 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 80026ec:	2301      	movs	r3, #1
 80026ee:	e054      	b.n	800279a <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	f893 32b9 	ldrb.w	r3, [r3, #697]	; 0x2b9
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d106      	bne.n	8002710 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2200      	movs	r2, #0
 8002706:	f883 22b8 	strb.w	r2, [r3, #696]	; 0x2b8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 800270a:	6878      	ldr	r0, [r7, #4]
 800270c:	f7ff f82a 	bl	8001764 <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	2203      	movs	r2, #3
 8002714:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800271c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002720:	2b00      	cmp	r3, #0
 8002722:	d102      	bne.n	800272a <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	2200      	movs	r2, #0
 8002728:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4618      	mov	r0, r3
 8002730:	f001 fbfb 	bl	8003f2a <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	603b      	str	r3, [r7, #0]
 800273a:	687e      	ldr	r6, [r7, #4]
 800273c:	466d      	mov	r5, sp
 800273e:	f106 0410 	add.w	r4, r6, #16
 8002742:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002744:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002746:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002748:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800274a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800274e:	e885 0003 	stmia.w	r5, {r0, r1}
 8002752:	1d33      	adds	r3, r6, #4
 8002754:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002756:	6838      	ldr	r0, [r7, #0]
 8002758:	f001 fb86 	bl	8003e68 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	2101      	movs	r1, #1
 8002762:	4618      	mov	r0, r3
 8002764:	f001 fbf2 	bl	8003f4c <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	603b      	str	r3, [r7, #0]
 800276e:	687e      	ldr	r6, [r7, #4]
 8002770:	466d      	mov	r5, sp
 8002772:	f106 0410 	add.w	r4, r6, #16
 8002776:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002778:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800277a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800277c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800277e:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002782:	e885 0003 	stmia.w	r5, {r0, r1}
 8002786:	1d33      	adds	r3, r6, #4
 8002788:	cb0e      	ldmia	r3, {r1, r2, r3}
 800278a:	6838      	ldr	r0, [r7, #0]
 800278c:	f001 fc84 	bl	8004098 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	2201      	movs	r2, #1
 8002794:	f883 22b9 	strb.w	r2, [r3, #697]	; 0x2b9

  return HAL_OK;
 8002798:	2300      	movs	r3, #0
}
 800279a:	4618      	mov	r0, r3
 800279c:	3714      	adds	r7, #20
 800279e:	46bd      	mov	sp, r7
 80027a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

080027a4 <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 80027a4:	b580      	push	{r7, lr}
 80027a6:	b088      	sub	sp, #32
 80027a8:	af00      	add	r7, sp, #0
 80027aa:	6078      	str	r0, [r7, #4]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)
  uint16_t tmpreg;
#endif

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d101      	bne.n	80027b6 <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 80027b2:	2301      	movs	r3, #1
 80027b4:	e128      	b.n	8002a08 <HAL_I2S_Init+0x264>
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));
  assert_param(IS_I2S_CLOCKSOURCE(hi2s->Init.ClockSource));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80027bc:	b2db      	uxtb	r3, r3
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d109      	bne.n	80027d6 <HAL_I2S_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Initialize Default I2S IrqHandler ISR */
    hi2s->IrqHandlerISR = I2S_IRQHandler;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	4a90      	ldr	r2, [pc, #576]	; (8002a10 <HAL_I2S_Init+0x26c>)
 80027ce:	635a      	str	r2, [r3, #52]	; 0x34

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 80027d0:	6878      	ldr	r0, [r7, #4]
 80027d2:	f7fe feaf 	bl	8001534 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2202      	movs	r2, #2
 80027da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	69db      	ldr	r3, [r3, #28]
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	6812      	ldr	r2, [r2, #0]
 80027e8:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 80027ec:	f023 030f 	bic.w	r3, r3, #15
 80027f0:	61d3      	str	r3, [r2, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	2202      	movs	r2, #2
 80027f8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	695b      	ldr	r3, [r3, #20]
 80027fe:	2b02      	cmp	r3, #2
 8002800:	d060      	beq.n	80028c4 <HAL_I2S_Init+0x120>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	68db      	ldr	r3, [r3, #12]
 8002806:	2b00      	cmp	r3, #0
 8002808:	d102      	bne.n	8002810 <HAL_I2S_Init+0x6c>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800280a:	2310      	movs	r3, #16
 800280c:	617b      	str	r3, [r7, #20]
 800280e:	e001      	b.n	8002814 <HAL_I2S_Init+0x70>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 8002810:	2320      	movs	r3, #32
 8002812:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	689b      	ldr	r3, [r3, #8]
 8002818:	2b20      	cmp	r3, #32
 800281a:	d802      	bhi.n	8002822 <HAL_I2S_Init+0x7e>
    {
      /* In I2S standard packet lenght is multiplied by 2 */
      packetlength = packetlength * 2U;
 800281c:	697b      	ldr	r3, [r7, #20]
 800281e:	005b      	lsls	r3, r3, #1
 8002820:	617b      	str	r3, [r7, #20]
    else
    {
      i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S_APB2);
    }
#else
    i2sclk = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_I2S);
 8002822:	2001      	movs	r0, #1
 8002824:	f001 fa60 	bl	8003ce8 <HAL_RCCEx_GetPeriphCLKFreq>
 8002828:	60f8      	str	r0, [r7, #12]
#endif

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	691b      	ldr	r3, [r3, #16]
 800282e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002832:	d125      	bne.n	8002880 <HAL_I2S_Init+0xdc>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d010      	beq.n	800285e <HAL_I2S_Init+0xba>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800283c:	697b      	ldr	r3, [r7, #20]
 800283e:	009b      	lsls	r3, r3, #2
 8002840:	68fa      	ldr	r2, [r7, #12]
 8002842:	fbb2 f2f3 	udiv	r2, r2, r3
 8002846:	4613      	mov	r3, r2
 8002848:	009b      	lsls	r3, r3, #2
 800284a:	4413      	add	r3, r2
 800284c:	005b      	lsls	r3, r3, #1
 800284e:	461a      	mov	r2, r3
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	695b      	ldr	r3, [r3, #20]
 8002854:	fbb2 f3f3 	udiv	r3, r2, r3
 8002858:	3305      	adds	r3, #5
 800285a:	613b      	str	r3, [r7, #16]
 800285c:	e01f      	b.n	800289e <HAL_I2S_Init+0xfa>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	00db      	lsls	r3, r3, #3
 8002862:	68fa      	ldr	r2, [r7, #12]
 8002864:	fbb2 f2f3 	udiv	r2, r2, r3
 8002868:	4613      	mov	r3, r2
 800286a:	009b      	lsls	r3, r3, #2
 800286c:	4413      	add	r3, r2
 800286e:	005b      	lsls	r3, r3, #1
 8002870:	461a      	mov	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	695b      	ldr	r3, [r3, #20]
 8002876:	fbb2 f3f3 	udiv	r3, r2, r3
 800287a:	3305      	adds	r3, #5
 800287c:	613b      	str	r3, [r7, #16]
 800287e:	e00e      	b.n	800289e <HAL_I2S_Init+0xfa>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	697b      	ldr	r3, [r7, #20]
 8002884:	fbb2 f2f3 	udiv	r2, r2, r3
 8002888:	4613      	mov	r3, r2
 800288a:	009b      	lsls	r3, r3, #2
 800288c:	4413      	add	r3, r2
 800288e:	005b      	lsls	r3, r3, #1
 8002890:	461a      	mov	r2, r3
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	695b      	ldr	r3, [r3, #20]
 8002896:	fbb2 f3f3 	udiv	r3, r2, r3
 800289a:	3305      	adds	r3, #5
 800289c:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4a5c      	ldr	r2, [pc, #368]	; (8002a14 <HAL_I2S_Init+0x270>)
 80028a2:	fba2 2303 	umull	r2, r3, r2, r3
 80028a6:	08db      	lsrs	r3, r3, #3
 80028a8:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 80028aa:	693b      	ldr	r3, [r7, #16]
 80028ac:	f003 0301 	and.w	r3, r3, #1
 80028b0:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 80028b2:	693a      	ldr	r2, [r7, #16]
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	1ad3      	subs	r3, r2, r3
 80028b8:	085b      	lsrs	r3, r3, #1
 80028ba:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	021b      	lsls	r3, r3, #8
 80028c0:	61bb      	str	r3, [r7, #24]
 80028c2:	e003      	b.n	80028cc <HAL_I2S_Init+0x128>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 80028c4:	2302      	movs	r3, #2
 80028c6:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 80028c8:	2300      	movs	r3, #0
 80028ca:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 80028cc:	69fb      	ldr	r3, [r7, #28]
 80028ce:	2b01      	cmp	r3, #1
 80028d0:	d902      	bls.n	80028d8 <HAL_I2S_Init+0x134>
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	2bff      	cmp	r3, #255	; 0xff
 80028d6:	d907      	bls.n	80028e8 <HAL_I2S_Init+0x144>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028dc:	f043 0210 	orr.w	r2, r3, #16
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	645a      	str	r2, [r3, #68]	; 0x44
    return  HAL_ERROR;
 80028e4:	2301      	movs	r3, #1
 80028e6:	e08f      	b.n	8002a08 <HAL_I2S_Init+0x264>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	69bb      	ldr	r3, [r7, #24]
 80028ee:	ea42 0103 	orr.w	r1, r2, r3
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	69fa      	ldr	r2, [r7, #28]
 80028f8:	430a      	orrs	r2, r1
 80028fa:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	69db      	ldr	r3, [r3, #28]
 8002902:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002906:	f023 030f 	bic.w	r3, r3, #15
 800290a:	687a      	ldr	r2, [r7, #4]
 800290c:	6851      	ldr	r1, [r2, #4]
 800290e:	687a      	ldr	r2, [r7, #4]
 8002910:	6892      	ldr	r2, [r2, #8]
 8002912:	4311      	orrs	r1, r2
 8002914:	687a      	ldr	r2, [r7, #4]
 8002916:	68d2      	ldr	r2, [r2, #12]
 8002918:	4311      	orrs	r1, r2
 800291a:	687a      	ldr	r2, [r7, #4]
 800291c:	6992      	ldr	r2, [r2, #24]
 800291e:	430a      	orrs	r2, r1
 8002920:	431a      	orrs	r2, r3
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800292a:	61da      	str	r2, [r3, #28]
#if defined (SPI_I2S_FULLDUPLEX_SUPPORT)

  /* Configure the I2S extended if the full duplex mode is enabled */
  assert_param(IS_I2S_FULLDUPLEX_MODE(hi2s->Init.FullDuplexMode));

  if (hi2s->Init.FullDuplexMode == I2S_FULLDUPLEXMODE_ENABLE)
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6a1b      	ldr	r3, [r3, #32]
 8002930:	2b01      	cmp	r3, #1
 8002932:	d161      	bne.n	80029f8 <HAL_I2S_Init+0x254>
  {
    /* Set FullDuplex I2S IrqHandler ISR if FULLDUPLEXMODE is enabled */
    hi2s->IrqHandlerISR = HAL_I2SEx_FullDuplex_IRQHandler;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	4a38      	ldr	r2, [pc, #224]	; (8002a18 <HAL_I2S_Init+0x274>)
 8002938:	635a      	str	r2, [r3, #52]	; 0x34

    /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
    CLEAR_BIT(I2SxEXT(hi2s->Instance)->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	4a37      	ldr	r2, [pc, #220]	; (8002a1c <HAL_I2S_Init+0x278>)
 8002940:	4293      	cmp	r3, r2
 8002942:	d101      	bne.n	8002948 <HAL_I2S_Init+0x1a4>
 8002944:	4b36      	ldr	r3, [pc, #216]	; (8002a20 <HAL_I2S_Init+0x27c>)
 8002946:	e001      	b.n	800294c <HAL_I2S_Init+0x1a8>
 8002948:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800294c:	69db      	ldr	r3, [r3, #28]
 800294e:	687a      	ldr	r2, [r7, #4]
 8002950:	6812      	ldr	r2, [r2, #0]
 8002952:	4932      	ldr	r1, [pc, #200]	; (8002a1c <HAL_I2S_Init+0x278>)
 8002954:	428a      	cmp	r2, r1
 8002956:	d101      	bne.n	800295c <HAL_I2S_Init+0x1b8>
 8002958:	4a31      	ldr	r2, [pc, #196]	; (8002a20 <HAL_I2S_Init+0x27c>)
 800295a:	e001      	b.n	8002960 <HAL_I2S_Init+0x1bc>
 800295c:	f04f 2240 	mov.w	r2, #1073758208	; 0x40004000
 8002960:	f423 637b 	bic.w	r3, r3, #4016	; 0xfb0
 8002964:	f023 030f 	bic.w	r3, r3, #15
 8002968:	61d3      	str	r3, [r2, #28]
                                                 SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                                 SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
    I2SxEXT(hi2s->Instance)->I2SPR = 2U;
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	4a2b      	ldr	r2, [pc, #172]	; (8002a1c <HAL_I2S_Init+0x278>)
 8002970:	4293      	cmp	r3, r2
 8002972:	d101      	bne.n	8002978 <HAL_I2S_Init+0x1d4>
 8002974:	4b2a      	ldr	r3, [pc, #168]	; (8002a20 <HAL_I2S_Init+0x27c>)
 8002976:	e001      	b.n	800297c <HAL_I2S_Init+0x1d8>
 8002978:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800297c:	2202      	movs	r2, #2
 800297e:	621a      	str	r2, [r3, #32]

    /* Get the I2SCFGR register value */
    tmpreg = I2SxEXT(hi2s->Instance)->I2SCFGR;
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a25      	ldr	r2, [pc, #148]	; (8002a1c <HAL_I2S_Init+0x278>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d101      	bne.n	800298e <HAL_I2S_Init+0x1ea>
 800298a:	4b25      	ldr	r3, [pc, #148]	; (8002a20 <HAL_I2S_Init+0x27c>)
 800298c:	e001      	b.n	8002992 <HAL_I2S_Init+0x1ee>
 800298e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002992:	69db      	ldr	r3, [r3, #28]
 8002994:	817b      	strh	r3, [r7, #10]

    /* Get the mode to be configured for the extended I2S */
    if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800299e:	d003      	beq.n	80029a8 <HAL_I2S_Init+0x204>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	d103      	bne.n	80029b0 <HAL_I2S_Init+0x20c>
    {
      tmp = I2S_MODE_SLAVE_RX;
 80029a8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029ac:	613b      	str	r3, [r7, #16]
 80029ae:	e001      	b.n	80029b4 <HAL_I2S_Init+0x210>
    }
    else /* I2S_MODE_MASTER_RX ||  I2S_MODE_SLAVE_RX */
    {
      tmp = I2S_MODE_SLAVE_TX;
 80029b0:	2300      	movs	r3, #0
 80029b2:	613b      	str	r3, [r7, #16]
    }

    /* Configure the I2S Slave with the I2S Master parameter values */
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80029b4:	693b      	ldr	r3, [r7, #16]
 80029b6:	b29a      	uxth	r2, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	b299      	uxth	r1, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	b298      	uxth	r0, r3
                                    (uint16_t)hi2s->Init.CPOL))));
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	699b      	ldr	r3, [r3, #24]
 80029c8:	b29b      	uxth	r3, r3
                         (uint16_t)(hi2s->Init.Standard | (uint16_t)(hi2s->Init.DataFormat | \
 80029ca:	4303      	orrs	r3, r0
 80029cc:	b29b      	uxth	r3, r3
 80029ce:	430b      	orrs	r3, r1
 80029d0:	b29b      	uxth	r3, r3
    tmpreg |= (uint16_t)((uint16_t)SPI_I2SCFGR_I2SMOD | (uint16_t)(tmp | \
 80029d2:	4313      	orrs	r3, r2
 80029d4:	b29a      	uxth	r2, r3
 80029d6:	897b      	ldrh	r3, [r7, #10]
 80029d8:	4313      	orrs	r3, r2
 80029da:	b29b      	uxth	r3, r3
 80029dc:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80029e0:	817b      	strh	r3, [r7, #10]

    /* Write to SPIx I2SCFGR */
    WRITE_REG(I2SxEXT(hi2s->Instance)->I2SCFGR, tmpreg);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	681b      	ldr	r3, [r3, #0]
 80029e6:	4a0d      	ldr	r2, [pc, #52]	; (8002a1c <HAL_I2S_Init+0x278>)
 80029e8:	4293      	cmp	r3, r2
 80029ea:	d101      	bne.n	80029f0 <HAL_I2S_Init+0x24c>
 80029ec:	4b0c      	ldr	r3, [pc, #48]	; (8002a20 <HAL_I2S_Init+0x27c>)
 80029ee:	e001      	b.n	80029f4 <HAL_I2S_Init+0x250>
 80029f0:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 80029f4:	897a      	ldrh	r2, [r7, #10]
 80029f6:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2S_FULLDUPLEX_SUPPORT */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	2200      	movs	r2, #0
 80029fc:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->State     = HAL_I2S_STATE_READY;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	2201      	movs	r2, #1
 8002a02:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  return HAL_OK;
 8002a06:	2300      	movs	r3, #0
}
 8002a08:	4618      	mov	r0, r3
 8002a0a:	3720      	adds	r7, #32
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	08002d01 	.word	0x08002d01
 8002a14:	cccccccd 	.word	0xcccccccd
 8002a18:	08002e15 	.word	0x08002e15
 8002a1c:	40003800 	.word	0x40003800
 8002a20:	40003400 	.word	0x40003400

08002a24 <HAL_I2S_Transmit_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Transmit_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b086      	sub	sp, #24
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	60f8      	str	r0, [r7, #12]
 8002a2c:	60b9      	str	r1, [r7, #8]
 8002a2e:	4613      	mov	r3, r2
 8002a30:	80fb      	strh	r3, [r7, #6]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 8002a32:	68bb      	ldr	r3, [r7, #8]
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d002      	beq.n	8002a3e <HAL_I2S_Transmit_DMA+0x1a>
 8002a38:	88fb      	ldrh	r3, [r7, #6]
 8002a3a:	2b00      	cmp	r3, #0
 8002a3c:	d101      	bne.n	8002a42 <HAL_I2S_Transmit_DMA+0x1e>
  {
    return  HAL_ERROR;
 8002a3e:	2301      	movs	r3, #1
 8002a40:	e08e      	b.n	8002b60 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002a48:	b2db      	uxtb	r3, r3
 8002a4a:	2b01      	cmp	r3, #1
 8002a4c:	d101      	bne.n	8002a52 <HAL_I2S_Transmit_DMA+0x2e>
 8002a4e:	2302      	movs	r3, #2
 8002a50:	e086      	b.n	8002b60 <HAL_I2S_Transmit_DMA+0x13c>
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if (hi2s->State != HAL_I2S_STATE_READY)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002a60:	b2db      	uxtb	r3, r3
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d005      	beq.n	8002a72 <HAL_I2S_Transmit_DMA+0x4e>
  {
    __HAL_UNLOCK(hi2s);
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_BUSY;
 8002a6e:	2302      	movs	r3, #2
 8002a70:	e076      	b.n	8002b60 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_TX;
 8002a72:	68fb      	ldr	r3, [r7, #12]
 8002a74:	2203      	movs	r2, #3
 8002a76:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	645a      	str	r2, [r3, #68]	; 0x44
  hi2s->pTxBuffPtr = pData;
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	68ba      	ldr	r2, [r7, #8]
 8002a84:	625a      	str	r2, [r3, #36]	; 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	69db      	ldr	r3, [r3, #28]
 8002a8c:	f003 0307 	and.w	r3, r3, #7
 8002a90:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d002      	beq.n	8002a9e <HAL_I2S_Transmit_DMA+0x7a>
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	2b05      	cmp	r3, #5
 8002a9c:	d10a      	bne.n	8002ab4 <HAL_I2S_Transmit_DMA+0x90>
  {
    hi2s->TxXferSize = (Size << 1U);
 8002a9e:	88fb      	ldrh	r3, [r7, #6]
 8002aa0:	005b      	lsls	r3, r3, #1
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = (Size << 1U);
 8002aa8:	88fb      	ldrh	r3, [r7, #6]
 8002aaa:	005b      	lsls	r3, r3, #1
 8002aac:	b29a      	uxth	r2, r3
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
 8002ab2:	e005      	b.n	8002ac0 <HAL_I2S_Transmit_DMA+0x9c>
  }
  else
  {
    hi2s->TxXferSize = Size;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	88fa      	ldrh	r2, [r7, #6]
 8002ab8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2s->TxXferCount = Size;
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	88fa      	ldrh	r2, [r7, #6]
 8002abe:	855a      	strh	r2, [r3, #42]	; 0x2a
  }

  /* Set the I2S Tx DMA Half transfer complete callback */
  hi2s->hdmatx->XferHalfCpltCallback = I2S_DMATxHalfCplt;
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac4:	4a28      	ldr	r2, [pc, #160]	; (8002b68 <HAL_I2S_Transmit_DMA+0x144>)
 8002ac6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the I2S Tx DMA transfer complete callback */
  hi2s->hdmatx->XferCpltCallback = I2S_DMATxCplt;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002acc:	4a27      	ldr	r2, [pc, #156]	; (8002b6c <HAL_I2S_Transmit_DMA+0x148>)
 8002ace:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hi2s->hdmatx->XferErrorCallback = I2S_DMAError;
 8002ad0:	68fb      	ldr	r3, [r7, #12]
 8002ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ad4:	4a26      	ldr	r2, [pc, #152]	; (8002b70 <HAL_I2S_Transmit_DMA+0x14c>)
 8002ad6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	6b98      	ldr	r0, [r3, #56]	; 0x38
                                 (uint32_t)hi2s->pTxBuffPtr,
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002ae0:	4619      	mov	r1, r3
                                 (uint32_t)&hi2s->Instance->DR,
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	330c      	adds	r3, #12
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002ae8:	461a      	mov	r2, r3
                                 hi2s->TxXferSize))
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002aee:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmatx,
 8002af0:	f7ff f95e 	bl	8001db0 <HAL_DMA_Start_IT>
 8002af4:	4603      	mov	r3, r0
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d00f      	beq.n	8002b1a <HAL_I2S_Transmit_DMA+0xf6>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002afe:	f043 0208 	orr.w	r2, r3, #8
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	645a      	str	r2, [r3, #68]	; 0x44
    hi2s->State = HAL_I2S_STATE_READY;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2201      	movs	r2, #1
 8002b0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    __HAL_UNLOCK(hi2s);
 8002b0e:	68fb      	ldr	r3, [r7, #12]
 8002b10:	2200      	movs	r2, #0
 8002b12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    return HAL_ERROR;
 8002b16:	2301      	movs	r3, #1
 8002b18:	e022      	b.n	8002b60 <HAL_I2S_Transmit_DMA+0x13c>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69db      	ldr	r3, [r3, #28]
 8002b20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d107      	bne.n	8002b38 <HAL_I2S_Transmit_DMA+0x114>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	69da      	ldr	r2, [r3, #28]
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8002b36:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Tx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_TXDMAEN))
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f003 0302 	and.w	r3, r3, #2
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d107      	bne.n	8002b56 <HAL_I2S_Transmit_DMA+0x132>
  {
    /* Enable Tx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002b46:	68fb      	ldr	r3, [r7, #12]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	685a      	ldr	r2, [r3, #4]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	f042 0202 	orr.w	r2, r2, #2
 8002b54:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  return HAL_OK;
 8002b5e:	2300      	movs	r3, #0
}
 8002b60:	4618      	mov	r0, r3
 8002b62:	3718      	adds	r7, #24
 8002b64:	46bd      	mov	sp, r7
 8002b66:	bd80      	pop	{r7, pc}
 8002b68:	08002bdf 	.word	0x08002bdf
 8002b6c:	08002b9d 	.word	0x08002b9d
 8002b70:	08002bfb 	.word	0x08002bfb

08002b74 <HAL_I2S_RxCpltCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 8002b74:	b480      	push	{r7}
 8002b76:	b083      	sub	sp, #12
 8002b78:	af00      	add	r7, sp, #0
 8002b7a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_RxCpltCallback could be implemented in the user file
   */
}
 8002b7c:	bf00      	nop
 8002b7e:	370c      	adds	r7, #12
 8002b80:	46bd      	mov	sp, r7
 8002b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b86:	4770      	bx	lr

08002b88 <HAL_I2S_ErrorCallback>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
__weak void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s)
{
 8002b88:	b480      	push	{r7}
 8002b8a:	b083      	sub	sp, #12
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_I2S_ErrorCallback could be implemented in the user file
   */
}
 8002b90:	bf00      	nop
 8002b92:	370c      	adds	r7, #12
 8002b94:	46bd      	mov	sp, r7
 8002b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9a:	4770      	bx	lr

08002b9c <I2S_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b084      	sub	sp, #16
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ba8:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	69db      	ldr	r3, [r3, #28]
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d10e      	bne.n	8002bd0 <I2S_DMATxCplt+0x34>
  {
    /* Disable Tx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 8002bb2:	68fb      	ldr	r3, [r7, #12]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	685a      	ldr	r2, [r3, #4]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f022 0202 	bic.w	r2, r2, #2
 8002bc0:	605a      	str	r2, [r3, #4]

    hi2s->TxXferCount = 0U;
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }
  /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxCpltCallback(hi2s);
#else
  HAL_I2S_TxCpltCallback(hi2s);
 8002bd0:	68f8      	ldr	r0, [r7, #12]
 8002bd2:	f7fe fc77 	bl	80014c4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002bd6:	bf00      	nop
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <I2S_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8002bde:	b580      	push	{r7, lr}
 8002be0:	b084      	sub	sp, #16
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002bea:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->TxHalfCpltCallback(hi2s);
#else
  HAL_I2S_TxHalfCpltCallback(hi2s);
 8002bec:	68f8      	ldr	r0, [r7, #12]
 8002bee:	f7fe fc59 	bl	80014a4 <HAL_I2S_TxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002bf2:	bf00      	nop
 8002bf4:	3710      	adds	r7, #16
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bd80      	pop	{r7, pc}

08002bfa <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 8002bfa:	b580      	push	{r7, lr}
 8002bfc:	b084      	sub	sp, #16
 8002bfe:	af00      	add	r7, sp, #0
 8002c00:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002c06:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	685a      	ldr	r2, [r3, #4]
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f022 0203 	bic.w	r2, r2, #3
 8002c16:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2200      	movs	r2, #0
 8002c1c:	855a      	strh	r2, [r3, #42]	; 0x2a
  hi2s->RxXferCount = 0U;
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	865a      	strh	r2, [r3, #50]	; 0x32

  hi2s->State = HAL_I2S_STATE_READY;
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	2201      	movs	r2, #1
 8002c28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c30:	f043 0208 	orr.w	r2, r3, #8
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	645a      	str	r2, [r3, #68]	; 0x44
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 8002c38:	68f8      	ldr	r0, [r7, #12]
 8002c3a:	f7ff ffa5 	bl	8002b88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 8002c3e:	bf00      	nop
 8002c40:	3710      	adds	r7, #16
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <I2S_Transmit_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Transmit_IT(I2S_HandleTypeDef *hi2s)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b082      	sub	sp, #8
 8002c4a:	af00      	add	r7, sp, #0
 8002c4c:	6078      	str	r0, [r7, #4]
  /* Transmit data */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c52:	881a      	ldrh	r2, [r3, #0]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	60da      	str	r2, [r3, #12]
  hi2s->pTxBuffPtr++;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	1c9a      	adds	r2, r3, #2
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	625a      	str	r2, [r3, #36]	; 0x24
  hi2s->TxXferCount--;
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c68:	b29b      	uxth	r3, r3
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	b29a      	uxth	r2, r3
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c76:	b29b      	uxth	r3, r3
 8002c78:	2b00      	cmp	r3, #0
 8002c7a:	d10e      	bne.n	8002c9a <I2S_Transmit_IT+0x54>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	685a      	ldr	r2, [r3, #4]
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002c8a:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	2201      	movs	r2, #1
 8002c90:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Tx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->TxCpltCallback(hi2s);
#else
    HAL_I2S_TxCpltCallback(hi2s);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f7fe fc15 	bl	80014c4 <HAL_I2S_TxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002c9a:	bf00      	nop
 8002c9c:	3708      	adds	r7, #8
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	bd80      	pop	{r7, pc}

08002ca2 <I2S_Receive_IT>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_Receive_IT(I2S_HandleTypeDef *hi2s)
{
 8002ca2:	b580      	push	{r7, lr}
 8002ca4:	b082      	sub	sp, #8
 8002ca6:	af00      	add	r7, sp, #0
 8002ca8:	6078      	str	r0, [r7, #4]
  /* Receive data */
  (*hi2s->pRxBuffPtr) = (uint16_t)hi2s->Instance->DR;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	68da      	ldr	r2, [r3, #12]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cb4:	b292      	uxth	r2, r2
 8002cb6:	801a      	strh	r2, [r3, #0]
  hi2s->pRxBuffPtr++;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cbc:	1c9a      	adds	r2, r3, #2
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2s->RxXferCount--;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002cc6:	b29b      	uxth	r3, r3
 8002cc8:	3b01      	subs	r3, #1
 8002cca:	b29a      	uxth	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002cd4:	b29b      	uxth	r3, r3
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d10e      	bne.n	8002cf8 <I2S_Receive_IT+0x56>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	685a      	ldr	r2, [r3, #4]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ce8:	605a      	str	r2, [r3, #4]

    hi2s->State = HAL_I2S_STATE_READY;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	2201      	movs	r2, #1
 8002cee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
    hi2s->RxCpltCallback(hi2s);
#else
    HAL_I2S_RxCpltCallback(hi2s);
 8002cf2:	6878      	ldr	r0, [r7, #4]
 8002cf4:	f7ff ff3e 	bl	8002b74 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }
}
 8002cf8:	bf00      	nop
 8002cfa:	3708      	adds	r7, #8
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <I2S_IRQHandler>:
  * @param  hi2s: pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval None
  */
static void I2S_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b086      	sub	sp, #24
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr = hi2s->Instance->SR;
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	689b      	ldr	r3, [r3, #8]
 8002d0e:	617b      	str	r3, [r7, #20]

  if (hi2s->State == HAL_I2S_STATE_BUSY_RX)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d16:	b2db      	uxtb	r3, r3
 8002d18:	2b04      	cmp	r3, #4
 8002d1a:	d13a      	bne.n	8002d92 <I2S_IRQHandler+0x92>
  {
    /* I2S in mode Receiver ------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_RXNE) != RESET))
 8002d1c:	697b      	ldr	r3, [r7, #20]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b01      	cmp	r3, #1
 8002d24:	d109      	bne.n	8002d3a <I2S_IRQHandler+0x3a>
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	685b      	ldr	r3, [r3, #4]
 8002d2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d30:	2b40      	cmp	r3, #64	; 0x40
 8002d32:	d102      	bne.n	8002d3a <I2S_IRQHandler+0x3a>
    {
      I2S_Receive_IT(hi2s);
 8002d34:	6878      	ldr	r0, [r7, #4]
 8002d36:	f7ff ffb4 	bl	8002ca2 <I2S_Receive_IT>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002d3a:	697b      	ldr	r3, [r7, #20]
 8002d3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d40:	2b40      	cmp	r3, #64	; 0x40
 8002d42:	d126      	bne.n	8002d92 <I2S_IRQHandler+0x92>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685b      	ldr	r3, [r3, #4]
 8002d4a:	f003 0320 	and.w	r3, r3, #32
 8002d4e:	2b20      	cmp	r3, #32
 8002d50:	d11f      	bne.n	8002d92 <I2S_IRQHandler+0x92>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	685a      	ldr	r2, [r3, #4]
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002d60:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002d62:	2300      	movs	r3, #0
 8002d64:	613b      	str	r3, [r7, #16]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	68db      	ldr	r3, [r3, #12]
 8002d6c:	613b      	str	r3, [r7, #16]
 8002d6e:	687b      	ldr	r3, [r7, #4]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	689b      	ldr	r3, [r3, #8]
 8002d74:	613b      	str	r3, [r7, #16]
 8002d76:	693b      	ldr	r3, [r7, #16]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41


      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d84:	f043 0202 	orr.w	r2, r3, #2
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002d8c:	6878      	ldr	r0, [r7, #4]
 8002d8e:	f7ff fefb 	bl	8002b88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }

  if (hi2s->State == HAL_I2S_STATE_BUSY_TX)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	2b03      	cmp	r3, #3
 8002d9c:	d136      	bne.n	8002e0c <I2S_IRQHandler+0x10c>
  {
    /* I2S in mode Transmitter -----------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_TXE) != RESET))
 8002d9e:	697b      	ldr	r3, [r7, #20]
 8002da0:	f003 0302 	and.w	r3, r3, #2
 8002da4:	2b02      	cmp	r3, #2
 8002da6:	d109      	bne.n	8002dbc <I2S_IRQHandler+0xbc>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	681b      	ldr	r3, [r3, #0]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002db2:	2b80      	cmp	r3, #128	; 0x80
 8002db4:	d102      	bne.n	8002dbc <I2S_IRQHandler+0xbc>
    {
      I2S_Transmit_IT(hi2s);
 8002db6:	6878      	ldr	r0, [r7, #4]
 8002db8:	f7ff ff45 	bl	8002c46 <I2S_Transmit_IT>
    }

    /* I2S Underrun error interrupt occurred --------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && (__HAL_I2S_GET_IT_SOURCE(hi2s, I2S_IT_ERR) != RESET))
 8002dbc:	697b      	ldr	r3, [r7, #20]
 8002dbe:	f003 0308 	and.w	r3, r3, #8
 8002dc2:	2b08      	cmp	r3, #8
 8002dc4:	d122      	bne.n	8002e0c <I2S_IRQHandler+0x10c>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	685b      	ldr	r3, [r3, #4]
 8002dcc:	f003 0320 	and.w	r3, r3, #32
 8002dd0:	2b20      	cmp	r3, #32
 8002dd2:	d11b      	bne.n	8002e0c <I2S_IRQHandler+0x10c>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	685a      	ldr	r2, [r3, #4]
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002de2:	605a      	str	r2, [r3, #4]

      /* Clear Underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002de4:	2300      	movs	r3, #0
 8002de6:	60fb      	str	r3, [r7, #12]
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	689b      	ldr	r3, [r3, #8]
 8002dee:	60fb      	str	r3, [r7, #12]
 8002df0:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	2201      	movs	r2, #1
 8002df6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dfe:	f043 0204 	orr.w	r2, r3, #4
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002e06:	6878      	ldr	r0, [r7, #4]
 8002e08:	f7ff febe 	bl	8002b88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8002e0c:	bf00      	nop
 8002e0e:	3718      	adds	r7, #24
 8002e10:	46bd      	mov	sp, r7
 8002e12:	bd80      	pop	{r7, pc}

08002e14 <HAL_I2SEx_FullDuplex_IRQHandler>:
  * @brief  This function handles I2S/I2Sext interrupt requests in full-duplex mode.
  * @param  hi2s I2S handle
  * @retval HAL status
  */
void HAL_I2SEx_FullDuplex_IRQHandler(I2S_HandleTypeDef *hi2s)
{
 8002e14:	b580      	push	{r7, lr}
 8002e16:	b088      	sub	sp, #32
 8002e18:	af00      	add	r7, sp, #0
 8002e1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t i2ssr     = hi2s->Instance->SR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	689b      	ldr	r3, [r3, #8]
 8002e22:	61fb      	str	r3, [r7, #28]
  __IO uint32_t i2sextsr  = I2SxEXT(hi2s->Instance)->SR;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4aa2      	ldr	r2, [pc, #648]	; (80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d101      	bne.n	8002e32 <HAL_I2SEx_FullDuplex_IRQHandler+0x1e>
 8002e2e:	4ba2      	ldr	r3, [pc, #648]	; (80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e30:	e001      	b.n	8002e36 <HAL_I2SEx_FullDuplex_IRQHandler+0x22>
 8002e32:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e36:	689b      	ldr	r3, [r3, #8]
 8002e38:	61bb      	str	r3, [r7, #24]
  __IO uint32_t i2scr2    = hi2s->Instance->CR2;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	685b      	ldr	r3, [r3, #4]
 8002e40:	617b      	str	r3, [r7, #20]
  __IO uint32_t i2sextcr2 = I2SxEXT(hi2s->Instance)->CR2;
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a9b      	ldr	r2, [pc, #620]	; (80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d101      	bne.n	8002e50 <HAL_I2SEx_FullDuplex_IRQHandler+0x3c>
 8002e4c:	4b9a      	ldr	r3, [pc, #616]	; (80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002e4e:	e001      	b.n	8002e54 <HAL_I2SEx_FullDuplex_IRQHandler+0x40>
 8002e50:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	613b      	str	r3, [r7, #16]

  /* Check if the I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX Mode is selected */
  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e60:	d004      	beq.n	8002e6c <HAL_I2SEx_FullDuplex_IRQHandler+0x58>
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	685b      	ldr	r3, [r3, #4]
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	f040 8099 	bne.w	8002f9e <HAL_I2SEx_FullDuplex_IRQHandler+0x18a>
  {
    /* I2S in mode Transmitter -------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2scr2 & I2S_IT_TXE) != RESET))
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f003 0302 	and.w	r3, r3, #2
 8002e72:	2b02      	cmp	r3, #2
 8002e74:	d107      	bne.n	8002e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
 8002e76:	697b      	ldr	r3, [r7, #20]
 8002e78:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d002      	beq.n	8002e86 <HAL_I2SEx_FullDuplex_IRQHandler+0x72>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2S TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2S(hi2s);
 8002e80:	6878      	ldr	r0, [r7, #4]
 8002e82:	f000 f925 	bl	80030d0 <I2SEx_TxISR_I2S>
    }

    /* I2Sext in mode Receiver -----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2sextcr2 & I2S_IT_RXNE) != RESET))
 8002e86:	69bb      	ldr	r3, [r7, #24]
 8002e88:	f003 0301 	and.w	r3, r3, #1
 8002e8c:	2b01      	cmp	r3, #1
 8002e8e:	d107      	bne.n	8002ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
 8002e90:	693b      	ldr	r3, [r7, #16]
 8002e92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d002      	beq.n	8002ea0 <HAL_I2SEx_FullDuplex_IRQHandler+0x8c>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_TX or I2S_MODE_SLAVE_TX,
      the I2Sext RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2SExt(hi2s);
 8002e9a:	6878      	ldr	r0, [r7, #4]
 8002e9c:	f000 f9c8 	bl	8003230 <I2SEx_RxISR_I2SExt>
    }

    /* I2Sext Overrun error interrupt occurred --------------------------------*/
    if (((i2sextsr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ea6:	2b40      	cmp	r3, #64	; 0x40
 8002ea8:	d13a      	bne.n	8002f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	f003 0320 	and.w	r3, r3, #32
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d035      	beq.n	8002f20 <HAL_I2SEx_FullDuplex_IRQHandler+0x10c>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a7e      	ldr	r2, [pc, #504]	; (80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002eba:	4293      	cmp	r3, r2
 8002ebc:	d101      	bne.n	8002ec2 <HAL_I2SEx_FullDuplex_IRQHandler+0xae>
 8002ebe:	4b7e      	ldr	r3, [pc, #504]	; (80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ec0:	e001      	b.n	8002ec6 <HAL_I2SEx_FullDuplex_IRQHandler+0xb2>
 8002ec2:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002ec6:	685a      	ldr	r2, [r3, #4]
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4979      	ldr	r1, [pc, #484]	; (80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ece:	428b      	cmp	r3, r1
 8002ed0:	d101      	bne.n	8002ed6 <HAL_I2SEx_FullDuplex_IRQHandler+0xc2>
 8002ed2:	4b79      	ldr	r3, [pc, #484]	; (80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002ed4:	e001      	b.n	8002eda <HAL_I2SEx_FullDuplex_IRQHandler+0xc6>
 8002ed6:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002eda:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ede:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	685a      	ldr	r2, [r3, #4]
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002eee:	605a      	str	r2, [r3, #4]

      /* Clear Overrun flag */
      __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	60fb      	str	r3, [r7, #12]
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	68db      	ldr	r3, [r3, #12]
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	60fb      	str	r3, [r7, #12]
 8002f04:	68fb      	ldr	r3, [r7, #12]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2201      	movs	r2, #1
 8002f0a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f12:	f043 0202 	orr.w	r2, r3, #2
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f7ff fe34 	bl	8002b88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2S Underrun error interrupt occurred ----------------------------------*/
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	f003 0308 	and.w	r3, r3, #8
 8002f26:	2b08      	cmp	r3, #8
 8002f28:	f040 80be 	bne.w	80030a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	f003 0320 	and.w	r3, r3, #32
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 80b8 	beq.w	80030a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	685a      	ldr	r2, [r3, #4]
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8002f46:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a59      	ldr	r2, [pc, #356]	; (80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002f4e:	4293      	cmp	r3, r2
 8002f50:	d101      	bne.n	8002f56 <HAL_I2SEx_FullDuplex_IRQHandler+0x142>
 8002f52:	4b59      	ldr	r3, [pc, #356]	; (80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002f54:	e001      	b.n	8002f5a <HAL_I2SEx_FullDuplex_IRQHandler+0x146>
 8002f56:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f5a:	685a      	ldr	r2, [r3, #4]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	4954      	ldr	r1, [pc, #336]	; (80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002f62:	428b      	cmp	r3, r1
 8002f64:	d101      	bne.n	8002f6a <HAL_I2SEx_FullDuplex_IRQHandler+0x156>
 8002f66:	4b54      	ldr	r3, [pc, #336]	; (80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8002f68:	e001      	b.n	8002f6e <HAL_I2SEx_FullDuplex_IRQHandler+0x15a>
 8002f6a:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8002f6e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002f72:	605a      	str	r2, [r3, #4]

      /* Clear underrun flag */
      __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 8002f74:	2300      	movs	r3, #0
 8002f76:	60bb      	str	r3, [r7, #8]
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	689b      	ldr	r3, [r3, #8]
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	2201      	movs	r2, #1
 8002f86:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f8e:	f043 0204 	orr.w	r2, r3, #4
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8002f96:	6878      	ldr	r0, [r7, #4]
 8002f98:	f7ff fdf6 	bl	8002b88 <HAL_I2S_ErrorCallback>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002f9c:	e084      	b.n	80030a8 <HAL_I2SEx_FullDuplex_IRQHandler+0x294>
  }
  /* The I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX Mode is selected */
  else
  {
    /* I2Sext in mode Transmitter ----------------------------------------------*/
    if (((i2sextsr & I2S_FLAG_TXE) == I2S_FLAG_TXE) && ((i2sextcr2 & I2S_IT_TXE) != RESET))
 8002f9e:	69bb      	ldr	r3, [r7, #24]
 8002fa0:	f003 0302 	and.w	r3, r3, #2
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d107      	bne.n	8002fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
 8002fa8:	693b      	ldr	r3, [r7, #16]
 8002faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d002      	beq.n	8002fb8 <HAL_I2SEx_FullDuplex_IRQHandler+0x1a4>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2Sext TXE interrupt will be generated to manage the full-duplex transmit phase. */
      I2SEx_TxISR_I2SExt(hi2s);
 8002fb2:	6878      	ldr	r0, [r7, #4]
 8002fb4:	f000 f8be 	bl	8003134 <I2SEx_TxISR_I2SExt>
    }

    /* I2S in mode Receiver --------------------------------------------------*/
    if (((i2ssr & I2S_FLAG_RXNE) == I2S_FLAG_RXNE) && ((i2scr2 & I2S_IT_RXNE) != RESET))
 8002fb8:	69fb      	ldr	r3, [r7, #28]
 8002fba:	f003 0301 	and.w	r3, r3, #1
 8002fbe:	2b01      	cmp	r3, #1
 8002fc0:	d107      	bne.n	8002fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
 8002fc2:	697b      	ldr	r3, [r7, #20]
 8002fc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fc8:	2b00      	cmp	r3, #0
 8002fca:	d002      	beq.n	8002fd2 <HAL_I2SEx_FullDuplex_IRQHandler+0x1be>
    {
      /* When the I2S mode is configured as I2S_MODE_MASTER_RX or I2S_MODE_SLAVE_RX,
      the I2S RXNE interrupt will be generated to manage the full-duplex receive phase. */
      I2SEx_RxISR_I2S(hi2s);
 8002fcc:	6878      	ldr	r0, [r7, #4]
 8002fce:	f000 f8fd 	bl	80031cc <I2SEx_RxISR_I2S>
    }

    /* I2S Overrun error interrupt occurred -------------------------------------*/
    if (((i2ssr & I2S_FLAG_OVR) == I2S_FLAG_OVR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fd8:	2b40      	cmp	r3, #64	; 0x40
 8002fda:	d12f      	bne.n	800303c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f003 0320 	and.w	r3, r3, #32
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	d02a      	beq.n	800303c <HAL_I2SEx_FullDuplex_IRQHandler+0x228>
    {
      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8002ff4:	605a      	str	r2, [r3, #4]

      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	4a2e      	ldr	r2, [pc, #184]	; (80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8002ffc:	4293      	cmp	r3, r2
 8002ffe:	d101      	bne.n	8003004 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f0>
 8003000:	4b2d      	ldr	r3, [pc, #180]	; (80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003002:	e001      	b.n	8003008 <HAL_I2SEx_FullDuplex_IRQHandler+0x1f4>
 8003004:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003008:	685a      	ldr	r2, [r3, #4]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	4929      	ldr	r1, [pc, #164]	; (80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003010:	428b      	cmp	r3, r1
 8003012:	d101      	bne.n	8003018 <HAL_I2SEx_FullDuplex_IRQHandler+0x204>
 8003014:	4b28      	ldr	r3, [pc, #160]	; (80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003016:	e001      	b.n	800301c <HAL_I2SEx_FullDuplex_IRQHandler+0x208>
 8003018:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800301c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003020:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	2201      	movs	r2, #1
 8003026:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_OVR);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800302e:	f043 0202 	orr.w	r2, r3, #2
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 8003036:	6878      	ldr	r0, [r7, #4]
 8003038:	f7ff fda6 	bl	8002b88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }

    /* I2Sext Underrun error interrupt occurred -------------------------------*/
    if (((i2sextsr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2sextcr2 & I2S_IT_ERR) != RESET))
 800303c:	69bb      	ldr	r3, [r7, #24]
 800303e:	f003 0308 	and.w	r3, r3, #8
 8003042:	2b08      	cmp	r3, #8
 8003044:	d131      	bne.n	80030aa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f003 0320 	and.w	r3, r3, #32
 800304c:	2b00      	cmp	r3, #0
 800304e:	d02c      	beq.n	80030aa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    {
      /* Disable TXE and ERR interrupt */
      __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	4a17      	ldr	r2, [pc, #92]	; (80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 8003056:	4293      	cmp	r3, r2
 8003058:	d101      	bne.n	800305e <HAL_I2SEx_FullDuplex_IRQHandler+0x24a>
 800305a:	4b17      	ldr	r3, [pc, #92]	; (80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 800305c:	e001      	b.n	8003062 <HAL_I2SEx_FullDuplex_IRQHandler+0x24e>
 800305e:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003062:	685a      	ldr	r2, [r3, #4]
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	4912      	ldr	r1, [pc, #72]	; (80030b4 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a0>)
 800306a:	428b      	cmp	r3, r1
 800306c:	d101      	bne.n	8003072 <HAL_I2SEx_FullDuplex_IRQHandler+0x25e>
 800306e:	4b12      	ldr	r3, [pc, #72]	; (80030b8 <HAL_I2SEx_FullDuplex_IRQHandler+0x2a4>)
 8003070:	e001      	b.n	8003076 <HAL_I2SEx_FullDuplex_IRQHandler+0x262>
 8003072:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003076:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800307a:	605a      	str	r2, [r3, #4]

      /* Disable RXNE and ERR interrupt */
      __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	685a      	ldr	r2, [r3, #4]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800308a:	605a      	str	r2, [r3, #4]

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2201      	movs	r2, #1
 8003090:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Set the error code and execute error callback*/
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_UDR);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003098:	f043 0204 	orr.w	r2, r3, #4
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	645a      	str	r2, [r3, #68]	; 0x44
      /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->ErrorCallback(hi2s);
#else
      HAL_I2S_ErrorCallback(hi2s);
 80030a0:	6878      	ldr	r0, [r7, #4]
 80030a2:	f7ff fd71 	bl	8002b88 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80030a6:	e000      	b.n	80030aa <HAL_I2SEx_FullDuplex_IRQHandler+0x296>
    if (((i2ssr & I2S_FLAG_UDR) == I2S_FLAG_UDR) && ((i2scr2 & I2S_IT_ERR) != RESET))
 80030a8:	bf00      	nop
}
 80030aa:	bf00      	nop
 80030ac:	3720      	adds	r7, #32
 80030ae:	46bd      	mov	sp, r7
 80030b0:	bd80      	pop	{r7, pc}
 80030b2:	bf00      	nop
 80030b4:	40003800 	.word	0x40003800
 80030b8:	40003400 	.word	0x40003400

080030bc <HAL_I2SEx_TxRxCpltCallback>:
  * @brief  Tx and Rx Transfer completed callback
  * @param  hi2s I2S handle
  * @retval None
  */
__weak void HAL_I2SEx_TxRxCpltCallback(I2S_HandleTypeDef *hi2s)
{
 80030bc:	b480      	push	{r7}
 80030be:	b083      	sub	sp, #12
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2s);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2SEx_TxRxCpltCallback could be implemented in the user file
   */
}
 80030c4:	bf00      	nop
 80030c6:	370c      	adds	r7, #12
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr

080030d0 <I2SEx_TxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80030d0:	b580      	push	{r7, lr}
 80030d2:	b082      	sub	sp, #8
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  hi2s->Instance->DR = (*hi2s->pTxBuffPtr++);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	1c99      	adds	r1, r3, #2
 80030de:	687a      	ldr	r2, [r7, #4]
 80030e0:	6251      	str	r1, [r2, #36]	; 0x24
 80030e2:	881a      	ldrh	r2, [r3, #0]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030ee:	b29b      	uxth	r3, r3
 80030f0:	3b01      	subs	r3, #1
 80030f2:	b29a      	uxth	r2, r3
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d113      	bne.n	800312a <I2SEx_TxISR_I2S+0x5a>
  {
    /* Disable TXE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	685a      	ldr	r2, [r3, #4]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8003110:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003116:	b29b      	uxth	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	d106      	bne.n	800312a <I2SEx_TxISR_I2S+0x5a>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003124:	6878      	ldr	r0, [r7, #4]
 8003126:	f7ff ffc9 	bl	80030bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 800312a:	bf00      	nop
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}
	...

08003134 <I2SEx_TxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler transmit function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_TxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Write Data on DR register */
  I2SxEXT(hi2s->Instance)->DR = (*hi2s->pTxBuffPtr++);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003140:	1c99      	adds	r1, r3, #2
 8003142:	687a      	ldr	r2, [r7, #4]
 8003144:	6251      	str	r1, [r2, #36]	; 0x24
 8003146:	8819      	ldrh	r1, [r3, #0]
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4a1d      	ldr	r2, [pc, #116]	; (80031c4 <I2SEx_TxISR_I2SExt+0x90>)
 800314e:	4293      	cmp	r3, r2
 8003150:	d101      	bne.n	8003156 <I2SEx_TxISR_I2SExt+0x22>
 8003152:	4b1d      	ldr	r3, [pc, #116]	; (80031c8 <I2SEx_TxISR_I2SExt+0x94>)
 8003154:	e001      	b.n	800315a <I2SEx_TxISR_I2SExt+0x26>
 8003156:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800315a:	460a      	mov	r2, r1
 800315c:	60da      	str	r2, [r3, #12]
  hi2s->TxXferCount--;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003162:	b29b      	uxth	r3, r3
 8003164:	3b01      	subs	r3, #1
 8003166:	b29a      	uxth	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	855a      	strh	r2, [r3, #42]	; 0x2a

  if (hi2s->TxXferCount == 0U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003170:	b29b      	uxth	r3, r3
 8003172:	2b00      	cmp	r3, #0
 8003174:	d121      	bne.n	80031ba <I2SEx_TxISR_I2SExt+0x86>
  {
    /* Disable I2Sext TXE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_TXE | I2S_IT_ERR));
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4a12      	ldr	r2, [pc, #72]	; (80031c4 <I2SEx_TxISR_I2SExt+0x90>)
 800317c:	4293      	cmp	r3, r2
 800317e:	d101      	bne.n	8003184 <I2SEx_TxISR_I2SExt+0x50>
 8003180:	4b11      	ldr	r3, [pc, #68]	; (80031c8 <I2SEx_TxISR_I2SExt+0x94>)
 8003182:	e001      	b.n	8003188 <I2SEx_TxISR_I2SExt+0x54>
 8003184:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003188:	685a      	ldr	r2, [r3, #4]
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	490d      	ldr	r1, [pc, #52]	; (80031c4 <I2SEx_TxISR_I2SExt+0x90>)
 8003190:	428b      	cmp	r3, r1
 8003192:	d101      	bne.n	8003198 <I2SEx_TxISR_I2SExt+0x64>
 8003194:	4b0c      	ldr	r3, [pc, #48]	; (80031c8 <I2SEx_TxISR_I2SExt+0x94>)
 8003196:	e001      	b.n	800319c <I2SEx_TxISR_I2SExt+0x68>
 8003198:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800319c:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80031a0:	605a      	str	r2, [r3, #4]

    if (hi2s->RxXferCount == 0U)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031a6:	b29b      	uxth	r3, r3
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d106      	bne.n	80031ba <I2SEx_TxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2201      	movs	r2, #1
 80031b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80031b4:	6878      	ldr	r0, [r7, #4]
 80031b6:	f7ff ff81 	bl	80030bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80031ba:	bf00      	nop
 80031bc:	3708      	adds	r7, #8
 80031be:	46bd      	mov	sp, r7
 80031c0:	bd80      	pop	{r7, pc}
 80031c2:	bf00      	nop
 80031c4:	40003800 	.word	0x40003800
 80031c8:	40003400 	.word	0x40003400

080031cc <I2SEx_RxISR_I2S>:
  * @brief  I2S Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2S(I2S_HandleTypeDef *hi2s)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b082      	sub	sp, #8
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = hi2s->Instance->DR;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	68d8      	ldr	r0, [r3, #12]
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031de:	1c99      	adds	r1, r3, #2
 80031e0:	687a      	ldr	r2, [r7, #4]
 80031e2:	62d1      	str	r1, [r2, #44]	; 0x2c
 80031e4:	b282      	uxth	r2, r0
 80031e6:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031ec:	b29b      	uxth	r3, r3
 80031ee:	3b01      	subs	r3, #1
 80031f0:	b29a      	uxth	r2, r3
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80031fa:	b29b      	uxth	r3, r3
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d113      	bne.n	8003228 <I2SEx_RxISR_I2S+0x5c>
  {
    /* Disable RXNE and ERR interrupt */
    __HAL_I2S_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	685a      	ldr	r2, [r3, #4]
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800320e:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003214:	b29b      	uxth	r3, r3
 8003216:	2b00      	cmp	r3, #0
 8003218:	d106      	bne.n	8003228 <I2SEx_RxISR_I2S+0x5c>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2201      	movs	r2, #1
 800321e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 8003222:	6878      	ldr	r0, [r7, #4]
 8003224:	f7ff ff4a 	bl	80030bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 8003228:	bf00      	nop
 800322a:	3708      	adds	r7, #8
 800322c:	46bd      	mov	sp, r7
 800322e:	bd80      	pop	{r7, pc}

08003230 <I2SEx_RxISR_I2SExt>:
  * @brief  I2SExt Full-Duplex IT handler receive function
  * @param  hi2s I2S handle
  * @retval None
  */
static void I2SEx_RxISR_I2SExt(I2S_HandleTypeDef *hi2s)
{
 8003230:	b580      	push	{r7, lr}
 8003232:	b082      	sub	sp, #8
 8003234:	af00      	add	r7, sp, #0
 8003236:	6078      	str	r0, [r7, #4]
  /* Read Data from DR register */
  (*hi2s->pRxBuffPtr++) = I2SxEXT(hi2s->Instance)->DR;
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	4a20      	ldr	r2, [pc, #128]	; (80032c0 <I2SEx_RxISR_I2SExt+0x90>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d101      	bne.n	8003246 <I2SEx_RxISR_I2SExt+0x16>
 8003242:	4b20      	ldr	r3, [pc, #128]	; (80032c4 <I2SEx_RxISR_I2SExt+0x94>)
 8003244:	e001      	b.n	800324a <I2SEx_RxISR_I2SExt+0x1a>
 8003246:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 800324a:	68d8      	ldr	r0, [r3, #12]
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003250:	1c99      	adds	r1, r3, #2
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	62d1      	str	r1, [r2, #44]	; 0x2c
 8003256:	b282      	uxth	r2, r0
 8003258:	801a      	strh	r2, [r3, #0]
  hi2s->RxXferCount--;
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800325e:	b29b      	uxth	r3, r3
 8003260:	3b01      	subs	r3, #1
 8003262:	b29a      	uxth	r2, r3
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	865a      	strh	r2, [r3, #50]	; 0x32

  if (hi2s->RxXferCount == 0U)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800326c:	b29b      	uxth	r3, r3
 800326e:	2b00      	cmp	r3, #0
 8003270:	d121      	bne.n	80032b6 <I2SEx_RxISR_I2SExt+0x86>
  {
    /* Disable I2Sext RXNE and ERR interrupt */
    __HAL_I2SEXT_DISABLE_IT(hi2s, (I2S_IT_RXNE | I2S_IT_ERR));
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4a12      	ldr	r2, [pc, #72]	; (80032c0 <I2SEx_RxISR_I2SExt+0x90>)
 8003278:	4293      	cmp	r3, r2
 800327a:	d101      	bne.n	8003280 <I2SEx_RxISR_I2SExt+0x50>
 800327c:	4b11      	ldr	r3, [pc, #68]	; (80032c4 <I2SEx_RxISR_I2SExt+0x94>)
 800327e:	e001      	b.n	8003284 <I2SEx_RxISR_I2SExt+0x54>
 8003280:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003284:	685a      	ldr	r2, [r3, #4]
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	490d      	ldr	r1, [pc, #52]	; (80032c0 <I2SEx_RxISR_I2SExt+0x90>)
 800328c:	428b      	cmp	r3, r1
 800328e:	d101      	bne.n	8003294 <I2SEx_RxISR_I2SExt+0x64>
 8003290:	4b0c      	ldr	r3, [pc, #48]	; (80032c4 <I2SEx_RxISR_I2SExt+0x94>)
 8003292:	e001      	b.n	8003298 <I2SEx_RxISR_I2SExt+0x68>
 8003294:	f04f 2340 	mov.w	r3, #1073758208	; 0x40004000
 8003298:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800329c:	605a      	str	r2, [r3, #4]

    if (hi2s->TxXferCount == 0U)
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80032a2:	b29b      	uxth	r3, r3
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d106      	bne.n	80032b6 <I2SEx_RxISR_I2SExt+0x86>
    {
      hi2s->State = HAL_I2S_STATE_READY;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	2201      	movs	r2, #1
 80032ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      /* Call user TxRx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
      hi2s->TxRxCpltCallback(hi2s);
#else
      HAL_I2SEx_TxRxCpltCallback(hi2s);
 80032b0:	6878      	ldr	r0, [r7, #4]
 80032b2:	f7ff ff03 	bl	80030bc <HAL_I2SEx_TxRxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
    }
  }
}
 80032b6:	bf00      	nop
 80032b8:	3708      	adds	r7, #8
 80032ba:	46bd      	mov	sp, r7
 80032bc:	bd80      	pop	{r7, pc}
 80032be:	bf00      	nop
 80032c0:	40003800 	.word	0x40003800
 80032c4:	40003400 	.word	0x40003400

080032c8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b086      	sub	sp, #24
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d101      	bne.n	80032da <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032d6:	2301      	movs	r3, #1
 80032d8:	e25b      	b.n	8003792 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	f003 0301 	and.w	r3, r3, #1
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d075      	beq.n	80033d2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032e6:	4ba3      	ldr	r3, [pc, #652]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80032e8:	689b      	ldr	r3, [r3, #8]
 80032ea:	f003 030c 	and.w	r3, r3, #12
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	d00c      	beq.n	800330c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032f2:	4ba0      	ldr	r3, [pc, #640]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80032f4:	689b      	ldr	r3, [r3, #8]
 80032f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80032fa:	2b08      	cmp	r3, #8
 80032fc:	d112      	bne.n	8003324 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80032fe:	4b9d      	ldr	r3, [pc, #628]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003300:	685b      	ldr	r3, [r3, #4]
 8003302:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003306:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800330a:	d10b      	bne.n	8003324 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800330c:	4b99      	ldr	r3, [pc, #612]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003314:	2b00      	cmp	r3, #0
 8003316:	d05b      	beq.n	80033d0 <HAL_RCC_OscConfig+0x108>
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	685b      	ldr	r3, [r3, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d157      	bne.n	80033d0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e236      	b.n	8003792 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800332c:	d106      	bne.n	800333c <HAL_RCC_OscConfig+0x74>
 800332e:	4b91      	ldr	r3, [pc, #580]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	4a90      	ldr	r2, [pc, #576]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003334:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003338:	6013      	str	r3, [r2, #0]
 800333a:	e01d      	b.n	8003378 <HAL_RCC_OscConfig+0xb0>
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003344:	d10c      	bne.n	8003360 <HAL_RCC_OscConfig+0x98>
 8003346:	4b8b      	ldr	r3, [pc, #556]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	4a8a      	ldr	r2, [pc, #552]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 800334c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003350:	6013      	str	r3, [r2, #0]
 8003352:	4b88      	ldr	r3, [pc, #544]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a87      	ldr	r2, [pc, #540]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003358:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800335c:	6013      	str	r3, [r2, #0]
 800335e:	e00b      	b.n	8003378 <HAL_RCC_OscConfig+0xb0>
 8003360:	4b84      	ldr	r3, [pc, #528]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	4a83      	ldr	r2, [pc, #524]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003366:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800336a:	6013      	str	r3, [r2, #0]
 800336c:	4b81      	ldr	r3, [pc, #516]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4a80      	ldr	r2, [pc, #512]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003372:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003376:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d013      	beq.n	80033a8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003380:	f7fe fb28 	bl	80019d4 <HAL_GetTick>
 8003384:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003386:	e008      	b.n	800339a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003388:	f7fe fb24 	bl	80019d4 <HAL_GetTick>
 800338c:	4602      	mov	r2, r0
 800338e:	693b      	ldr	r3, [r7, #16]
 8003390:	1ad3      	subs	r3, r2, r3
 8003392:	2b64      	cmp	r3, #100	; 0x64
 8003394:	d901      	bls.n	800339a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003396:	2303      	movs	r3, #3
 8003398:	e1fb      	b.n	8003792 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800339a:	4b76      	ldr	r3, [pc, #472]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d0f0      	beq.n	8003388 <HAL_RCC_OscConfig+0xc0>
 80033a6:	e014      	b.n	80033d2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033a8:	f7fe fb14 	bl	80019d4 <HAL_GetTick>
 80033ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033b0:	f7fe fb10 	bl	80019d4 <HAL_GetTick>
 80033b4:	4602      	mov	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b64      	cmp	r3, #100	; 0x64
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e1e7      	b.n	8003792 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033c2:	4b6c      	ldr	r3, [pc, #432]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0xe8>
 80033ce:	e000      	b.n	80033d2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033d0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d063      	beq.n	80034a6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033de:	4b65      	ldr	r3, [pc, #404]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80033e0:	689b      	ldr	r3, [r3, #8]
 80033e2:	f003 030c 	and.w	r3, r3, #12
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d00b      	beq.n	8003402 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033ea:	4b62      	ldr	r3, [pc, #392]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80033f2:	2b08      	cmp	r3, #8
 80033f4:	d11c      	bne.n	8003430 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80033f6:	4b5f      	ldr	r3, [pc, #380]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d116      	bne.n	8003430 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003402:	4b5c      	ldr	r3, [pc, #368]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	f003 0302 	and.w	r3, r3, #2
 800340a:	2b00      	cmp	r3, #0
 800340c:	d005      	beq.n	800341a <HAL_RCC_OscConfig+0x152>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	68db      	ldr	r3, [r3, #12]
 8003412:	2b01      	cmp	r3, #1
 8003414:	d001      	beq.n	800341a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e1bb      	b.n	8003792 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800341a:	4b56      	ldr	r3, [pc, #344]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	00db      	lsls	r3, r3, #3
 8003428:	4952      	ldr	r1, [pc, #328]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 800342a:	4313      	orrs	r3, r2
 800342c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342e:	e03a      	b.n	80034a6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	68db      	ldr	r3, [r3, #12]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d020      	beq.n	800347a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003438:	4b4f      	ldr	r3, [pc, #316]	; (8003578 <HAL_RCC_OscConfig+0x2b0>)
 800343a:	2201      	movs	r2, #1
 800343c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800343e:	f7fe fac9 	bl	80019d4 <HAL_GetTick>
 8003442:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003444:	e008      	b.n	8003458 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003446:	f7fe fac5 	bl	80019d4 <HAL_GetTick>
 800344a:	4602      	mov	r2, r0
 800344c:	693b      	ldr	r3, [r7, #16]
 800344e:	1ad3      	subs	r3, r2, r3
 8003450:	2b02      	cmp	r3, #2
 8003452:	d901      	bls.n	8003458 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003454:	2303      	movs	r3, #3
 8003456:	e19c      	b.n	8003792 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003458:	4b46      	ldr	r3, [pc, #280]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0302 	and.w	r3, r3, #2
 8003460:	2b00      	cmp	r3, #0
 8003462:	d0f0      	beq.n	8003446 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003464:	4b43      	ldr	r3, [pc, #268]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	691b      	ldr	r3, [r3, #16]
 8003470:	00db      	lsls	r3, r3, #3
 8003472:	4940      	ldr	r1, [pc, #256]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003474:	4313      	orrs	r3, r2
 8003476:	600b      	str	r3, [r1, #0]
 8003478:	e015      	b.n	80034a6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800347a:	4b3f      	ldr	r3, [pc, #252]	; (8003578 <HAL_RCC_OscConfig+0x2b0>)
 800347c:	2200      	movs	r2, #0
 800347e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003480:	f7fe faa8 	bl	80019d4 <HAL_GetTick>
 8003484:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003486:	e008      	b.n	800349a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003488:	f7fe faa4 	bl	80019d4 <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	693b      	ldr	r3, [r7, #16]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	2b02      	cmp	r3, #2
 8003494:	d901      	bls.n	800349a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003496:	2303      	movs	r3, #3
 8003498:	e17b      	b.n	8003792 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800349a:	4b36      	ldr	r3, [pc, #216]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	f003 0302 	and.w	r3, r3, #2
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d1f0      	bne.n	8003488 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0308 	and.w	r3, r3, #8
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d030      	beq.n	8003514 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695b      	ldr	r3, [r3, #20]
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d016      	beq.n	80034e8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034ba:	4b30      	ldr	r3, [pc, #192]	; (800357c <HAL_RCC_OscConfig+0x2b4>)
 80034bc:	2201      	movs	r2, #1
 80034be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034c0:	f7fe fa88 	bl	80019d4 <HAL_GetTick>
 80034c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034c6:	e008      	b.n	80034da <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034c8:	f7fe fa84 	bl	80019d4 <HAL_GetTick>
 80034cc:	4602      	mov	r2, r0
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	1ad3      	subs	r3, r2, r3
 80034d2:	2b02      	cmp	r3, #2
 80034d4:	d901      	bls.n	80034da <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80034d6:	2303      	movs	r3, #3
 80034d8:	e15b      	b.n	8003792 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034da:	4b26      	ldr	r3, [pc, #152]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 80034dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034de:	f003 0302 	and.w	r3, r3, #2
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d0f0      	beq.n	80034c8 <HAL_RCC_OscConfig+0x200>
 80034e6:	e015      	b.n	8003514 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80034e8:	4b24      	ldr	r3, [pc, #144]	; (800357c <HAL_RCC_OscConfig+0x2b4>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ee:	f7fe fa71 	bl	80019d4 <HAL_GetTick>
 80034f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034f4:	e008      	b.n	8003508 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80034f6:	f7fe fa6d 	bl	80019d4 <HAL_GetTick>
 80034fa:	4602      	mov	r2, r0
 80034fc:	693b      	ldr	r3, [r7, #16]
 80034fe:	1ad3      	subs	r3, r2, r3
 8003500:	2b02      	cmp	r3, #2
 8003502:	d901      	bls.n	8003508 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003504:	2303      	movs	r3, #3
 8003506:	e144      	b.n	8003792 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003508:	4b1a      	ldr	r3, [pc, #104]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 800350a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	2b00      	cmp	r3, #0
 8003512:	d1f0      	bne.n	80034f6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	f003 0304 	and.w	r3, r3, #4
 800351c:	2b00      	cmp	r3, #0
 800351e:	f000 80a0 	beq.w	8003662 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003522:	2300      	movs	r3, #0
 8003524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003526:	4b13      	ldr	r3, [pc, #76]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800352a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d10f      	bne.n	8003552 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003532:	2300      	movs	r3, #0
 8003534:	60bb      	str	r3, [r7, #8]
 8003536:	4b0f      	ldr	r3, [pc, #60]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800353a:	4a0e      	ldr	r2, [pc, #56]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 800353c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003540:	6413      	str	r3, [r2, #64]	; 0x40
 8003542:	4b0c      	ldr	r3, [pc, #48]	; (8003574 <HAL_RCC_OscConfig+0x2ac>)
 8003544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800354a:	60bb      	str	r3, [r7, #8]
 800354c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800354e:	2301      	movs	r3, #1
 8003550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003552:	4b0b      	ldr	r3, [pc, #44]	; (8003580 <HAL_RCC_OscConfig+0x2b8>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800355a:	2b00      	cmp	r3, #0
 800355c:	d121      	bne.n	80035a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800355e:	4b08      	ldr	r3, [pc, #32]	; (8003580 <HAL_RCC_OscConfig+0x2b8>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4a07      	ldr	r2, [pc, #28]	; (8003580 <HAL_RCC_OscConfig+0x2b8>)
 8003564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800356a:	f7fe fa33 	bl	80019d4 <HAL_GetTick>
 800356e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003570:	e011      	b.n	8003596 <HAL_RCC_OscConfig+0x2ce>
 8003572:	bf00      	nop
 8003574:	40023800 	.word	0x40023800
 8003578:	42470000 	.word	0x42470000
 800357c:	42470e80 	.word	0x42470e80
 8003580:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003584:	f7fe fa26 	bl	80019d4 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e0fd      	b.n	8003792 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003596:	4b81      	ldr	r3, [pc, #516]	; (800379c <HAL_RCC_OscConfig+0x4d4>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d0f0      	beq.n	8003584 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d106      	bne.n	80035b8 <HAL_RCC_OscConfig+0x2f0>
 80035aa:	4b7d      	ldr	r3, [pc, #500]	; (80037a0 <HAL_RCC_OscConfig+0x4d8>)
 80035ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ae:	4a7c      	ldr	r2, [pc, #496]	; (80037a0 <HAL_RCC_OscConfig+0x4d8>)
 80035b0:	f043 0301 	orr.w	r3, r3, #1
 80035b4:	6713      	str	r3, [r2, #112]	; 0x70
 80035b6:	e01c      	b.n	80035f2 <HAL_RCC_OscConfig+0x32a>
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	2b05      	cmp	r3, #5
 80035be:	d10c      	bne.n	80035da <HAL_RCC_OscConfig+0x312>
 80035c0:	4b77      	ldr	r3, [pc, #476]	; (80037a0 <HAL_RCC_OscConfig+0x4d8>)
 80035c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035c4:	4a76      	ldr	r2, [pc, #472]	; (80037a0 <HAL_RCC_OscConfig+0x4d8>)
 80035c6:	f043 0304 	orr.w	r3, r3, #4
 80035ca:	6713      	str	r3, [r2, #112]	; 0x70
 80035cc:	4b74      	ldr	r3, [pc, #464]	; (80037a0 <HAL_RCC_OscConfig+0x4d8>)
 80035ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d0:	4a73      	ldr	r2, [pc, #460]	; (80037a0 <HAL_RCC_OscConfig+0x4d8>)
 80035d2:	f043 0301 	orr.w	r3, r3, #1
 80035d6:	6713      	str	r3, [r2, #112]	; 0x70
 80035d8:	e00b      	b.n	80035f2 <HAL_RCC_OscConfig+0x32a>
 80035da:	4b71      	ldr	r3, [pc, #452]	; (80037a0 <HAL_RCC_OscConfig+0x4d8>)
 80035dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035de:	4a70      	ldr	r2, [pc, #448]	; (80037a0 <HAL_RCC_OscConfig+0x4d8>)
 80035e0:	f023 0301 	bic.w	r3, r3, #1
 80035e4:	6713      	str	r3, [r2, #112]	; 0x70
 80035e6:	4b6e      	ldr	r3, [pc, #440]	; (80037a0 <HAL_RCC_OscConfig+0x4d8>)
 80035e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035ea:	4a6d      	ldr	r2, [pc, #436]	; (80037a0 <HAL_RCC_OscConfig+0x4d8>)
 80035ec:	f023 0304 	bic.w	r3, r3, #4
 80035f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d015      	beq.n	8003626 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035fa:	f7fe f9eb 	bl	80019d4 <HAL_GetTick>
 80035fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003600:	e00a      	b.n	8003618 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003602:	f7fe f9e7 	bl	80019d4 <HAL_GetTick>
 8003606:	4602      	mov	r2, r0
 8003608:	693b      	ldr	r3, [r7, #16]
 800360a:	1ad3      	subs	r3, r2, r3
 800360c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003610:	4293      	cmp	r3, r2
 8003612:	d901      	bls.n	8003618 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003614:	2303      	movs	r3, #3
 8003616:	e0bc      	b.n	8003792 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003618:	4b61      	ldr	r3, [pc, #388]	; (80037a0 <HAL_RCC_OscConfig+0x4d8>)
 800361a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800361c:	f003 0302 	and.w	r3, r3, #2
 8003620:	2b00      	cmp	r3, #0
 8003622:	d0ee      	beq.n	8003602 <HAL_RCC_OscConfig+0x33a>
 8003624:	e014      	b.n	8003650 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003626:	f7fe f9d5 	bl	80019d4 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800362c:	e00a      	b.n	8003644 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800362e:	f7fe f9d1 	bl	80019d4 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	f241 3288 	movw	r2, #5000	; 0x1388
 800363c:	4293      	cmp	r3, r2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e0a6      	b.n	8003792 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003644:	4b56      	ldr	r3, [pc, #344]	; (80037a0 <HAL_RCC_OscConfig+0x4d8>)
 8003646:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003648:	f003 0302 	and.w	r3, r3, #2
 800364c:	2b00      	cmp	r3, #0
 800364e:	d1ee      	bne.n	800362e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003650:	7dfb      	ldrb	r3, [r7, #23]
 8003652:	2b01      	cmp	r3, #1
 8003654:	d105      	bne.n	8003662 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003656:	4b52      	ldr	r3, [pc, #328]	; (80037a0 <HAL_RCC_OscConfig+0x4d8>)
 8003658:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365a:	4a51      	ldr	r2, [pc, #324]	; (80037a0 <HAL_RCC_OscConfig+0x4d8>)
 800365c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003660:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	699b      	ldr	r3, [r3, #24]
 8003666:	2b00      	cmp	r3, #0
 8003668:	f000 8092 	beq.w	8003790 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800366c:	4b4c      	ldr	r3, [pc, #304]	; (80037a0 <HAL_RCC_OscConfig+0x4d8>)
 800366e:	689b      	ldr	r3, [r3, #8]
 8003670:	f003 030c 	and.w	r3, r3, #12
 8003674:	2b08      	cmp	r3, #8
 8003676:	d05c      	beq.n	8003732 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2b02      	cmp	r3, #2
 800367e:	d141      	bne.n	8003704 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003680:	4b48      	ldr	r3, [pc, #288]	; (80037a4 <HAL_RCC_OscConfig+0x4dc>)
 8003682:	2200      	movs	r2, #0
 8003684:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003686:	f7fe f9a5 	bl	80019d4 <HAL_GetTick>
 800368a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800368c:	e008      	b.n	80036a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800368e:	f7fe f9a1 	bl	80019d4 <HAL_GetTick>
 8003692:	4602      	mov	r2, r0
 8003694:	693b      	ldr	r3, [r7, #16]
 8003696:	1ad3      	subs	r3, r2, r3
 8003698:	2b02      	cmp	r3, #2
 800369a:	d901      	bls.n	80036a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e078      	b.n	8003792 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036a0:	4b3f      	ldr	r3, [pc, #252]	; (80037a0 <HAL_RCC_OscConfig+0x4d8>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d1f0      	bne.n	800368e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	69da      	ldr	r2, [r3, #28]
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	6a1b      	ldr	r3, [r3, #32]
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ba:	019b      	lsls	r3, r3, #6
 80036bc:	431a      	orrs	r2, r3
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036c2:	085b      	lsrs	r3, r3, #1
 80036c4:	3b01      	subs	r3, #1
 80036c6:	041b      	lsls	r3, r3, #16
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036ce:	061b      	lsls	r3, r3, #24
 80036d0:	4933      	ldr	r1, [pc, #204]	; (80037a0 <HAL_RCC_OscConfig+0x4d8>)
 80036d2:	4313      	orrs	r3, r2
 80036d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80036d6:	4b33      	ldr	r3, [pc, #204]	; (80037a4 <HAL_RCC_OscConfig+0x4dc>)
 80036d8:	2201      	movs	r2, #1
 80036da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036dc:	f7fe f97a 	bl	80019d4 <HAL_GetTick>
 80036e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80036e4:	f7fe f976 	bl	80019d4 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b02      	cmp	r3, #2
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e04d      	b.n	8003792 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80036f6:	4b2a      	ldr	r3, [pc, #168]	; (80037a0 <HAL_RCC_OscConfig+0x4d8>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x41c>
 8003702:	e045      	b.n	8003790 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003704:	4b27      	ldr	r3, [pc, #156]	; (80037a4 <HAL_RCC_OscConfig+0x4dc>)
 8003706:	2200      	movs	r2, #0
 8003708:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800370a:	f7fe f963 	bl	80019d4 <HAL_GetTick>
 800370e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003710:	e008      	b.n	8003724 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003712:	f7fe f95f 	bl	80019d4 <HAL_GetTick>
 8003716:	4602      	mov	r2, r0
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	1ad3      	subs	r3, r2, r3
 800371c:	2b02      	cmp	r3, #2
 800371e:	d901      	bls.n	8003724 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003720:	2303      	movs	r3, #3
 8003722:	e036      	b.n	8003792 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003724:	4b1e      	ldr	r3, [pc, #120]	; (80037a0 <HAL_RCC_OscConfig+0x4d8>)
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800372c:	2b00      	cmp	r3, #0
 800372e:	d1f0      	bne.n	8003712 <HAL_RCC_OscConfig+0x44a>
 8003730:	e02e      	b.n	8003790 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	699b      	ldr	r3, [r3, #24]
 8003736:	2b01      	cmp	r3, #1
 8003738:	d101      	bne.n	800373e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800373a:	2301      	movs	r3, #1
 800373c:	e029      	b.n	8003792 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800373e:	4b18      	ldr	r3, [pc, #96]	; (80037a0 <HAL_RCC_OscConfig+0x4d8>)
 8003740:	685b      	ldr	r3, [r3, #4]
 8003742:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	69db      	ldr	r3, [r3, #28]
 800374e:	429a      	cmp	r2, r3
 8003750:	d11c      	bne.n	800378c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800375c:	429a      	cmp	r2, r3
 800375e:	d115      	bne.n	800378c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8003760:	68fa      	ldr	r2, [r7, #12]
 8003762:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003766:	4013      	ands	r3, r2
 8003768:	687a      	ldr	r2, [r7, #4]
 800376a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800376c:	4293      	cmp	r3, r2
 800376e:	d10d      	bne.n	800378c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800377a:	429a      	cmp	r2, r3
 800377c:	d106      	bne.n	800378c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003788:	429a      	cmp	r2, r3
 800378a:	d001      	beq.n	8003790 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800378c:	2301      	movs	r3, #1
 800378e:	e000      	b.n	8003792 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003790:	2300      	movs	r3, #0
}
 8003792:	4618      	mov	r0, r3
 8003794:	3718      	adds	r7, #24
 8003796:	46bd      	mov	sp, r7
 8003798:	bd80      	pop	{r7, pc}
 800379a:	bf00      	nop
 800379c:	40007000 	.word	0x40007000
 80037a0:	40023800 	.word	0x40023800
 80037a4:	42470060 	.word	0x42470060

080037a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037a8:	b580      	push	{r7, lr}
 80037aa:	b084      	sub	sp, #16
 80037ac:	af00      	add	r7, sp, #0
 80037ae:	6078      	str	r0, [r7, #4]
 80037b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d101      	bne.n	80037bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037b8:	2301      	movs	r3, #1
 80037ba:	e0cc      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80037bc:	4b68      	ldr	r3, [pc, #416]	; (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 030f 	and.w	r3, r3, #15
 80037c4:	683a      	ldr	r2, [r7, #0]
 80037c6:	429a      	cmp	r2, r3
 80037c8:	d90c      	bls.n	80037e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037ca:	4b65      	ldr	r3, [pc, #404]	; (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80037cc:	683a      	ldr	r2, [r7, #0]
 80037ce:	b2d2      	uxtb	r2, r2
 80037d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037d2:	4b63      	ldr	r3, [pc, #396]	; (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 030f 	and.w	r3, r3, #15
 80037da:	683a      	ldr	r2, [r7, #0]
 80037dc:	429a      	cmp	r2, r3
 80037de:	d001      	beq.n	80037e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80037e0:	2301      	movs	r3, #1
 80037e2:	e0b8      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	f003 0302 	and.w	r3, r3, #2
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d020      	beq.n	8003832 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f003 0304 	and.w	r3, r3, #4
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d005      	beq.n	8003808 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80037fc:	4b59      	ldr	r3, [pc, #356]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	4a58      	ldr	r2, [pc, #352]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003806:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 0308 	and.w	r3, r3, #8
 8003810:	2b00      	cmp	r3, #0
 8003812:	d005      	beq.n	8003820 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003814:	4b53      	ldr	r3, [pc, #332]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	4a52      	ldr	r2, [pc, #328]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 800381a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800381e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003820:	4b50      	ldr	r3, [pc, #320]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	494d      	ldr	r1, [pc, #308]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	4313      	orrs	r3, r2
 8003830:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0301 	and.w	r3, r3, #1
 800383a:	2b00      	cmp	r3, #0
 800383c:	d044      	beq.n	80038c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	685b      	ldr	r3, [r3, #4]
 8003842:	2b01      	cmp	r3, #1
 8003844:	d107      	bne.n	8003856 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003846:	4b47      	ldr	r3, [pc, #284]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d119      	bne.n	8003886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003852:	2301      	movs	r3, #1
 8003854:	e07f      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	2b02      	cmp	r3, #2
 800385c:	d003      	beq.n	8003866 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003862:	2b03      	cmp	r3, #3
 8003864:	d107      	bne.n	8003876 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003866:	4b3f      	ldr	r3, [pc, #252]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800386e:	2b00      	cmp	r3, #0
 8003870:	d109      	bne.n	8003886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003872:	2301      	movs	r3, #1
 8003874:	e06f      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003876:	4b3b      	ldr	r3, [pc, #236]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0302 	and.w	r3, r3, #2
 800387e:	2b00      	cmp	r3, #0
 8003880:	d101      	bne.n	8003886 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003882:	2301      	movs	r3, #1
 8003884:	e067      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003886:	4b37      	ldr	r3, [pc, #220]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f023 0203 	bic.w	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	4934      	ldr	r1, [pc, #208]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003894:	4313      	orrs	r3, r2
 8003896:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003898:	f7fe f89c 	bl	80019d4 <HAL_GetTick>
 800389c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800389e:	e00a      	b.n	80038b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038a0:	f7fe f898 	bl	80019d4 <HAL_GetTick>
 80038a4:	4602      	mov	r2, r0
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	1ad3      	subs	r3, r2, r3
 80038aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d901      	bls.n	80038b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038b2:	2303      	movs	r3, #3
 80038b4:	e04f      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038b6:	4b2b      	ldr	r3, [pc, #172]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 80038b8:	689b      	ldr	r3, [r3, #8]
 80038ba:	f003 020c 	and.w	r2, r3, #12
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	685b      	ldr	r3, [r3, #4]
 80038c2:	009b      	lsls	r3, r3, #2
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d1eb      	bne.n	80038a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80038c8:	4b25      	ldr	r3, [pc, #148]	; (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	683a      	ldr	r2, [r7, #0]
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d20c      	bcs.n	80038f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038d6:	4b22      	ldr	r3, [pc, #136]	; (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80038d8:	683a      	ldr	r2, [r7, #0]
 80038da:	b2d2      	uxtb	r2, r2
 80038dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038de:	4b20      	ldr	r3, [pc, #128]	; (8003960 <HAL_RCC_ClockConfig+0x1b8>)
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f003 030f 	and.w	r3, r3, #15
 80038e6:	683a      	ldr	r2, [r7, #0]
 80038e8:	429a      	cmp	r2, r3
 80038ea:	d001      	beq.n	80038f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e032      	b.n	8003956 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	f003 0304 	and.w	r3, r3, #4
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d008      	beq.n	800390e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80038fc:	4b19      	ldr	r3, [pc, #100]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	68db      	ldr	r3, [r3, #12]
 8003908:	4916      	ldr	r1, [pc, #88]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 800390a:	4313      	orrs	r3, r2
 800390c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	f003 0308 	and.w	r3, r3, #8
 8003916:	2b00      	cmp	r3, #0
 8003918:	d009      	beq.n	800392e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800391a:	4b12      	ldr	r3, [pc, #72]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 800391c:	689b      	ldr	r3, [r3, #8]
 800391e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	691b      	ldr	r3, [r3, #16]
 8003926:	00db      	lsls	r3, r3, #3
 8003928:	490e      	ldr	r1, [pc, #56]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 800392a:	4313      	orrs	r3, r2
 800392c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800392e:	f000 f821 	bl	8003974 <HAL_RCC_GetSysClockFreq>
 8003932:	4601      	mov	r1, r0
 8003934:	4b0b      	ldr	r3, [pc, #44]	; (8003964 <HAL_RCC_ClockConfig+0x1bc>)
 8003936:	689b      	ldr	r3, [r3, #8]
 8003938:	091b      	lsrs	r3, r3, #4
 800393a:	f003 030f 	and.w	r3, r3, #15
 800393e:	4a0a      	ldr	r2, [pc, #40]	; (8003968 <HAL_RCC_ClockConfig+0x1c0>)
 8003940:	5cd3      	ldrb	r3, [r2, r3]
 8003942:	fa21 f303 	lsr.w	r3, r1, r3
 8003946:	4a09      	ldr	r2, [pc, #36]	; (800396c <HAL_RCC_ClockConfig+0x1c4>)
 8003948:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800394a:	4b09      	ldr	r3, [pc, #36]	; (8003970 <HAL_RCC_ClockConfig+0x1c8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	4618      	mov	r0, r3
 8003950:	f7fd fffc 	bl	800194c <HAL_InitTick>

  return HAL_OK;
 8003954:	2300      	movs	r3, #0
}
 8003956:	4618      	mov	r0, r3
 8003958:	3710      	adds	r7, #16
 800395a:	46bd      	mov	sp, r7
 800395c:	bd80      	pop	{r7, pc}
 800395e:	bf00      	nop
 8003960:	40023c00 	.word	0x40023c00
 8003964:	40023800 	.word	0x40023800
 8003968:	080062bc 	.word	0x080062bc
 800396c:	20000000 	.word	0x20000000
 8003970:	20000004 	.word	0x20000004

08003974 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003974:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003976:	b085      	sub	sp, #20
 8003978:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800397a:	2300      	movs	r3, #0
 800397c:	607b      	str	r3, [r7, #4]
 800397e:	2300      	movs	r3, #0
 8003980:	60fb      	str	r3, [r7, #12]
 8003982:	2300      	movs	r3, #0
 8003984:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003986:	2300      	movs	r3, #0
 8003988:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800398a:	4b63      	ldr	r3, [pc, #396]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800398c:	689b      	ldr	r3, [r3, #8]
 800398e:	f003 030c 	and.w	r3, r3, #12
 8003992:	2b04      	cmp	r3, #4
 8003994:	d007      	beq.n	80039a6 <HAL_RCC_GetSysClockFreq+0x32>
 8003996:	2b08      	cmp	r3, #8
 8003998:	d008      	beq.n	80039ac <HAL_RCC_GetSysClockFreq+0x38>
 800399a:	2b00      	cmp	r3, #0
 800399c:	f040 80b4 	bne.w	8003b08 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80039a0:	4b5e      	ldr	r3, [pc, #376]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x1a8>)
 80039a2:	60bb      	str	r3, [r7, #8]
       break;
 80039a4:	e0b3      	b.n	8003b0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80039a6:	4b5e      	ldr	r3, [pc, #376]	; (8003b20 <HAL_RCC_GetSysClockFreq+0x1ac>)
 80039a8:	60bb      	str	r3, [r7, #8]
      break;
 80039aa:	e0b0      	b.n	8003b0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80039ac:	4b5a      	ldr	r3, [pc, #360]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039ae:	685b      	ldr	r3, [r3, #4]
 80039b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80039b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80039b6:	4b58      	ldr	r3, [pc, #352]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d04a      	beq.n	8003a58 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80039c2:	4b55      	ldr	r3, [pc, #340]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	099b      	lsrs	r3, r3, #6
 80039c8:	f04f 0400 	mov.w	r4, #0
 80039cc:	f240 11ff 	movw	r1, #511	; 0x1ff
 80039d0:	f04f 0200 	mov.w	r2, #0
 80039d4:	ea03 0501 	and.w	r5, r3, r1
 80039d8:	ea04 0602 	and.w	r6, r4, r2
 80039dc:	4629      	mov	r1, r5
 80039de:	4632      	mov	r2, r6
 80039e0:	f04f 0300 	mov.w	r3, #0
 80039e4:	f04f 0400 	mov.w	r4, #0
 80039e8:	0154      	lsls	r4, r2, #5
 80039ea:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80039ee:	014b      	lsls	r3, r1, #5
 80039f0:	4619      	mov	r1, r3
 80039f2:	4622      	mov	r2, r4
 80039f4:	1b49      	subs	r1, r1, r5
 80039f6:	eb62 0206 	sbc.w	r2, r2, r6
 80039fa:	f04f 0300 	mov.w	r3, #0
 80039fe:	f04f 0400 	mov.w	r4, #0
 8003a02:	0194      	lsls	r4, r2, #6
 8003a04:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a08:	018b      	lsls	r3, r1, #6
 8003a0a:	1a5b      	subs	r3, r3, r1
 8003a0c:	eb64 0402 	sbc.w	r4, r4, r2
 8003a10:	f04f 0100 	mov.w	r1, #0
 8003a14:	f04f 0200 	mov.w	r2, #0
 8003a18:	00e2      	lsls	r2, r4, #3
 8003a1a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003a1e:	00d9      	lsls	r1, r3, #3
 8003a20:	460b      	mov	r3, r1
 8003a22:	4614      	mov	r4, r2
 8003a24:	195b      	adds	r3, r3, r5
 8003a26:	eb44 0406 	adc.w	r4, r4, r6
 8003a2a:	f04f 0100 	mov.w	r1, #0
 8003a2e:	f04f 0200 	mov.w	r2, #0
 8003a32:	0262      	lsls	r2, r4, #9
 8003a34:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8003a38:	0259      	lsls	r1, r3, #9
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	4614      	mov	r4, r2
 8003a3e:	4618      	mov	r0, r3
 8003a40:	4621      	mov	r1, r4
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f04f 0400 	mov.w	r4, #0
 8003a48:	461a      	mov	r2, r3
 8003a4a:	4623      	mov	r3, r4
 8003a4c:	f7fd f870 	bl	8000b30 <__aeabi_uldivmod>
 8003a50:	4603      	mov	r3, r0
 8003a52:	460c      	mov	r4, r1
 8003a54:	60fb      	str	r3, [r7, #12]
 8003a56:	e049      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a58:	4b2f      	ldr	r3, [pc, #188]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003a5a:	685b      	ldr	r3, [r3, #4]
 8003a5c:	099b      	lsrs	r3, r3, #6
 8003a5e:	f04f 0400 	mov.w	r4, #0
 8003a62:	f240 11ff 	movw	r1, #511	; 0x1ff
 8003a66:	f04f 0200 	mov.w	r2, #0
 8003a6a:	ea03 0501 	and.w	r5, r3, r1
 8003a6e:	ea04 0602 	and.w	r6, r4, r2
 8003a72:	4629      	mov	r1, r5
 8003a74:	4632      	mov	r2, r6
 8003a76:	f04f 0300 	mov.w	r3, #0
 8003a7a:	f04f 0400 	mov.w	r4, #0
 8003a7e:	0154      	lsls	r4, r2, #5
 8003a80:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8003a84:	014b      	lsls	r3, r1, #5
 8003a86:	4619      	mov	r1, r3
 8003a88:	4622      	mov	r2, r4
 8003a8a:	1b49      	subs	r1, r1, r5
 8003a8c:	eb62 0206 	sbc.w	r2, r2, r6
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	f04f 0400 	mov.w	r4, #0
 8003a98:	0194      	lsls	r4, r2, #6
 8003a9a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8003a9e:	018b      	lsls	r3, r1, #6
 8003aa0:	1a5b      	subs	r3, r3, r1
 8003aa2:	eb64 0402 	sbc.w	r4, r4, r2
 8003aa6:	f04f 0100 	mov.w	r1, #0
 8003aaa:	f04f 0200 	mov.w	r2, #0
 8003aae:	00e2      	lsls	r2, r4, #3
 8003ab0:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8003ab4:	00d9      	lsls	r1, r3, #3
 8003ab6:	460b      	mov	r3, r1
 8003ab8:	4614      	mov	r4, r2
 8003aba:	195b      	adds	r3, r3, r5
 8003abc:	eb44 0406 	adc.w	r4, r4, r6
 8003ac0:	f04f 0100 	mov.w	r1, #0
 8003ac4:	f04f 0200 	mov.w	r2, #0
 8003ac8:	02a2      	lsls	r2, r4, #10
 8003aca:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8003ace:	0299      	lsls	r1, r3, #10
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	4614      	mov	r4, r2
 8003ad4:	4618      	mov	r0, r3
 8003ad6:	4621      	mov	r1, r4
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	f04f 0400 	mov.w	r4, #0
 8003ade:	461a      	mov	r2, r3
 8003ae0:	4623      	mov	r3, r4
 8003ae2:	f7fd f825 	bl	8000b30 <__aeabi_uldivmod>
 8003ae6:	4603      	mov	r3, r0
 8003ae8:	460c      	mov	r4, r1
 8003aea:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003aec:	4b0a      	ldr	r3, [pc, #40]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8003aee:	685b      	ldr	r3, [r3, #4]
 8003af0:	0c1b      	lsrs	r3, r3, #16
 8003af2:	f003 0303 	and.w	r3, r3, #3
 8003af6:	3301      	adds	r3, #1
 8003af8:	005b      	lsls	r3, r3, #1
 8003afa:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8003afc:	68fa      	ldr	r2, [r7, #12]
 8003afe:	683b      	ldr	r3, [r7, #0]
 8003b00:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b04:	60bb      	str	r3, [r7, #8]
      break;
 8003b06:	e002      	b.n	8003b0e <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b08:	4b04      	ldr	r3, [pc, #16]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x1a8>)
 8003b0a:	60bb      	str	r3, [r7, #8]
      break;
 8003b0c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b0e:	68bb      	ldr	r3, [r7, #8]
}
 8003b10:	4618      	mov	r0, r3
 8003b12:	3714      	adds	r7, #20
 8003b14:	46bd      	mov	sp, r7
 8003b16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003b18:	40023800 	.word	0x40023800
 8003b1c:	00f42400 	.word	0x00f42400
 8003b20:	007a1200 	.word	0x007a1200

08003b24 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0301 	and.w	r3, r3, #1
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d105      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x28>
     (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f003 0304 	and.w	r3, r3, #4
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d035      	beq.n	8003bb8 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003b4c:	4b62      	ldr	r3, [pc, #392]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003b4e:	2200      	movs	r2, #0
 8003b50:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b52:	f7fd ff3f 	bl	80019d4 <HAL_GetTick>
 8003b56:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b58:	e008      	b.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b5a:	f7fd ff3b 	bl	80019d4 <HAL_GetTick>
 8003b5e:	4602      	mov	r2, r0
 8003b60:	697b      	ldr	r3, [r7, #20]
 8003b62:	1ad3      	subs	r3, r2, r3
 8003b64:	2b02      	cmp	r3, #2
 8003b66:	d901      	bls.n	8003b6c <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003b68:	2303      	movs	r3, #3
 8003b6a:	e0b0      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003b6c:	4b5b      	ldr	r3, [pc, #364]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d1f0      	bne.n	8003b5a <HAL_RCCEx_PeriphCLKConfig+0x36>
    __HAL_RCC_PLLI2S_I2SCLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	685b      	ldr	r3, [r3, #4]
 8003b7c:	019a      	lsls	r2, r3, #6
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	071b      	lsls	r3, r3, #28
 8003b84:	4955      	ldr	r1, [pc, #340]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003b86:	4313      	orrs	r3, r2
 8003b88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003b8c:	4b52      	ldr	r3, [pc, #328]	; (8003cd8 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8003b8e:	2201      	movs	r2, #1
 8003b90:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8003b92:	f7fd ff1f 	bl	80019d4 <HAL_GetTick>
 8003b96:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003b98:	e008      	b.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 8003b9a:	f7fd ff1b 	bl	80019d4 <HAL_GetTick>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	697b      	ldr	r3, [r7, #20]
 8003ba2:	1ad3      	subs	r3, r2, r3
 8003ba4:	2b02      	cmp	r3, #2
 8003ba6:	d901      	bls.n	8003bac <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003ba8:	2303      	movs	r3, #3
 8003baa:	e090      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bac:	4b4b      	ldr	r3, [pc, #300]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	d0f0      	beq.n	8003b9a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	f003 0302 	and.w	r3, r3, #2
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	f000 8083 	beq.w	8003ccc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8003bc6:	2300      	movs	r3, #0
 8003bc8:	60fb      	str	r3, [r7, #12]
 8003bca:	4b44      	ldr	r3, [pc, #272]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bce:	4a43      	ldr	r2, [pc, #268]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003bd4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bd6:	4b41      	ldr	r3, [pc, #260]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bde:	60fb      	str	r3, [r7, #12]
 8003be0:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8003be2:	4b3f      	ldr	r3, [pc, #252]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	4a3e      	ldr	r2, [pc, #248]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003be8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bec:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8003bee:	f7fd fef1 	bl	80019d4 <HAL_GetTick>
 8003bf2:	6178      	str	r0, [r7, #20]

    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003bf4:	e008      	b.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 8003bf6:	f7fd feed 	bl	80019d4 <HAL_GetTick>
 8003bfa:	4602      	mov	r2, r0
 8003bfc:	697b      	ldr	r3, [r7, #20]
 8003bfe:	1ad3      	subs	r3, r2, r3
 8003c00:	2b02      	cmp	r3, #2
 8003c02:	d901      	bls.n	8003c08 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8003c04:	2303      	movs	r3, #3
 8003c06:	e062      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while((PWR->CR & PWR_CR_DBP) == RESET)
 8003c08:	4b35      	ldr	r3, [pc, #212]	; (8003ce0 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d0f0      	beq.n	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003c14:	4b31      	ldr	r3, [pc, #196]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c18:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c1c:	613b      	str	r3, [r7, #16]
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003c1e:	693b      	ldr	r3, [r7, #16]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d02f      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	68db      	ldr	r3, [r3, #12]
 8003c28:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	429a      	cmp	r2, r3
 8003c30:	d028      	beq.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003c32:	4b2a      	ldr	r3, [pc, #168]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c3a:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003c3c:	4b29      	ldr	r3, [pc, #164]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003c42:	4b28      	ldr	r3, [pc, #160]	; (8003ce4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8003c48:	4a24      	ldr	r2, [pc, #144]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c4a:	693b      	ldr	r3, [r7, #16]
 8003c4c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8003c4e:	4b23      	ldr	r3, [pc, #140]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d114      	bne.n	8003c84 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8003c5a:	f7fd febb 	bl	80019d4 <HAL_GetTick>
 8003c5e:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c60:	e00a      	b.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c62:	f7fd feb7 	bl	80019d4 <HAL_GetTick>
 8003c66:	4602      	mov	r2, r0
 8003c68:	697b      	ldr	r3, [r7, #20]
 8003c6a:	1ad3      	subs	r3, r2, r3
 8003c6c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c70:	4293      	cmp	r3, r2
 8003c72:	d901      	bls.n	8003c78 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8003c74:	2303      	movs	r3, #3
 8003c76:	e02a      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003c78:	4b18      	ldr	r3, [pc, #96]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c7a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003c7c:	f003 0302 	and.w	r3, r3, #2
 8003c80:	2b00      	cmp	r3, #0
 8003c82:	d0ee      	beq.n	8003c62 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	68db      	ldr	r3, [r3, #12]
 8003c88:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003c8c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003c90:	d10d      	bne.n	8003cae <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8003c92:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003c94:	689b      	ldr	r3, [r3, #8]
 8003c96:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	68db      	ldr	r3, [r3, #12]
 8003c9e:	f023 4370 	bic.w	r3, r3, #4026531840	; 0xf0000000
 8003ca2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ca6:	490d      	ldr	r1, [pc, #52]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003ca8:	4313      	orrs	r3, r2
 8003caa:	608b      	str	r3, [r1, #8]
 8003cac:	e005      	b.n	8003cba <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003cae:	4b0b      	ldr	r3, [pc, #44]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	4a0a      	ldr	r2, [pc, #40]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cb4:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8003cb8:	6093      	str	r3, [r2, #8]
 8003cba:	4b08      	ldr	r3, [pc, #32]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cbc:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	68db      	ldr	r3, [r3, #12]
 8003cc2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003cc6:	4905      	ldr	r1, [pc, #20]	; (8003cdc <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	670b      	str	r3, [r1, #112]	; 0x70
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3718      	adds	r7, #24
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bd80      	pop	{r7, pc}
 8003cd6:	bf00      	nop
 8003cd8:	42470068 	.word	0x42470068
 8003cdc:	40023800 	.word	0x40023800
 8003ce0:	40007000 	.word	0x40007000
 8003ce4:	42470e40 	.word	0x42470e40

08003ce8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *         This parameter can be one of the following values:
  *            @arg RCC_PERIPHCLK_I2S: I2S peripheral clock
  * @retval Frequency in KHz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b087      	sub	sp, #28
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* This variable used to store the I2S clock frequency (value in Hz) */
  uint32_t frequency = 0U;
 8003cf0:	2300      	movs	r3, #0
 8003cf2:	617b      	str	r3, [r7, #20]
  /* This variable used to store the VCO Input (value in Hz) */
  uint32_t vcoinput = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	613b      	str	r3, [r7, #16]
  uint32_t srcclk = 0U;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]
  /* This variable used to store the VCO Output (value in Hz) */
  uint32_t vcooutput = 0U;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	60bb      	str	r3, [r7, #8]
  switch (PeriphClk)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d13d      	bne.n	8003d82 <HAL_RCCEx_GetPeriphCLKFreq+0x9a>
  {
  case RCC_PERIPHCLK_I2S:
    {
      /* Get the current I2S source */
      srcclk = __HAL_RCC_GET_I2S_SOURCE();
 8003d06:	4b22      	ldr	r3, [pc, #136]	; (8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003d08:	689b      	ldr	r3, [r3, #8]
 8003d0a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003d0e:	60fb      	str	r3, [r7, #12]
      switch (srcclk)
 8003d10:	68fb      	ldr	r3, [r7, #12]
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d004      	beq.n	8003d20 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003d16:	2b01      	cmp	r3, #1
 8003d18:	d12f      	bne.n	8003d7a <HAL_RCCEx_GetPeriphCLKFreq+0x92>
      {
      /* Check if I2S clock selection is External clock mapped on the I2S_CKIN pin used as I2S clock */
      case RCC_I2SCLKSOURCE_EXT:
        {
          /* Set the I2S clock to the external clock  value */
          frequency = EXTERNAL_CLOCK_VALUE;
 8003d1a:	4b1e      	ldr	r3, [pc, #120]	; (8003d94 <HAL_RCCEx_GetPeriphCLKFreq+0xac>)
 8003d1c:	617b      	str	r3, [r7, #20]
          break;
 8003d1e:	e02f      	b.n	8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SM));
          }
#else
          /* Configure the PLLI2S division factor */
          /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
          if((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLSOURCE_HSE)
 8003d20:	4b1b      	ldr	r3, [pc, #108]	; (8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d28:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d2c:	d108      	bne.n	8003d40 <HAL_RCCEx_GetPeriphCLKFreq+0x58>
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSE_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d2e:	4b18      	ldr	r3, [pc, #96]	; (8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003d30:	685b      	ldr	r3, [r3, #4]
 8003d32:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d36:	4a18      	ldr	r2, [pc, #96]	; (8003d98 <HAL_RCCEx_GetPeriphCLKFreq+0xb0>)
 8003d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	e007      	b.n	8003d50 <HAL_RCCEx_GetPeriphCLKFreq+0x68>
          }
          else
          {
            /* Get the I2S source clock value */
            vcoinput = (uint32_t)(HSI_VALUE / (uint32_t)(RCC->PLLCFGR & RCC_PLLCFGR_PLLM));
 8003d40:	4b13      	ldr	r3, [pc, #76]	; (8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003d42:	685b      	ldr	r3, [r3, #4]
 8003d44:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003d48:	4a14      	ldr	r2, [pc, #80]	; (8003d9c <HAL_RCCEx_GetPeriphCLKFreq+0xb4>)
 8003d4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d4e:	613b      	str	r3, [r7, #16]
          }
#endif /* STM32F411xE */
          /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
          vcooutput = (uint32_t)(vcoinput * (((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SN) >> 6U) & (RCC_PLLI2SCFGR_PLLI2SN >> 6U)));
 8003d50:	4b0f      	ldr	r3, [pc, #60]	; (8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003d52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d56:	099b      	lsrs	r3, r3, #6
 8003d58:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8003d5c:	693b      	ldr	r3, [r7, #16]
 8003d5e:	fb02 f303 	mul.w	r3, r2, r3
 8003d62:	60bb      	str	r3, [r7, #8]
          /* I2S_CLK = PLLI2S_VCO Output/PLLI2SR */
          frequency = (uint32_t)(vcooutput /(((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> 28U) & (RCC_PLLI2SCFGR_PLLI2SR >> 28U)));
 8003d64:	4b0a      	ldr	r3, [pc, #40]	; (8003d90 <HAL_RCCEx_GetPeriphCLKFreq+0xa8>)
 8003d66:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003d6a:	0f1b      	lsrs	r3, r3, #28
 8003d6c:	f003 0307 	and.w	r3, r3, #7
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d76:	617b      	str	r3, [r7, #20]
          break;
 8003d78:	e002      	b.n	8003d80 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
        }
        /* Clock not enabled for I2S*/
      default:
        {
          frequency = 0U;
 8003d7a:	2300      	movs	r3, #0
 8003d7c:	617b      	str	r3, [r7, #20]
          break;
 8003d7e:	bf00      	nop
        }
      }
      break;
 8003d80:	bf00      	nop
    }
  }
  return frequency;
 8003d82:	697b      	ldr	r3, [r7, #20]
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	371c      	adds	r7, #28
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d8e:	4770      	bx	lr
 8003d90:	40023800 	.word	0x40023800
 8003d94:	00bb8000 	.word	0x00bb8000
 8003d98:	007a1200 	.word	0x007a1200
 8003d9c:	00f42400 	.word	0x00f42400

08003da0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b082      	sub	sp, #8
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d101      	bne.n	8003db2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e056      	b.n	8003e60 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	2200      	movs	r2, #0
 8003db6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003dbe:	b2db      	uxtb	r3, r3
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d106      	bne.n	8003dd2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003dcc:	6878      	ldr	r0, [r7, #4]
 8003dce:	f7fd fc4d 	bl	800166c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	2202      	movs	r2, #2
 8003dd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003de8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	685a      	ldr	r2, [r3, #4]
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	689b      	ldr	r3, [r3, #8]
 8003df2:	431a      	orrs	r2, r3
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	68db      	ldr	r3, [r3, #12]
 8003df8:	431a      	orrs	r2, r3
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	691b      	ldr	r3, [r3, #16]
 8003dfe:	431a      	orrs	r2, r3
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	695b      	ldr	r3, [r3, #20]
 8003e04:	431a      	orrs	r2, r3
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	699b      	ldr	r3, [r3, #24]
 8003e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e0e:	431a      	orrs	r2, r3
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	69db      	ldr	r3, [r3, #28]
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	ea42 0103 	orr.w	r1, r2, r3
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	430a      	orrs	r2, r1
 8003e28:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	699b      	ldr	r3, [r3, #24]
 8003e2e:	0c1b      	lsrs	r3, r3, #16
 8003e30:	f003 0104 	and.w	r1, r3, #4
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	430a      	orrs	r2, r1
 8003e3e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	69da      	ldr	r2, [r3, #28]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003e4e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2200      	movs	r2, #0
 8003e54:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003e5e:	2300      	movs	r3, #0
}
 8003e60:	4618      	mov	r0, r3
 8003e62:	3708      	adds	r7, #8
 8003e64:	46bd      	mov	sp, r7
 8003e66:	bd80      	pop	{r7, pc}

08003e68 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e68:	b084      	sub	sp, #16
 8003e6a:	b580      	push	{r7, lr}
 8003e6c:	b084      	sub	sp, #16
 8003e6e:	af00      	add	r7, sp, #0
 8003e70:	6078      	str	r0, [r7, #4]
 8003e72:	f107 001c 	add.w	r0, r7, #28
 8003e76:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e7c:	2b01      	cmp	r3, #1
 8003e7e:	d122      	bne.n	8003ec6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e84:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	68db      	ldr	r3, [r3, #12]
 8003e90:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e98:	687a      	ldr	r2, [r7, #4]
 8003e9a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003ea8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003eaa:	2b01      	cmp	r3, #1
 8003eac:	d105      	bne.n	8003eba <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	68db      	ldr	r3, [r3, #12]
 8003eb2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8003eba:	6878      	ldr	r0, [r7, #4]
 8003ebc:	f000 f8b8 	bl	8004030 <USB_CoreReset>
 8003ec0:	4603      	mov	r3, r0
 8003ec2:	73fb      	strb	r3, [r7, #15]
 8003ec4:	e01a      	b.n	8003efc <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	68db      	ldr	r3, [r3, #12]
 8003eca:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f000 f8ac 	bl	8004030 <USB_CoreReset>
 8003ed8:	4603      	mov	r3, r0
 8003eda:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003edc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d106      	bne.n	8003ef0 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ee6:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	639a      	str	r2, [r3, #56]	; 0x38
 8003eee:	e005      	b.n	8003efc <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ef4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	d10b      	bne.n	8003f1a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	689b      	ldr	r3, [r3, #8]
 8003f06:	f043 0206 	orr.w	r2, r3, #6
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	689b      	ldr	r3, [r3, #8]
 8003f12:	f043 0220 	orr.w	r2, r3, #32
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003f1a:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f1c:	4618      	mov	r0, r3
 8003f1e:	3710      	adds	r7, #16
 8003f20:	46bd      	mov	sp, r7
 8003f22:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003f26:	b004      	add	sp, #16
 8003f28:	4770      	bx	lr

08003f2a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f2a:	b480      	push	{r7}
 8003f2c:	b083      	sub	sp, #12
 8003f2e:	af00      	add	r7, sp, #0
 8003f30:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f023 0201 	bic.w	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	370c      	adds	r7, #12
 8003f44:	46bd      	mov	sp, r7
 8003f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4a:	4770      	bx	lr

08003f4c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b082      	sub	sp, #8
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	460b      	mov	r3, r1
 8003f56:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	68db      	ldr	r3, [r3, #12]
 8003f5c:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003f64:	78fb      	ldrb	r3, [r7, #3]
 8003f66:	2b01      	cmp	r3, #1
 8003f68:	d106      	bne.n	8003f78 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	68db      	ldr	r3, [r3, #12]
 8003f6e:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	60da      	str	r2, [r3, #12]
 8003f76:	e00b      	b.n	8003f90 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8003f78:	78fb      	ldrb	r3, [r7, #3]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	68db      	ldr	r3, [r3, #12]
 8003f82:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	60da      	str	r2, [r3, #12]
 8003f8a:	e001      	b.n	8003f90 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e003      	b.n	8003f98 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8003f90:	2032      	movs	r0, #50	; 0x32
 8003f92:	f7fd fd2b 	bl	80019ec <HAL_Delay>

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003faa:	2300      	movs	r3, #0
 8003fac:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	019b      	lsls	r3, r3, #6
 8003fb2:	f043 0220 	orr.w	r2, r3, #32
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	3301      	adds	r3, #1
 8003fbe:	60fb      	str	r3, [r7, #12]
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4a09      	ldr	r2, [pc, #36]	; (8003fe8 <USB_FlushTxFifo+0x48>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d901      	bls.n	8003fcc <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003fc8:	2303      	movs	r3, #3
 8003fca:	e006      	b.n	8003fda <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	691b      	ldr	r3, [r3, #16]
 8003fd0:	f003 0320 	and.w	r3, r3, #32
 8003fd4:	2b20      	cmp	r3, #32
 8003fd6:	d0f0      	beq.n	8003fba <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003fd8:	2300      	movs	r3, #0
}
 8003fda:	4618      	mov	r0, r3
 8003fdc:	3714      	adds	r7, #20
 8003fde:	46bd      	mov	sp, r7
 8003fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe4:	4770      	bx	lr
 8003fe6:	bf00      	nop
 8003fe8:	00030d40 	.word	0x00030d40

08003fec <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003fec:	b480      	push	{r7}
 8003fee:	b085      	sub	sp, #20
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003ff4:	2300      	movs	r3, #0
 8003ff6:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2210      	movs	r2, #16
 8003ffc:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003ffe:	68fb      	ldr	r3, [r7, #12]
 8004000:	3301      	adds	r3, #1
 8004002:	60fb      	str	r3, [r7, #12]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	4a09      	ldr	r2, [pc, #36]	; (800402c <USB_FlushRxFifo+0x40>)
 8004008:	4293      	cmp	r3, r2
 800400a:	d901      	bls.n	8004010 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 800400c:	2303      	movs	r3, #3
 800400e:	e006      	b.n	800401e <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	691b      	ldr	r3, [r3, #16]
 8004014:	f003 0310 	and.w	r3, r3, #16
 8004018:	2b10      	cmp	r3, #16
 800401a:	d0f0      	beq.n	8003ffe <USB_FlushRxFifo+0x12>

  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	3714      	adds	r7, #20
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr
 800402a:	bf00      	nop
 800402c:	00030d40 	.word	0x00030d40

08004030 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004038:	2300      	movs	r3, #0
 800403a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	3301      	adds	r3, #1
 8004040:	60fb      	str	r3, [r7, #12]
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	4a13      	ldr	r2, [pc, #76]	; (8004094 <USB_CoreReset+0x64>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d901      	bls.n	800404e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800404a:	2303      	movs	r3, #3
 800404c:	e01b      	b.n	8004086 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	2b00      	cmp	r3, #0
 8004054:	daf2      	bge.n	800403c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	691b      	ldr	r3, [r3, #16]
 800405e:	f043 0201 	orr.w	r2, r3, #1
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	3301      	adds	r3, #1
 800406a:	60fb      	str	r3, [r7, #12]
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4a09      	ldr	r2, [pc, #36]	; (8004094 <USB_CoreReset+0x64>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d901      	bls.n	8004078 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004074:	2303      	movs	r3, #3
 8004076:	e006      	b.n	8004086 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	691b      	ldr	r3, [r3, #16]
 800407c:	f003 0301 	and.w	r3, r3, #1
 8004080:	2b01      	cmp	r3, #1
 8004082:	d0f0      	beq.n	8004066 <USB_CoreReset+0x36>

  return HAL_OK;
 8004084:	2300      	movs	r3, #0
}
 8004086:	4618      	mov	r0, r3
 8004088:	3714      	adds	r7, #20
 800408a:	46bd      	mov	sp, r7
 800408c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004090:	4770      	bx	lr
 8004092:	bf00      	nop
 8004094:	00030d40 	.word	0x00030d40

08004098 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004098:	b084      	sub	sp, #16
 800409a:	b580      	push	{r7, lr}
 800409c:	b084      	sub	sp, #16
 800409e:	af00      	add	r7, sp, #0
 80040a0:	6078      	str	r0, [r7, #4]
 80040a2:	f107 001c 	add.w	r0, r7, #28
 80040a6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	60bb      	str	r3, [r7, #8]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040ae:	68bb      	ldr	r3, [r7, #8]
 80040b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040b4:	461a      	mov	r2, r3
 80040b6:	2300      	movs	r3, #0
 80040b8:	6013      	str	r3, [r2, #0]
#else
  /*
  * Disable HW VBUS sensing. VBUS is internally considered to be always
  * at VBUS-Valid level (5V).
  */
  USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040ca:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	639a      	str	r2, [r3, #56]	; 0x38
  USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040d6:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	639a      	str	r2, [r3, #56]	; 0x38
#if defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx)
  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
#endif /* defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  if ((USBx->CID & (0x1U << 8)) != 0U)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d018      	beq.n	800411c <USB_HostInit+0x84>
  {
    if (cfg.speed == USBH_FSLS_SPEED)
 80040ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d10a      	bne.n	8004106 <USB_HostInit+0x6e>
    {
      /* Force Device Enumeration to FS/LS mode only */
      USBx_HOST->HCFG |= USB_OTG_HCFG_FSLSS;
 80040f0:	68bb      	ldr	r3, [r7, #8]
 80040f2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	68ba      	ldr	r2, [r7, #8]
 80040fa:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80040fe:	f043 0304 	orr.w	r3, r3, #4
 8004102:	6013      	str	r3, [r2, #0]
 8004104:	e014      	b.n	8004130 <USB_HostInit+0x98>
    }
    else
    {
      /* Set default Max speed support */
      USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8004106:	68bb      	ldr	r3, [r7, #8]
 8004108:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	68ba      	ldr	r2, [r7, #8]
 8004110:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8004114:	f023 0304 	bic.w	r3, r3, #4
 8004118:	6013      	str	r3, [r2, #0]
 800411a:	e009      	b.n	8004130 <USB_HostInit+0x98>
    }
  }
  else
  {
    /* Set default Max speed support */
    USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 800411c:	68bb      	ldr	r3, [r7, #8]
 800411e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	68ba      	ldr	r2, [r7, #8]
 8004126:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 800412a:	f023 0304 	bic.w	r3, r3, #4
 800412e:	6013      	str	r3, [r2, #0]
  }

  /* Make sure the FIFOs are flushed. */
  (void)USB_FlushTxFifo(USBx, 0x10U); /* all Tx FIFOs */
 8004130:	2110      	movs	r1, #16
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f7ff ff34 	bl	8003fa0 <USB_FlushTxFifo>
  (void)USB_FlushRxFifo(USBx);
 8004138:	6878      	ldr	r0, [r7, #4]
 800413a:	f7ff ff57 	bl	8003fec <USB_FlushRxFifo>

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 800413e:	2300      	movs	r3, #0
 8004140:	60fb      	str	r3, [r7, #12]
 8004142:	e015      	b.n	8004170 <USB_HostInit+0xd8>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	015a      	lsls	r2, r3, #5
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4413      	add	r3, r2
 800414c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004150:	461a      	mov	r2, r3
 8004152:	f04f 33ff 	mov.w	r3, #4294967295
 8004156:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	015a      	lsls	r2, r3, #5
 800415c:	68bb      	ldr	r3, [r7, #8]
 800415e:	4413      	add	r3, r2
 8004160:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8004164:	461a      	mov	r2, r3
 8004166:	2300      	movs	r3, #0
 8004168:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	3301      	adds	r3, #1
 800416e:	60fb      	str	r3, [r7, #12]
 8004170:	6a3b      	ldr	r3, [r7, #32]
 8004172:	68fa      	ldr	r2, [r7, #12]
 8004174:	429a      	cmp	r2, r3
 8004176:	d3e5      	bcc.n	8004144 <USB_HostInit+0xac>
  }

  /* Enable VBUS driving */
  (void)USB_DriveVbus(USBx, 1U);
 8004178:	2101      	movs	r1, #1
 800417a:	6878      	ldr	r0, [r7, #4]
 800417c:	f000 f848 	bl	8004210 <USB_DriveVbus>

  HAL_Delay(200U);
 8004180:	20c8      	movs	r0, #200	; 0xc8
 8004182:	f7fd fc33 	bl	80019ec <HAL_Delay>

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	2200      	movs	r2, #0
 800418a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f04f 32ff 	mov.w	r2, #4294967295
 8004192:	615a      	str	r2, [r3, #20]

  if ((USBx->CID & (0x1U << 8)) != 0U)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004198:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800419c:	2b00      	cmp	r3, #0
 800419e:	d00b      	beq.n	80041b8 <USB_HostInit+0x120>
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x200U;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80041a6:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x100U << 16) & USB_OTG_NPTXFD) | 0x200U);
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	4a14      	ldr	r2, [pc, #80]	; (80041fc <USB_HostInit+0x164>)
 80041ac:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0xE0U << 16) & USB_OTG_HPTXFSIZ_PTXFD) | 0x300U);
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a13      	ldr	r2, [pc, #76]	; (8004200 <USB_HostInit+0x168>)
 80041b2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 80041b6:	e009      	b.n	80041cc <USB_HostInit+0x134>
  }
  else
  {
    /* set Rx FIFO size */
    USBx->GRXFSIZ  = 0x80U;
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	2280      	movs	r2, #128	; 0x80
 80041bc:	625a      	str	r2, [r3, #36]	; 0x24
    USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	4a10      	ldr	r2, [pc, #64]	; (8004204 <USB_HostInit+0x16c>)
 80041c2:	629a      	str	r2, [r3, #40]	; 0x28
    USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	4a10      	ldr	r2, [pc, #64]	; (8004208 <USB_HostInit+0x170>)
 80041c8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  }

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80041cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041ce:	2b00      	cmp	r3, #0
 80041d0:	d105      	bne.n	80041de <USB_HostInit+0x146>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	f043 0210 	orr.w	r2, r3, #16
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	699a      	ldr	r2, [r3, #24]
 80041e2:	4b0a      	ldr	r3, [pc, #40]	; (800420c <USB_HostInit+0x174>)
 80041e4:	4313      	orrs	r3, r2
 80041e6:	687a      	ldr	r2, [r7, #4]
 80041e8:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return HAL_OK;
 80041ea:	2300      	movs	r3, #0
}
 80041ec:	4618      	mov	r0, r3
 80041ee:	3710      	adds	r7, #16
 80041f0:	46bd      	mov	sp, r7
 80041f2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80041f6:	b004      	add	sp, #16
 80041f8:	4770      	bx	lr
 80041fa:	bf00      	nop
 80041fc:	01000200 	.word	0x01000200
 8004200:	00e00300 	.word	0x00e00300
 8004204:	00600080 	.word	0x00600080
 8004208:	004000e0 	.word	0x004000e0
 800420c:	a3200008 	.word	0xa3200008

08004210 <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8004210:	b480      	push	{r7}
 8004212:	b085      	sub	sp, #20
 8004214:	af00      	add	r7, sp, #0
 8004216:	6078      	str	r0, [r7, #4]
 8004218:	460b      	mov	r3, r1
 800421a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8004220:	2300      	movs	r3, #0
 8004222:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8004234:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8004236:	68bb      	ldr	r3, [r7, #8]
 8004238:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800423c:	2b00      	cmp	r3, #0
 800423e:	d109      	bne.n	8004254 <USB_DriveVbus+0x44>
 8004240:	78fb      	ldrb	r3, [r7, #3]
 8004242:	2b01      	cmp	r3, #1
 8004244:	d106      	bne.n	8004254 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	68fa      	ldr	r2, [r7, #12]
 800424a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800424e:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004252:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8004254:	68bb      	ldr	r3, [r7, #8]
 8004256:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800425a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800425e:	d109      	bne.n	8004274 <USB_DriveVbus+0x64>
 8004260:	78fb      	ldrb	r3, [r7, #3]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d106      	bne.n	8004274 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8004266:	68bb      	ldr	r3, [r7, #8]
 8004268:	68fa      	ldr	r2, [r7, #12]
 800426a:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 800426e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004272:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3714      	adds	r7, #20
 800427a:	46bd      	mov	sp, r7
 800427c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004280:	4770      	bx	lr
	...

08004284 <__errno>:
 8004284:	4b01      	ldr	r3, [pc, #4]	; (800428c <__errno+0x8>)
 8004286:	6818      	ldr	r0, [r3, #0]
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	2000000c 	.word	0x2000000c

08004290 <__libc_init_array>:
 8004290:	b570      	push	{r4, r5, r6, lr}
 8004292:	4e0d      	ldr	r6, [pc, #52]	; (80042c8 <__libc_init_array+0x38>)
 8004294:	4c0d      	ldr	r4, [pc, #52]	; (80042cc <__libc_init_array+0x3c>)
 8004296:	1ba4      	subs	r4, r4, r6
 8004298:	10a4      	asrs	r4, r4, #2
 800429a:	2500      	movs	r5, #0
 800429c:	42a5      	cmp	r5, r4
 800429e:	d109      	bne.n	80042b4 <__libc_init_array+0x24>
 80042a0:	4e0b      	ldr	r6, [pc, #44]	; (80042d0 <__libc_init_array+0x40>)
 80042a2:	4c0c      	ldr	r4, [pc, #48]	; (80042d4 <__libc_init_array+0x44>)
 80042a4:	f001 fffa 	bl	800629c <_init>
 80042a8:	1ba4      	subs	r4, r4, r6
 80042aa:	10a4      	asrs	r4, r4, #2
 80042ac:	2500      	movs	r5, #0
 80042ae:	42a5      	cmp	r5, r4
 80042b0:	d105      	bne.n	80042be <__libc_init_array+0x2e>
 80042b2:	bd70      	pop	{r4, r5, r6, pc}
 80042b4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042b8:	4798      	blx	r3
 80042ba:	3501      	adds	r5, #1
 80042bc:	e7ee      	b.n	800429c <__libc_init_array+0xc>
 80042be:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042c2:	4798      	blx	r3
 80042c4:	3501      	adds	r5, #1
 80042c6:	e7f2      	b.n	80042ae <__libc_init_array+0x1e>
 80042c8:	080064f8 	.word	0x080064f8
 80042cc:	080064f8 	.word	0x080064f8
 80042d0:	080064f8 	.word	0x080064f8
 80042d4:	080064fc 	.word	0x080064fc

080042d8 <memset>:
 80042d8:	4402      	add	r2, r0
 80042da:	4603      	mov	r3, r0
 80042dc:	4293      	cmp	r3, r2
 80042de:	d100      	bne.n	80042e2 <memset+0xa>
 80042e0:	4770      	bx	lr
 80042e2:	f803 1b01 	strb.w	r1, [r3], #1
 80042e6:	e7f9      	b.n	80042dc <memset+0x4>

080042e8 <sin>:
 80042e8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80042ea:	ec51 0b10 	vmov	r0, r1, d0
 80042ee:	4a20      	ldr	r2, [pc, #128]	; (8004370 <sin+0x88>)
 80042f0:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80042f4:	4293      	cmp	r3, r2
 80042f6:	dc07      	bgt.n	8004308 <sin+0x20>
 80042f8:	ed9f 1b1b 	vldr	d1, [pc, #108]	; 8004368 <sin+0x80>
 80042fc:	2000      	movs	r0, #0
 80042fe:	f001 fd67 	bl	8005dd0 <__kernel_sin>
 8004302:	ec51 0b10 	vmov	r0, r1, d0
 8004306:	e007      	b.n	8004318 <sin+0x30>
 8004308:	4a1a      	ldr	r2, [pc, #104]	; (8004374 <sin+0x8c>)
 800430a:	4293      	cmp	r3, r2
 800430c:	dd09      	ble.n	8004322 <sin+0x3a>
 800430e:	ee10 2a10 	vmov	r2, s0
 8004312:	460b      	mov	r3, r1
 8004314:	f7fb ff5c 	bl	80001d0 <__aeabi_dsub>
 8004318:	ec41 0b10 	vmov	d0, r0, r1
 800431c:	b005      	add	sp, #20
 800431e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004322:	4668      	mov	r0, sp
 8004324:	f000 fea8 	bl	8005078 <__ieee754_rem_pio2>
 8004328:	f000 0003 	and.w	r0, r0, #3
 800432c:	2801      	cmp	r0, #1
 800432e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8004332:	ed9d 0b00 	vldr	d0, [sp]
 8004336:	d004      	beq.n	8004342 <sin+0x5a>
 8004338:	2802      	cmp	r0, #2
 800433a:	d005      	beq.n	8004348 <sin+0x60>
 800433c:	b970      	cbnz	r0, 800435c <sin+0x74>
 800433e:	2001      	movs	r0, #1
 8004340:	e7dd      	b.n	80042fe <sin+0x16>
 8004342:	f001 f93d 	bl	80055c0 <__kernel_cos>
 8004346:	e7dc      	b.n	8004302 <sin+0x1a>
 8004348:	2001      	movs	r0, #1
 800434a:	f001 fd41 	bl	8005dd0 <__kernel_sin>
 800434e:	ec53 2b10 	vmov	r2, r3, d0
 8004352:	ee10 0a10 	vmov	r0, s0
 8004356:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800435a:	e7dd      	b.n	8004318 <sin+0x30>
 800435c:	f001 f930 	bl	80055c0 <__kernel_cos>
 8004360:	e7f5      	b.n	800434e <sin+0x66>
 8004362:	bf00      	nop
 8004364:	f3af 8000 	nop.w
	...
 8004370:	3fe921fb 	.word	0x3fe921fb
 8004374:	7fefffff 	.word	0x7fefffff

08004378 <pow>:
 8004378:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800437c:	ed2d 8b04 	vpush	{d8-d9}
 8004380:	f8df 92d0 	ldr.w	r9, [pc, #720]	; 8004654 <pow+0x2dc>
 8004384:	b08d      	sub	sp, #52	; 0x34
 8004386:	ec57 6b10 	vmov	r6, r7, d0
 800438a:	ec55 4b11 	vmov	r4, r5, d1
 800438e:	f000 f963 	bl	8004658 <__ieee754_pow>
 8004392:	f999 3000 	ldrsb.w	r3, [r9]
 8004396:	9300      	str	r3, [sp, #0]
 8004398:	3301      	adds	r3, #1
 800439a:	eeb0 8a40 	vmov.f32	s16, s0
 800439e:	eef0 8a60 	vmov.f32	s17, s1
 80043a2:	46c8      	mov	r8, r9
 80043a4:	d05f      	beq.n	8004466 <pow+0xee>
 80043a6:	4622      	mov	r2, r4
 80043a8:	462b      	mov	r3, r5
 80043aa:	4620      	mov	r0, r4
 80043ac:	4629      	mov	r1, r5
 80043ae:	f7fc fb61 	bl	8000a74 <__aeabi_dcmpun>
 80043b2:	4683      	mov	fp, r0
 80043b4:	2800      	cmp	r0, #0
 80043b6:	d156      	bne.n	8004466 <pow+0xee>
 80043b8:	4632      	mov	r2, r6
 80043ba:	463b      	mov	r3, r7
 80043bc:	4630      	mov	r0, r6
 80043be:	4639      	mov	r1, r7
 80043c0:	f7fc fb58 	bl	8000a74 <__aeabi_dcmpun>
 80043c4:	9001      	str	r0, [sp, #4]
 80043c6:	b1e8      	cbz	r0, 8004404 <pow+0x8c>
 80043c8:	2200      	movs	r2, #0
 80043ca:	2300      	movs	r3, #0
 80043cc:	4620      	mov	r0, r4
 80043ce:	4629      	mov	r1, r5
 80043d0:	f7fc fb1e 	bl	8000a10 <__aeabi_dcmpeq>
 80043d4:	2800      	cmp	r0, #0
 80043d6:	d046      	beq.n	8004466 <pow+0xee>
 80043d8:	2301      	movs	r3, #1
 80043da:	9302      	str	r3, [sp, #8]
 80043dc:	4b96      	ldr	r3, [pc, #600]	; (8004638 <pow+0x2c0>)
 80043de:	9303      	str	r3, [sp, #12]
 80043e0:	4b96      	ldr	r3, [pc, #600]	; (800463c <pow+0x2c4>)
 80043e2:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
 80043e6:	2200      	movs	r2, #0
 80043e8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80043ec:	9b00      	ldr	r3, [sp, #0]
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80043f4:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80043f8:	d033      	beq.n	8004462 <pow+0xea>
 80043fa:	a802      	add	r0, sp, #8
 80043fc:	f001 fe38 	bl	8006070 <matherr>
 8004400:	bb48      	cbnz	r0, 8004456 <pow+0xde>
 8004402:	e05d      	b.n	80044c0 <pow+0x148>
 8004404:	f04f 0a00 	mov.w	sl, #0
 8004408:	f04f 0b00 	mov.w	fp, #0
 800440c:	4652      	mov	r2, sl
 800440e:	465b      	mov	r3, fp
 8004410:	4630      	mov	r0, r6
 8004412:	4639      	mov	r1, r7
 8004414:	f7fc fafc 	bl	8000a10 <__aeabi_dcmpeq>
 8004418:	ec4b ab19 	vmov	d9, sl, fp
 800441c:	2800      	cmp	r0, #0
 800441e:	d054      	beq.n	80044ca <pow+0x152>
 8004420:	4652      	mov	r2, sl
 8004422:	465b      	mov	r3, fp
 8004424:	4620      	mov	r0, r4
 8004426:	4629      	mov	r1, r5
 8004428:	f7fc faf2 	bl	8000a10 <__aeabi_dcmpeq>
 800442c:	4680      	mov	r8, r0
 800442e:	b318      	cbz	r0, 8004478 <pow+0x100>
 8004430:	2301      	movs	r3, #1
 8004432:	9302      	str	r3, [sp, #8]
 8004434:	4b80      	ldr	r3, [pc, #512]	; (8004638 <pow+0x2c0>)
 8004436:	9303      	str	r3, [sp, #12]
 8004438:	9b01      	ldr	r3, [sp, #4]
 800443a:	930a      	str	r3, [sp, #40]	; 0x28
 800443c:	9b00      	ldr	r3, [sp, #0]
 800443e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004442:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004446:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800444a:	2b00      	cmp	r3, #0
 800444c:	d0d5      	beq.n	80043fa <pow+0x82>
 800444e:	4b7b      	ldr	r3, [pc, #492]	; (800463c <pow+0x2c4>)
 8004450:	2200      	movs	r2, #0
 8004452:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004456:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004458:	b11b      	cbz	r3, 8004462 <pow+0xea>
 800445a:	f7ff ff13 	bl	8004284 <__errno>
 800445e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004460:	6003      	str	r3, [r0, #0]
 8004462:	ed9d 8b08 	vldr	d8, [sp, #32]
 8004466:	eeb0 0a48 	vmov.f32	s0, s16
 800446a:	eef0 0a68 	vmov.f32	s1, s17
 800446e:	b00d      	add	sp, #52	; 0x34
 8004470:	ecbd 8b04 	vpop	{d8-d9}
 8004474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004478:	ec45 4b10 	vmov	d0, r4, r5
 800447c:	f001 fd6b 	bl	8005f56 <finite>
 8004480:	2800      	cmp	r0, #0
 8004482:	d0f0      	beq.n	8004466 <pow+0xee>
 8004484:	4652      	mov	r2, sl
 8004486:	465b      	mov	r3, fp
 8004488:	4620      	mov	r0, r4
 800448a:	4629      	mov	r1, r5
 800448c:	f7fc faca 	bl	8000a24 <__aeabi_dcmplt>
 8004490:	2800      	cmp	r0, #0
 8004492:	d0e8      	beq.n	8004466 <pow+0xee>
 8004494:	2301      	movs	r3, #1
 8004496:	9302      	str	r3, [sp, #8]
 8004498:	4b67      	ldr	r3, [pc, #412]	; (8004638 <pow+0x2c0>)
 800449a:	9303      	str	r3, [sp, #12]
 800449c:	f999 3000 	ldrsb.w	r3, [r9]
 80044a0:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
 80044a4:	e9cd 6704 	strd	r6, r7, [sp, #16]
 80044a8:	e9cd 4506 	strd	r4, r5, [sp, #24]
 80044ac:	b913      	cbnz	r3, 80044b4 <pow+0x13c>
 80044ae:	e9cd ab08 	strd	sl, fp, [sp, #32]
 80044b2:	e7a2      	b.n	80043fa <pow+0x82>
 80044b4:	4962      	ldr	r1, [pc, #392]	; (8004640 <pow+0x2c8>)
 80044b6:	2000      	movs	r0, #0
 80044b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80044bc:	2b02      	cmp	r3, #2
 80044be:	d19c      	bne.n	80043fa <pow+0x82>
 80044c0:	f7ff fee0 	bl	8004284 <__errno>
 80044c4:	2321      	movs	r3, #33	; 0x21
 80044c6:	6003      	str	r3, [r0, #0]
 80044c8:	e7c5      	b.n	8004456 <pow+0xde>
 80044ca:	eeb0 0a48 	vmov.f32	s0, s16
 80044ce:	eef0 0a68 	vmov.f32	s1, s17
 80044d2:	f001 fd40 	bl	8005f56 <finite>
 80044d6:	9000      	str	r0, [sp, #0]
 80044d8:	2800      	cmp	r0, #0
 80044da:	f040 8081 	bne.w	80045e0 <pow+0x268>
 80044de:	ec47 6b10 	vmov	d0, r6, r7
 80044e2:	f001 fd38 	bl	8005f56 <finite>
 80044e6:	2800      	cmp	r0, #0
 80044e8:	d07a      	beq.n	80045e0 <pow+0x268>
 80044ea:	ec45 4b10 	vmov	d0, r4, r5
 80044ee:	f001 fd32 	bl	8005f56 <finite>
 80044f2:	2800      	cmp	r0, #0
 80044f4:	d074      	beq.n	80045e0 <pow+0x268>
 80044f6:	ec53 2b18 	vmov	r2, r3, d8
 80044fa:	ee18 0a10 	vmov	r0, s16
 80044fe:	4619      	mov	r1, r3
 8004500:	f7fc fab8 	bl	8000a74 <__aeabi_dcmpun>
 8004504:	f999 9000 	ldrsb.w	r9, [r9]
 8004508:	4b4b      	ldr	r3, [pc, #300]	; (8004638 <pow+0x2c0>)
 800450a:	b1b0      	cbz	r0, 800453a <pow+0x1c2>
 800450c:	2201      	movs	r2, #1
 800450e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004512:	9b00      	ldr	r3, [sp, #0]
 8004514:	930a      	str	r3, [sp, #40]	; 0x28
 8004516:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800451a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800451e:	f1b9 0f00 	cmp.w	r9, #0
 8004522:	d0c4      	beq.n	80044ae <pow+0x136>
 8004524:	4652      	mov	r2, sl
 8004526:	465b      	mov	r3, fp
 8004528:	4650      	mov	r0, sl
 800452a:	4659      	mov	r1, fp
 800452c:	f7fc f932 	bl	8000794 <__aeabi_ddiv>
 8004530:	f1b9 0f02 	cmp.w	r9, #2
 8004534:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8004538:	e7c1      	b.n	80044be <pow+0x146>
 800453a:	2203      	movs	r2, #3
 800453c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004540:	900a      	str	r0, [sp, #40]	; 0x28
 8004542:	4629      	mov	r1, r5
 8004544:	4620      	mov	r0, r4
 8004546:	2200      	movs	r2, #0
 8004548:	4b3e      	ldr	r3, [pc, #248]	; (8004644 <pow+0x2cc>)
 800454a:	e9cd 4506 	strd	r4, r5, [sp, #24]
 800454e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004552:	f7fb fff5 	bl	8000540 <__aeabi_dmul>
 8004556:	4604      	mov	r4, r0
 8004558:	460d      	mov	r5, r1
 800455a:	f1b9 0f00 	cmp.w	r9, #0
 800455e:	d124      	bne.n	80045aa <pow+0x232>
 8004560:	4b39      	ldr	r3, [pc, #228]	; (8004648 <pow+0x2d0>)
 8004562:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004566:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800456a:	4630      	mov	r0, r6
 800456c:	4652      	mov	r2, sl
 800456e:	465b      	mov	r3, fp
 8004570:	4639      	mov	r1, r7
 8004572:	f7fc fa57 	bl	8000a24 <__aeabi_dcmplt>
 8004576:	2800      	cmp	r0, #0
 8004578:	d056      	beq.n	8004628 <pow+0x2b0>
 800457a:	ec45 4b10 	vmov	d0, r4, r5
 800457e:	f001 fd83 	bl	8006088 <rint>
 8004582:	4622      	mov	r2, r4
 8004584:	462b      	mov	r3, r5
 8004586:	ec51 0b10 	vmov	r0, r1, d0
 800458a:	f7fc fa41 	bl	8000a10 <__aeabi_dcmpeq>
 800458e:	b920      	cbnz	r0, 800459a <pow+0x222>
 8004590:	4b2e      	ldr	r3, [pc, #184]	; (800464c <pow+0x2d4>)
 8004592:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8004596:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800459a:	f998 3000 	ldrsb.w	r3, [r8]
 800459e:	2b02      	cmp	r3, #2
 80045a0:	d142      	bne.n	8004628 <pow+0x2b0>
 80045a2:	f7ff fe6f 	bl	8004284 <__errno>
 80045a6:	2322      	movs	r3, #34	; 0x22
 80045a8:	e78d      	b.n	80044c6 <pow+0x14e>
 80045aa:	4b29      	ldr	r3, [pc, #164]	; (8004650 <pow+0x2d8>)
 80045ac:	2200      	movs	r2, #0
 80045ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80045b2:	4630      	mov	r0, r6
 80045b4:	4652      	mov	r2, sl
 80045b6:	465b      	mov	r3, fp
 80045b8:	4639      	mov	r1, r7
 80045ba:	f7fc fa33 	bl	8000a24 <__aeabi_dcmplt>
 80045be:	2800      	cmp	r0, #0
 80045c0:	d0eb      	beq.n	800459a <pow+0x222>
 80045c2:	ec45 4b10 	vmov	d0, r4, r5
 80045c6:	f001 fd5f 	bl	8006088 <rint>
 80045ca:	4622      	mov	r2, r4
 80045cc:	462b      	mov	r3, r5
 80045ce:	ec51 0b10 	vmov	r0, r1, d0
 80045d2:	f7fc fa1d 	bl	8000a10 <__aeabi_dcmpeq>
 80045d6:	2800      	cmp	r0, #0
 80045d8:	d1df      	bne.n	800459a <pow+0x222>
 80045da:	2200      	movs	r2, #0
 80045dc:	4b18      	ldr	r3, [pc, #96]	; (8004640 <pow+0x2c8>)
 80045de:	e7da      	b.n	8004596 <pow+0x21e>
 80045e0:	2200      	movs	r2, #0
 80045e2:	2300      	movs	r3, #0
 80045e4:	ec51 0b18 	vmov	r0, r1, d8
 80045e8:	f7fc fa12 	bl	8000a10 <__aeabi_dcmpeq>
 80045ec:	2800      	cmp	r0, #0
 80045ee:	f43f af3a 	beq.w	8004466 <pow+0xee>
 80045f2:	ec47 6b10 	vmov	d0, r6, r7
 80045f6:	f001 fcae 	bl	8005f56 <finite>
 80045fa:	2800      	cmp	r0, #0
 80045fc:	f43f af33 	beq.w	8004466 <pow+0xee>
 8004600:	ec45 4b10 	vmov	d0, r4, r5
 8004604:	f001 fca7 	bl	8005f56 <finite>
 8004608:	2800      	cmp	r0, #0
 800460a:	f43f af2c 	beq.w	8004466 <pow+0xee>
 800460e:	2304      	movs	r3, #4
 8004610:	9302      	str	r3, [sp, #8]
 8004612:	4b09      	ldr	r3, [pc, #36]	; (8004638 <pow+0x2c0>)
 8004614:	9303      	str	r3, [sp, #12]
 8004616:	2300      	movs	r3, #0
 8004618:	930a      	str	r3, [sp, #40]	; 0x28
 800461a:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800461e:	e9cd 4506 	strd	r4, r5, [sp, #24]
 8004622:	ed8d 9b08 	vstr	d9, [sp, #32]
 8004626:	e7b8      	b.n	800459a <pow+0x222>
 8004628:	a802      	add	r0, sp, #8
 800462a:	f001 fd21 	bl	8006070 <matherr>
 800462e:	2800      	cmp	r0, #0
 8004630:	f47f af11 	bne.w	8004456 <pow+0xde>
 8004634:	e7b5      	b.n	80045a2 <pow+0x22a>
 8004636:	bf00      	nop
 8004638:	080062d4 	.word	0x080062d4
 800463c:	3ff00000 	.word	0x3ff00000
 8004640:	fff00000 	.word	0xfff00000
 8004644:	3fe00000 	.word	0x3fe00000
 8004648:	47efffff 	.word	0x47efffff
 800464c:	c7efffff 	.word	0xc7efffff
 8004650:	7ff00000 	.word	0x7ff00000
 8004654:	20000070 	.word	0x20000070

08004658 <__ieee754_pow>:
 8004658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800465c:	b091      	sub	sp, #68	; 0x44
 800465e:	ed8d 1b00 	vstr	d1, [sp]
 8004662:	e9dd 2900 	ldrd	r2, r9, [sp]
 8004666:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800466a:	ea58 0302 	orrs.w	r3, r8, r2
 800466e:	ec57 6b10 	vmov	r6, r7, d0
 8004672:	f000 84be 	beq.w	8004ff2 <__ieee754_pow+0x99a>
 8004676:	4b7a      	ldr	r3, [pc, #488]	; (8004860 <__ieee754_pow+0x208>)
 8004678:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800467c:	429c      	cmp	r4, r3
 800467e:	463d      	mov	r5, r7
 8004680:	ee10 aa10 	vmov	sl, s0
 8004684:	dc09      	bgt.n	800469a <__ieee754_pow+0x42>
 8004686:	d103      	bne.n	8004690 <__ieee754_pow+0x38>
 8004688:	b93e      	cbnz	r6, 800469a <__ieee754_pow+0x42>
 800468a:	45a0      	cmp	r8, r4
 800468c:	dc0d      	bgt.n	80046aa <__ieee754_pow+0x52>
 800468e:	e001      	b.n	8004694 <__ieee754_pow+0x3c>
 8004690:	4598      	cmp	r8, r3
 8004692:	dc02      	bgt.n	800469a <__ieee754_pow+0x42>
 8004694:	4598      	cmp	r8, r3
 8004696:	d10e      	bne.n	80046b6 <__ieee754_pow+0x5e>
 8004698:	b16a      	cbz	r2, 80046b6 <__ieee754_pow+0x5e>
 800469a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800469e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80046a2:	ea54 030a 	orrs.w	r3, r4, sl
 80046a6:	f000 84a4 	beq.w	8004ff2 <__ieee754_pow+0x99a>
 80046aa:	486e      	ldr	r0, [pc, #440]	; (8004864 <__ieee754_pow+0x20c>)
 80046ac:	b011      	add	sp, #68	; 0x44
 80046ae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046b2:	f001 bce1 	b.w	8006078 <nan>
 80046b6:	2d00      	cmp	r5, #0
 80046b8:	da53      	bge.n	8004762 <__ieee754_pow+0x10a>
 80046ba:	4b6b      	ldr	r3, [pc, #428]	; (8004868 <__ieee754_pow+0x210>)
 80046bc:	4598      	cmp	r8, r3
 80046be:	dc4d      	bgt.n	800475c <__ieee754_pow+0x104>
 80046c0:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 80046c4:	4598      	cmp	r8, r3
 80046c6:	dd4c      	ble.n	8004762 <__ieee754_pow+0x10a>
 80046c8:	ea4f 5328 	mov.w	r3, r8, asr #20
 80046cc:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80046d0:	2b14      	cmp	r3, #20
 80046d2:	dd26      	ble.n	8004722 <__ieee754_pow+0xca>
 80046d4:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 80046d8:	fa22 f103 	lsr.w	r1, r2, r3
 80046dc:	fa01 f303 	lsl.w	r3, r1, r3
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d13e      	bne.n	8004762 <__ieee754_pow+0x10a>
 80046e4:	f001 0101 	and.w	r1, r1, #1
 80046e8:	f1c1 0b02 	rsb	fp, r1, #2
 80046ec:	2a00      	cmp	r2, #0
 80046ee:	d15b      	bne.n	80047a8 <__ieee754_pow+0x150>
 80046f0:	4b5b      	ldr	r3, [pc, #364]	; (8004860 <__ieee754_pow+0x208>)
 80046f2:	4598      	cmp	r8, r3
 80046f4:	d124      	bne.n	8004740 <__ieee754_pow+0xe8>
 80046f6:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80046fa:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80046fe:	ea53 030a 	orrs.w	r3, r3, sl
 8004702:	f000 8476 	beq.w	8004ff2 <__ieee754_pow+0x99a>
 8004706:	4b59      	ldr	r3, [pc, #356]	; (800486c <__ieee754_pow+0x214>)
 8004708:	429c      	cmp	r4, r3
 800470a:	dd2d      	ble.n	8004768 <__ieee754_pow+0x110>
 800470c:	f1b9 0f00 	cmp.w	r9, #0
 8004710:	f280 8473 	bge.w	8004ffa <__ieee754_pow+0x9a2>
 8004714:	2000      	movs	r0, #0
 8004716:	2100      	movs	r1, #0
 8004718:	ec41 0b10 	vmov	d0, r0, r1
 800471c:	b011      	add	sp, #68	; 0x44
 800471e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004722:	2a00      	cmp	r2, #0
 8004724:	d13e      	bne.n	80047a4 <__ieee754_pow+0x14c>
 8004726:	f1c3 0314 	rsb	r3, r3, #20
 800472a:	fa48 f103 	asr.w	r1, r8, r3
 800472e:	fa01 f303 	lsl.w	r3, r1, r3
 8004732:	4543      	cmp	r3, r8
 8004734:	f040 8469 	bne.w	800500a <__ieee754_pow+0x9b2>
 8004738:	f001 0101 	and.w	r1, r1, #1
 800473c:	f1c1 0b02 	rsb	fp, r1, #2
 8004740:	4b4b      	ldr	r3, [pc, #300]	; (8004870 <__ieee754_pow+0x218>)
 8004742:	4598      	cmp	r8, r3
 8004744:	d118      	bne.n	8004778 <__ieee754_pow+0x120>
 8004746:	f1b9 0f00 	cmp.w	r9, #0
 800474a:	f280 845a 	bge.w	8005002 <__ieee754_pow+0x9aa>
 800474e:	4948      	ldr	r1, [pc, #288]	; (8004870 <__ieee754_pow+0x218>)
 8004750:	4632      	mov	r2, r6
 8004752:	463b      	mov	r3, r7
 8004754:	2000      	movs	r0, #0
 8004756:	f7fc f81d 	bl	8000794 <__aeabi_ddiv>
 800475a:	e7dd      	b.n	8004718 <__ieee754_pow+0xc0>
 800475c:	f04f 0b02 	mov.w	fp, #2
 8004760:	e7c4      	b.n	80046ec <__ieee754_pow+0x94>
 8004762:	f04f 0b00 	mov.w	fp, #0
 8004766:	e7c1      	b.n	80046ec <__ieee754_pow+0x94>
 8004768:	f1b9 0f00 	cmp.w	r9, #0
 800476c:	dad2      	bge.n	8004714 <__ieee754_pow+0xbc>
 800476e:	e9dd 0300 	ldrd	r0, r3, [sp]
 8004772:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8004776:	e7cf      	b.n	8004718 <__ieee754_pow+0xc0>
 8004778:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800477c:	d106      	bne.n	800478c <__ieee754_pow+0x134>
 800477e:	4632      	mov	r2, r6
 8004780:	463b      	mov	r3, r7
 8004782:	4610      	mov	r0, r2
 8004784:	4619      	mov	r1, r3
 8004786:	f7fb fedb 	bl	8000540 <__aeabi_dmul>
 800478a:	e7c5      	b.n	8004718 <__ieee754_pow+0xc0>
 800478c:	4b39      	ldr	r3, [pc, #228]	; (8004874 <__ieee754_pow+0x21c>)
 800478e:	4599      	cmp	r9, r3
 8004790:	d10a      	bne.n	80047a8 <__ieee754_pow+0x150>
 8004792:	2d00      	cmp	r5, #0
 8004794:	db08      	blt.n	80047a8 <__ieee754_pow+0x150>
 8004796:	ec47 6b10 	vmov	d0, r6, r7
 800479a:	b011      	add	sp, #68	; 0x44
 800479c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80047a0:	f000 be5c 	b.w	800545c <__ieee754_sqrt>
 80047a4:	f04f 0b00 	mov.w	fp, #0
 80047a8:	ec47 6b10 	vmov	d0, r6, r7
 80047ac:	f001 fbca 	bl	8005f44 <fabs>
 80047b0:	ec51 0b10 	vmov	r0, r1, d0
 80047b4:	f1ba 0f00 	cmp.w	sl, #0
 80047b8:	d127      	bne.n	800480a <__ieee754_pow+0x1b2>
 80047ba:	b124      	cbz	r4, 80047c6 <__ieee754_pow+0x16e>
 80047bc:	4b2c      	ldr	r3, [pc, #176]	; (8004870 <__ieee754_pow+0x218>)
 80047be:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 80047c2:	429a      	cmp	r2, r3
 80047c4:	d121      	bne.n	800480a <__ieee754_pow+0x1b2>
 80047c6:	f1b9 0f00 	cmp.w	r9, #0
 80047ca:	da05      	bge.n	80047d8 <__ieee754_pow+0x180>
 80047cc:	4602      	mov	r2, r0
 80047ce:	460b      	mov	r3, r1
 80047d0:	2000      	movs	r0, #0
 80047d2:	4927      	ldr	r1, [pc, #156]	; (8004870 <__ieee754_pow+0x218>)
 80047d4:	f7fb ffde 	bl	8000794 <__aeabi_ddiv>
 80047d8:	2d00      	cmp	r5, #0
 80047da:	da9d      	bge.n	8004718 <__ieee754_pow+0xc0>
 80047dc:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80047e0:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80047e4:	ea54 030b 	orrs.w	r3, r4, fp
 80047e8:	d108      	bne.n	80047fc <__ieee754_pow+0x1a4>
 80047ea:	4602      	mov	r2, r0
 80047ec:	460b      	mov	r3, r1
 80047ee:	4610      	mov	r0, r2
 80047f0:	4619      	mov	r1, r3
 80047f2:	f7fb fced 	bl	80001d0 <__aeabi_dsub>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	e7ac      	b.n	8004756 <__ieee754_pow+0xfe>
 80047fc:	f1bb 0f01 	cmp.w	fp, #1
 8004800:	d18a      	bne.n	8004718 <__ieee754_pow+0xc0>
 8004802:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004806:	4619      	mov	r1, r3
 8004808:	e786      	b.n	8004718 <__ieee754_pow+0xc0>
 800480a:	0fed      	lsrs	r5, r5, #31
 800480c:	1e6b      	subs	r3, r5, #1
 800480e:	930d      	str	r3, [sp, #52]	; 0x34
 8004810:	ea5b 0303 	orrs.w	r3, fp, r3
 8004814:	d102      	bne.n	800481c <__ieee754_pow+0x1c4>
 8004816:	4632      	mov	r2, r6
 8004818:	463b      	mov	r3, r7
 800481a:	e7e8      	b.n	80047ee <__ieee754_pow+0x196>
 800481c:	4b16      	ldr	r3, [pc, #88]	; (8004878 <__ieee754_pow+0x220>)
 800481e:	4598      	cmp	r8, r3
 8004820:	f340 80fe 	ble.w	8004a20 <__ieee754_pow+0x3c8>
 8004824:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004828:	4598      	cmp	r8, r3
 800482a:	dd0a      	ble.n	8004842 <__ieee754_pow+0x1ea>
 800482c:	4b0f      	ldr	r3, [pc, #60]	; (800486c <__ieee754_pow+0x214>)
 800482e:	429c      	cmp	r4, r3
 8004830:	dc0d      	bgt.n	800484e <__ieee754_pow+0x1f6>
 8004832:	f1b9 0f00 	cmp.w	r9, #0
 8004836:	f6bf af6d 	bge.w	8004714 <__ieee754_pow+0xbc>
 800483a:	a307      	add	r3, pc, #28	; (adr r3, 8004858 <__ieee754_pow+0x200>)
 800483c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004840:	e79f      	b.n	8004782 <__ieee754_pow+0x12a>
 8004842:	4b0e      	ldr	r3, [pc, #56]	; (800487c <__ieee754_pow+0x224>)
 8004844:	429c      	cmp	r4, r3
 8004846:	ddf4      	ble.n	8004832 <__ieee754_pow+0x1da>
 8004848:	4b09      	ldr	r3, [pc, #36]	; (8004870 <__ieee754_pow+0x218>)
 800484a:	429c      	cmp	r4, r3
 800484c:	dd18      	ble.n	8004880 <__ieee754_pow+0x228>
 800484e:	f1b9 0f00 	cmp.w	r9, #0
 8004852:	dcf2      	bgt.n	800483a <__ieee754_pow+0x1e2>
 8004854:	e75e      	b.n	8004714 <__ieee754_pow+0xbc>
 8004856:	bf00      	nop
 8004858:	8800759c 	.word	0x8800759c
 800485c:	7e37e43c 	.word	0x7e37e43c
 8004860:	7ff00000 	.word	0x7ff00000
 8004864:	080062d7 	.word	0x080062d7
 8004868:	433fffff 	.word	0x433fffff
 800486c:	3fefffff 	.word	0x3fefffff
 8004870:	3ff00000 	.word	0x3ff00000
 8004874:	3fe00000 	.word	0x3fe00000
 8004878:	41e00000 	.word	0x41e00000
 800487c:	3feffffe 	.word	0x3feffffe
 8004880:	2200      	movs	r2, #0
 8004882:	4b63      	ldr	r3, [pc, #396]	; (8004a10 <__ieee754_pow+0x3b8>)
 8004884:	f7fb fca4 	bl	80001d0 <__aeabi_dsub>
 8004888:	a355      	add	r3, pc, #340	; (adr r3, 80049e0 <__ieee754_pow+0x388>)
 800488a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800488e:	4604      	mov	r4, r0
 8004890:	460d      	mov	r5, r1
 8004892:	f7fb fe55 	bl	8000540 <__aeabi_dmul>
 8004896:	a354      	add	r3, pc, #336	; (adr r3, 80049e8 <__ieee754_pow+0x390>)
 8004898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800489c:	4606      	mov	r6, r0
 800489e:	460f      	mov	r7, r1
 80048a0:	4620      	mov	r0, r4
 80048a2:	4629      	mov	r1, r5
 80048a4:	f7fb fe4c 	bl	8000540 <__aeabi_dmul>
 80048a8:	2200      	movs	r2, #0
 80048aa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80048ae:	4b59      	ldr	r3, [pc, #356]	; (8004a14 <__ieee754_pow+0x3bc>)
 80048b0:	4620      	mov	r0, r4
 80048b2:	4629      	mov	r1, r5
 80048b4:	f7fb fe44 	bl	8000540 <__aeabi_dmul>
 80048b8:	4602      	mov	r2, r0
 80048ba:	460b      	mov	r3, r1
 80048bc:	a14c      	add	r1, pc, #304	; (adr r1, 80049f0 <__ieee754_pow+0x398>)
 80048be:	e9d1 0100 	ldrd	r0, r1, [r1]
 80048c2:	f7fb fc85 	bl	80001d0 <__aeabi_dsub>
 80048c6:	4622      	mov	r2, r4
 80048c8:	462b      	mov	r3, r5
 80048ca:	f7fb fe39 	bl	8000540 <__aeabi_dmul>
 80048ce:	4602      	mov	r2, r0
 80048d0:	460b      	mov	r3, r1
 80048d2:	2000      	movs	r0, #0
 80048d4:	4950      	ldr	r1, [pc, #320]	; (8004a18 <__ieee754_pow+0x3c0>)
 80048d6:	f7fb fc7b 	bl	80001d0 <__aeabi_dsub>
 80048da:	4622      	mov	r2, r4
 80048dc:	462b      	mov	r3, r5
 80048de:	4680      	mov	r8, r0
 80048e0:	4689      	mov	r9, r1
 80048e2:	4620      	mov	r0, r4
 80048e4:	4629      	mov	r1, r5
 80048e6:	f7fb fe2b 	bl	8000540 <__aeabi_dmul>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	4640      	mov	r0, r8
 80048f0:	4649      	mov	r1, r9
 80048f2:	f7fb fe25 	bl	8000540 <__aeabi_dmul>
 80048f6:	a340      	add	r3, pc, #256	; (adr r3, 80049f8 <__ieee754_pow+0x3a0>)
 80048f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fc:	f7fb fe20 	bl	8000540 <__aeabi_dmul>
 8004900:	4602      	mov	r2, r0
 8004902:	460b      	mov	r3, r1
 8004904:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004908:	f7fb fc62 	bl	80001d0 <__aeabi_dsub>
 800490c:	4602      	mov	r2, r0
 800490e:	460b      	mov	r3, r1
 8004910:	4604      	mov	r4, r0
 8004912:	460d      	mov	r5, r1
 8004914:	4630      	mov	r0, r6
 8004916:	4639      	mov	r1, r7
 8004918:	f7fb fc5c 	bl	80001d4 <__adddf3>
 800491c:	2000      	movs	r0, #0
 800491e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004922:	4632      	mov	r2, r6
 8004924:	463b      	mov	r3, r7
 8004926:	f7fb fc53 	bl	80001d0 <__aeabi_dsub>
 800492a:	4602      	mov	r2, r0
 800492c:	460b      	mov	r3, r1
 800492e:	4620      	mov	r0, r4
 8004930:	4629      	mov	r1, r5
 8004932:	f7fb fc4d 	bl	80001d0 <__aeabi_dsub>
 8004936:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004938:	f10b 33ff 	add.w	r3, fp, #4294967295
 800493c:	4313      	orrs	r3, r2
 800493e:	4606      	mov	r6, r0
 8004940:	460f      	mov	r7, r1
 8004942:	f040 81eb 	bne.w	8004d1c <__ieee754_pow+0x6c4>
 8004946:	ed9f 7b2e 	vldr	d7, [pc, #184]	; 8004a00 <__ieee754_pow+0x3a8>
 800494a:	e9dd 4500 	ldrd	r4, r5, [sp]
 800494e:	2400      	movs	r4, #0
 8004950:	4622      	mov	r2, r4
 8004952:	462b      	mov	r3, r5
 8004954:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004958:	ed8d 7b02 	vstr	d7, [sp, #8]
 800495c:	f7fb fc38 	bl	80001d0 <__aeabi_dsub>
 8004960:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004964:	f7fb fdec 	bl	8000540 <__aeabi_dmul>
 8004968:	e9dd 2300 	ldrd	r2, r3, [sp]
 800496c:	4680      	mov	r8, r0
 800496e:	4689      	mov	r9, r1
 8004970:	4630      	mov	r0, r6
 8004972:	4639      	mov	r1, r7
 8004974:	f7fb fde4 	bl	8000540 <__aeabi_dmul>
 8004978:	4602      	mov	r2, r0
 800497a:	460b      	mov	r3, r1
 800497c:	4640      	mov	r0, r8
 800497e:	4649      	mov	r1, r9
 8004980:	f7fb fc28 	bl	80001d4 <__adddf3>
 8004984:	4622      	mov	r2, r4
 8004986:	462b      	mov	r3, r5
 8004988:	4680      	mov	r8, r0
 800498a:	4689      	mov	r9, r1
 800498c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004990:	f7fb fdd6 	bl	8000540 <__aeabi_dmul>
 8004994:	460b      	mov	r3, r1
 8004996:	4604      	mov	r4, r0
 8004998:	460d      	mov	r5, r1
 800499a:	4602      	mov	r2, r0
 800499c:	4649      	mov	r1, r9
 800499e:	4640      	mov	r0, r8
 80049a0:	e9cd 4500 	strd	r4, r5, [sp]
 80049a4:	f7fb fc16 	bl	80001d4 <__adddf3>
 80049a8:	4b1c      	ldr	r3, [pc, #112]	; (8004a1c <__ieee754_pow+0x3c4>)
 80049aa:	4299      	cmp	r1, r3
 80049ac:	4606      	mov	r6, r0
 80049ae:	460f      	mov	r7, r1
 80049b0:	468b      	mov	fp, r1
 80049b2:	f340 82f7 	ble.w	8004fa4 <__ieee754_pow+0x94c>
 80049b6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80049ba:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80049be:	4303      	orrs	r3, r0
 80049c0:	f000 81ea 	beq.w	8004d98 <__ieee754_pow+0x740>
 80049c4:	a310      	add	r3, pc, #64	; (adr r3, 8004a08 <__ieee754_pow+0x3b0>)
 80049c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80049ce:	f7fb fdb7 	bl	8000540 <__aeabi_dmul>
 80049d2:	a30d      	add	r3, pc, #52	; (adr r3, 8004a08 <__ieee754_pow+0x3b0>)
 80049d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049d8:	e6d5      	b.n	8004786 <__ieee754_pow+0x12e>
 80049da:	bf00      	nop
 80049dc:	f3af 8000 	nop.w
 80049e0:	60000000 	.word	0x60000000
 80049e4:	3ff71547 	.word	0x3ff71547
 80049e8:	f85ddf44 	.word	0xf85ddf44
 80049ec:	3e54ae0b 	.word	0x3e54ae0b
 80049f0:	55555555 	.word	0x55555555
 80049f4:	3fd55555 	.word	0x3fd55555
 80049f8:	652b82fe 	.word	0x652b82fe
 80049fc:	3ff71547 	.word	0x3ff71547
 8004a00:	00000000 	.word	0x00000000
 8004a04:	bff00000 	.word	0xbff00000
 8004a08:	8800759c 	.word	0x8800759c
 8004a0c:	7e37e43c 	.word	0x7e37e43c
 8004a10:	3ff00000 	.word	0x3ff00000
 8004a14:	3fd00000 	.word	0x3fd00000
 8004a18:	3fe00000 	.word	0x3fe00000
 8004a1c:	408fffff 	.word	0x408fffff
 8004a20:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	da05      	bge.n	8004a36 <__ieee754_pow+0x3de>
 8004a2a:	4bd3      	ldr	r3, [pc, #844]	; (8004d78 <__ieee754_pow+0x720>)
 8004a2c:	f7fb fd88 	bl	8000540 <__aeabi_dmul>
 8004a30:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8004a34:	460c      	mov	r4, r1
 8004a36:	1523      	asrs	r3, r4, #20
 8004a38:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004a3c:	4413      	add	r3, r2
 8004a3e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a40:	4bce      	ldr	r3, [pc, #824]	; (8004d7c <__ieee754_pow+0x724>)
 8004a42:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8004a46:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8004a4a:	429c      	cmp	r4, r3
 8004a4c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8004a50:	dd08      	ble.n	8004a64 <__ieee754_pow+0x40c>
 8004a52:	4bcb      	ldr	r3, [pc, #812]	; (8004d80 <__ieee754_pow+0x728>)
 8004a54:	429c      	cmp	r4, r3
 8004a56:	f340 815e 	ble.w	8004d16 <__ieee754_pow+0x6be>
 8004a5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004a5c:	3301      	adds	r3, #1
 8004a5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004a60:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8004a64:	f04f 0a00 	mov.w	sl, #0
 8004a68:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8004a6c:	930c      	str	r3, [sp, #48]	; 0x30
 8004a6e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004a70:	4bc4      	ldr	r3, [pc, #784]	; (8004d84 <__ieee754_pow+0x72c>)
 8004a72:	4413      	add	r3, r2
 8004a74:	ed93 7b00 	vldr	d7, [r3]
 8004a78:	4629      	mov	r1, r5
 8004a7a:	ec53 2b17 	vmov	r2, r3, d7
 8004a7e:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004a82:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004a86:	f7fb fba3 	bl	80001d0 <__aeabi_dsub>
 8004a8a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004a8e:	4606      	mov	r6, r0
 8004a90:	460f      	mov	r7, r1
 8004a92:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004a96:	f7fb fb9d 	bl	80001d4 <__adddf3>
 8004a9a:	4602      	mov	r2, r0
 8004a9c:	460b      	mov	r3, r1
 8004a9e:	2000      	movs	r0, #0
 8004aa0:	49b9      	ldr	r1, [pc, #740]	; (8004d88 <__ieee754_pow+0x730>)
 8004aa2:	f7fb fe77 	bl	8000794 <__aeabi_ddiv>
 8004aa6:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8004aaa:	4602      	mov	r2, r0
 8004aac:	460b      	mov	r3, r1
 8004aae:	4630      	mov	r0, r6
 8004ab0:	4639      	mov	r1, r7
 8004ab2:	f7fb fd45 	bl	8000540 <__aeabi_dmul>
 8004ab6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004aba:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004abe:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8004ac2:	2300      	movs	r3, #0
 8004ac4:	9302      	str	r3, [sp, #8]
 8004ac6:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 8004aca:	106d      	asrs	r5, r5, #1
 8004acc:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8004ad0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8004ad4:	2200      	movs	r2, #0
 8004ad6:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 8004ada:	4640      	mov	r0, r8
 8004adc:	4649      	mov	r1, r9
 8004ade:	4614      	mov	r4, r2
 8004ae0:	461d      	mov	r5, r3
 8004ae2:	f7fb fd2d 	bl	8000540 <__aeabi_dmul>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4630      	mov	r0, r6
 8004aec:	4639      	mov	r1, r7
 8004aee:	f7fb fb6f 	bl	80001d0 <__aeabi_dsub>
 8004af2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004af6:	4606      	mov	r6, r0
 8004af8:	460f      	mov	r7, r1
 8004afa:	4620      	mov	r0, r4
 8004afc:	4629      	mov	r1, r5
 8004afe:	f7fb fb67 	bl	80001d0 <__aeabi_dsub>
 8004b02:	4602      	mov	r2, r0
 8004b04:	460b      	mov	r3, r1
 8004b06:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8004b0a:	f7fb fb61 	bl	80001d0 <__aeabi_dsub>
 8004b0e:	4642      	mov	r2, r8
 8004b10:	464b      	mov	r3, r9
 8004b12:	f7fb fd15 	bl	8000540 <__aeabi_dmul>
 8004b16:	4602      	mov	r2, r0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4630      	mov	r0, r6
 8004b1c:	4639      	mov	r1, r7
 8004b1e:	f7fb fb57 	bl	80001d0 <__aeabi_dsub>
 8004b22:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8004b26:	f7fb fd0b 	bl	8000540 <__aeabi_dmul>
 8004b2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b2e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004b32:	4610      	mov	r0, r2
 8004b34:	4619      	mov	r1, r3
 8004b36:	f7fb fd03 	bl	8000540 <__aeabi_dmul>
 8004b3a:	a37b      	add	r3, pc, #492	; (adr r3, 8004d28 <__ieee754_pow+0x6d0>)
 8004b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b40:	4604      	mov	r4, r0
 8004b42:	460d      	mov	r5, r1
 8004b44:	f7fb fcfc 	bl	8000540 <__aeabi_dmul>
 8004b48:	a379      	add	r3, pc, #484	; (adr r3, 8004d30 <__ieee754_pow+0x6d8>)
 8004b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b4e:	f7fb fb41 	bl	80001d4 <__adddf3>
 8004b52:	4622      	mov	r2, r4
 8004b54:	462b      	mov	r3, r5
 8004b56:	f7fb fcf3 	bl	8000540 <__aeabi_dmul>
 8004b5a:	a377      	add	r3, pc, #476	; (adr r3, 8004d38 <__ieee754_pow+0x6e0>)
 8004b5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b60:	f7fb fb38 	bl	80001d4 <__adddf3>
 8004b64:	4622      	mov	r2, r4
 8004b66:	462b      	mov	r3, r5
 8004b68:	f7fb fcea 	bl	8000540 <__aeabi_dmul>
 8004b6c:	a374      	add	r3, pc, #464	; (adr r3, 8004d40 <__ieee754_pow+0x6e8>)
 8004b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b72:	f7fb fb2f 	bl	80001d4 <__adddf3>
 8004b76:	4622      	mov	r2, r4
 8004b78:	462b      	mov	r3, r5
 8004b7a:	f7fb fce1 	bl	8000540 <__aeabi_dmul>
 8004b7e:	a372      	add	r3, pc, #456	; (adr r3, 8004d48 <__ieee754_pow+0x6f0>)
 8004b80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b84:	f7fb fb26 	bl	80001d4 <__adddf3>
 8004b88:	4622      	mov	r2, r4
 8004b8a:	462b      	mov	r3, r5
 8004b8c:	f7fb fcd8 	bl	8000540 <__aeabi_dmul>
 8004b90:	a36f      	add	r3, pc, #444	; (adr r3, 8004d50 <__ieee754_pow+0x6f8>)
 8004b92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b96:	f7fb fb1d 	bl	80001d4 <__adddf3>
 8004b9a:	4622      	mov	r2, r4
 8004b9c:	4606      	mov	r6, r0
 8004b9e:	460f      	mov	r7, r1
 8004ba0:	462b      	mov	r3, r5
 8004ba2:	4620      	mov	r0, r4
 8004ba4:	4629      	mov	r1, r5
 8004ba6:	f7fb fccb 	bl	8000540 <__aeabi_dmul>
 8004baa:	4602      	mov	r2, r0
 8004bac:	460b      	mov	r3, r1
 8004bae:	4630      	mov	r0, r6
 8004bb0:	4639      	mov	r1, r7
 8004bb2:	f7fb fcc5 	bl	8000540 <__aeabi_dmul>
 8004bb6:	4642      	mov	r2, r8
 8004bb8:	4604      	mov	r4, r0
 8004bba:	460d      	mov	r5, r1
 8004bbc:	464b      	mov	r3, r9
 8004bbe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004bc2:	f7fb fb07 	bl	80001d4 <__adddf3>
 8004bc6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004bca:	f7fb fcb9 	bl	8000540 <__aeabi_dmul>
 8004bce:	4622      	mov	r2, r4
 8004bd0:	462b      	mov	r3, r5
 8004bd2:	f7fb faff 	bl	80001d4 <__adddf3>
 8004bd6:	4642      	mov	r2, r8
 8004bd8:	4606      	mov	r6, r0
 8004bda:	460f      	mov	r7, r1
 8004bdc:	464b      	mov	r3, r9
 8004bde:	4640      	mov	r0, r8
 8004be0:	4649      	mov	r1, r9
 8004be2:	f7fb fcad 	bl	8000540 <__aeabi_dmul>
 8004be6:	2200      	movs	r2, #0
 8004be8:	4b68      	ldr	r3, [pc, #416]	; (8004d8c <__ieee754_pow+0x734>)
 8004bea:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8004bee:	f7fb faf1 	bl	80001d4 <__adddf3>
 8004bf2:	4632      	mov	r2, r6
 8004bf4:	463b      	mov	r3, r7
 8004bf6:	f7fb faed 	bl	80001d4 <__adddf3>
 8004bfa:	9802      	ldr	r0, [sp, #8]
 8004bfc:	460d      	mov	r5, r1
 8004bfe:	4604      	mov	r4, r0
 8004c00:	4602      	mov	r2, r0
 8004c02:	460b      	mov	r3, r1
 8004c04:	4640      	mov	r0, r8
 8004c06:	4649      	mov	r1, r9
 8004c08:	f7fb fc9a 	bl	8000540 <__aeabi_dmul>
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	4680      	mov	r8, r0
 8004c10:	4689      	mov	r9, r1
 8004c12:	4b5e      	ldr	r3, [pc, #376]	; (8004d8c <__ieee754_pow+0x734>)
 8004c14:	4620      	mov	r0, r4
 8004c16:	4629      	mov	r1, r5
 8004c18:	f7fb fada 	bl	80001d0 <__aeabi_dsub>
 8004c1c:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	; 0x28
 8004c20:	f7fb fad6 	bl	80001d0 <__aeabi_dsub>
 8004c24:	4602      	mov	r2, r0
 8004c26:	460b      	mov	r3, r1
 8004c28:	4630      	mov	r0, r6
 8004c2a:	4639      	mov	r1, r7
 8004c2c:	f7fb fad0 	bl	80001d0 <__aeabi_dsub>
 8004c30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c34:	f7fb fc84 	bl	8000540 <__aeabi_dmul>
 8004c38:	4622      	mov	r2, r4
 8004c3a:	4606      	mov	r6, r0
 8004c3c:	460f      	mov	r7, r1
 8004c3e:	462b      	mov	r3, r5
 8004c40:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004c44:	f7fb fc7c 	bl	8000540 <__aeabi_dmul>
 8004c48:	4602      	mov	r2, r0
 8004c4a:	460b      	mov	r3, r1
 8004c4c:	4630      	mov	r0, r6
 8004c4e:	4639      	mov	r1, r7
 8004c50:	f7fb fac0 	bl	80001d4 <__adddf3>
 8004c54:	4606      	mov	r6, r0
 8004c56:	460f      	mov	r7, r1
 8004c58:	4602      	mov	r2, r0
 8004c5a:	460b      	mov	r3, r1
 8004c5c:	4640      	mov	r0, r8
 8004c5e:	4649      	mov	r1, r9
 8004c60:	f7fb fab8 	bl	80001d4 <__adddf3>
 8004c64:	9802      	ldr	r0, [sp, #8]
 8004c66:	a33c      	add	r3, pc, #240	; (adr r3, 8004d58 <__ieee754_pow+0x700>)
 8004c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c6c:	4604      	mov	r4, r0
 8004c6e:	460d      	mov	r5, r1
 8004c70:	f7fb fc66 	bl	8000540 <__aeabi_dmul>
 8004c74:	4642      	mov	r2, r8
 8004c76:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8004c7a:	464b      	mov	r3, r9
 8004c7c:	4620      	mov	r0, r4
 8004c7e:	4629      	mov	r1, r5
 8004c80:	f7fb faa6 	bl	80001d0 <__aeabi_dsub>
 8004c84:	4602      	mov	r2, r0
 8004c86:	460b      	mov	r3, r1
 8004c88:	4630      	mov	r0, r6
 8004c8a:	4639      	mov	r1, r7
 8004c8c:	f7fb faa0 	bl	80001d0 <__aeabi_dsub>
 8004c90:	a333      	add	r3, pc, #204	; (adr r3, 8004d60 <__ieee754_pow+0x708>)
 8004c92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c96:	f7fb fc53 	bl	8000540 <__aeabi_dmul>
 8004c9a:	a333      	add	r3, pc, #204	; (adr r3, 8004d68 <__ieee754_pow+0x710>)
 8004c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ca0:	4606      	mov	r6, r0
 8004ca2:	460f      	mov	r7, r1
 8004ca4:	4620      	mov	r0, r4
 8004ca6:	4629      	mov	r1, r5
 8004ca8:	f7fb fc4a 	bl	8000540 <__aeabi_dmul>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4630      	mov	r0, r6
 8004cb2:	4639      	mov	r1, r7
 8004cb4:	f7fb fa8e 	bl	80001d4 <__adddf3>
 8004cb8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cba:	4b35      	ldr	r3, [pc, #212]	; (8004d90 <__ieee754_pow+0x738>)
 8004cbc:	4413      	add	r3, r2
 8004cbe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc2:	f7fb fa87 	bl	80001d4 <__adddf3>
 8004cc6:	4604      	mov	r4, r0
 8004cc8:	9809      	ldr	r0, [sp, #36]	; 0x24
 8004cca:	460d      	mov	r5, r1
 8004ccc:	f7fb fbce 	bl	800046c <__aeabi_i2d>
 8004cd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8004cd2:	4b30      	ldr	r3, [pc, #192]	; (8004d94 <__ieee754_pow+0x73c>)
 8004cd4:	4413      	add	r3, r2
 8004cd6:	e9d3 8900 	ldrd	r8, r9, [r3]
 8004cda:	4606      	mov	r6, r0
 8004cdc:	460f      	mov	r7, r1
 8004cde:	4622      	mov	r2, r4
 8004ce0:	462b      	mov	r3, r5
 8004ce2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8004ce6:	f7fb fa75 	bl	80001d4 <__adddf3>
 8004cea:	4642      	mov	r2, r8
 8004cec:	464b      	mov	r3, r9
 8004cee:	f7fb fa71 	bl	80001d4 <__adddf3>
 8004cf2:	4632      	mov	r2, r6
 8004cf4:	463b      	mov	r3, r7
 8004cf6:	f7fb fa6d 	bl	80001d4 <__adddf3>
 8004cfa:	9802      	ldr	r0, [sp, #8]
 8004cfc:	4632      	mov	r2, r6
 8004cfe:	463b      	mov	r3, r7
 8004d00:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d04:	f7fb fa64 	bl	80001d0 <__aeabi_dsub>
 8004d08:	4642      	mov	r2, r8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	f7fb fa60 	bl	80001d0 <__aeabi_dsub>
 8004d10:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8004d14:	e607      	b.n	8004926 <__ieee754_pow+0x2ce>
 8004d16:	f04f 0a01 	mov.w	sl, #1
 8004d1a:	e6a5      	b.n	8004a68 <__ieee754_pow+0x410>
 8004d1c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8004d70 <__ieee754_pow+0x718>
 8004d20:	e613      	b.n	800494a <__ieee754_pow+0x2f2>
 8004d22:	bf00      	nop
 8004d24:	f3af 8000 	nop.w
 8004d28:	4a454eef 	.word	0x4a454eef
 8004d2c:	3fca7e28 	.word	0x3fca7e28
 8004d30:	93c9db65 	.word	0x93c9db65
 8004d34:	3fcd864a 	.word	0x3fcd864a
 8004d38:	a91d4101 	.word	0xa91d4101
 8004d3c:	3fd17460 	.word	0x3fd17460
 8004d40:	518f264d 	.word	0x518f264d
 8004d44:	3fd55555 	.word	0x3fd55555
 8004d48:	db6fabff 	.word	0xdb6fabff
 8004d4c:	3fdb6db6 	.word	0x3fdb6db6
 8004d50:	33333303 	.word	0x33333303
 8004d54:	3fe33333 	.word	0x3fe33333
 8004d58:	e0000000 	.word	0xe0000000
 8004d5c:	3feec709 	.word	0x3feec709
 8004d60:	dc3a03fd 	.word	0xdc3a03fd
 8004d64:	3feec709 	.word	0x3feec709
 8004d68:	145b01f5 	.word	0x145b01f5
 8004d6c:	be3e2fe0 	.word	0xbe3e2fe0
 8004d70:	00000000 	.word	0x00000000
 8004d74:	3ff00000 	.word	0x3ff00000
 8004d78:	43400000 	.word	0x43400000
 8004d7c:	0003988e 	.word	0x0003988e
 8004d80:	000bb679 	.word	0x000bb679
 8004d84:	080062d8 	.word	0x080062d8
 8004d88:	3ff00000 	.word	0x3ff00000
 8004d8c:	40080000 	.word	0x40080000
 8004d90:	080062f8 	.word	0x080062f8
 8004d94:	080062e8 	.word	0x080062e8
 8004d98:	a3b4      	add	r3, pc, #720	; (adr r3, 800506c <__ieee754_pow+0xa14>)
 8004d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d9e:	4640      	mov	r0, r8
 8004da0:	4649      	mov	r1, r9
 8004da2:	f7fb fa17 	bl	80001d4 <__adddf3>
 8004da6:	4622      	mov	r2, r4
 8004da8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004dac:	462b      	mov	r3, r5
 8004dae:	4630      	mov	r0, r6
 8004db0:	4639      	mov	r1, r7
 8004db2:	f7fb fa0d 	bl	80001d0 <__aeabi_dsub>
 8004db6:	4602      	mov	r2, r0
 8004db8:	460b      	mov	r3, r1
 8004dba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004dbe:	f7fb fe4f 	bl	8000a60 <__aeabi_dcmpgt>
 8004dc2:	2800      	cmp	r0, #0
 8004dc4:	f47f adfe 	bne.w	80049c4 <__ieee754_pow+0x36c>
 8004dc8:	4aa3      	ldr	r2, [pc, #652]	; (8005058 <__ieee754_pow+0xa00>)
 8004dca:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8004dce:	4293      	cmp	r3, r2
 8004dd0:	f340 810a 	ble.w	8004fe8 <__ieee754_pow+0x990>
 8004dd4:	151b      	asrs	r3, r3, #20
 8004dd6:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8004dda:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8004dde:	fa4a f303 	asr.w	r3, sl, r3
 8004de2:	445b      	add	r3, fp
 8004de4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8004de8:	4e9c      	ldr	r6, [pc, #624]	; (800505c <__ieee754_pow+0xa04>)
 8004dea:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8004dee:	4116      	asrs	r6, r2
 8004df0:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8004df4:	2000      	movs	r0, #0
 8004df6:	ea23 0106 	bic.w	r1, r3, r6
 8004dfa:	f1c2 0214 	rsb	r2, r2, #20
 8004dfe:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8004e02:	fa4a fa02 	asr.w	sl, sl, r2
 8004e06:	f1bb 0f00 	cmp.w	fp, #0
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	460b      	mov	r3, r1
 8004e0e:	4620      	mov	r0, r4
 8004e10:	4629      	mov	r1, r5
 8004e12:	bfb8      	it	lt
 8004e14:	f1ca 0a00 	rsblt	sl, sl, #0
 8004e18:	f7fb f9da 	bl	80001d0 <__aeabi_dsub>
 8004e1c:	e9cd 0100 	strd	r0, r1, [sp]
 8004e20:	4642      	mov	r2, r8
 8004e22:	464b      	mov	r3, r9
 8004e24:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004e28:	f7fb f9d4 	bl	80001d4 <__adddf3>
 8004e2c:	2000      	movs	r0, #0
 8004e2e:	a378      	add	r3, pc, #480	; (adr r3, 8005010 <__ieee754_pow+0x9b8>)
 8004e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e34:	4604      	mov	r4, r0
 8004e36:	460d      	mov	r5, r1
 8004e38:	f7fb fb82 	bl	8000540 <__aeabi_dmul>
 8004e3c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e40:	4606      	mov	r6, r0
 8004e42:	460f      	mov	r7, r1
 8004e44:	4620      	mov	r0, r4
 8004e46:	4629      	mov	r1, r5
 8004e48:	f7fb f9c2 	bl	80001d0 <__aeabi_dsub>
 8004e4c:	4602      	mov	r2, r0
 8004e4e:	460b      	mov	r3, r1
 8004e50:	4640      	mov	r0, r8
 8004e52:	4649      	mov	r1, r9
 8004e54:	f7fb f9bc 	bl	80001d0 <__aeabi_dsub>
 8004e58:	a36f      	add	r3, pc, #444	; (adr r3, 8005018 <__ieee754_pow+0x9c0>)
 8004e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5e:	f7fb fb6f 	bl	8000540 <__aeabi_dmul>
 8004e62:	a36f      	add	r3, pc, #444	; (adr r3, 8005020 <__ieee754_pow+0x9c8>)
 8004e64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e68:	4680      	mov	r8, r0
 8004e6a:	4689      	mov	r9, r1
 8004e6c:	4620      	mov	r0, r4
 8004e6e:	4629      	mov	r1, r5
 8004e70:	f7fb fb66 	bl	8000540 <__aeabi_dmul>
 8004e74:	4602      	mov	r2, r0
 8004e76:	460b      	mov	r3, r1
 8004e78:	4640      	mov	r0, r8
 8004e7a:	4649      	mov	r1, r9
 8004e7c:	f7fb f9aa 	bl	80001d4 <__adddf3>
 8004e80:	4604      	mov	r4, r0
 8004e82:	460d      	mov	r5, r1
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4630      	mov	r0, r6
 8004e8a:	4639      	mov	r1, r7
 8004e8c:	f7fb f9a2 	bl	80001d4 <__adddf3>
 8004e90:	4632      	mov	r2, r6
 8004e92:	463b      	mov	r3, r7
 8004e94:	4680      	mov	r8, r0
 8004e96:	4689      	mov	r9, r1
 8004e98:	f7fb f99a 	bl	80001d0 <__aeabi_dsub>
 8004e9c:	4602      	mov	r2, r0
 8004e9e:	460b      	mov	r3, r1
 8004ea0:	4620      	mov	r0, r4
 8004ea2:	4629      	mov	r1, r5
 8004ea4:	f7fb f994 	bl	80001d0 <__aeabi_dsub>
 8004ea8:	4642      	mov	r2, r8
 8004eaa:	4606      	mov	r6, r0
 8004eac:	460f      	mov	r7, r1
 8004eae:	464b      	mov	r3, r9
 8004eb0:	4640      	mov	r0, r8
 8004eb2:	4649      	mov	r1, r9
 8004eb4:	f7fb fb44 	bl	8000540 <__aeabi_dmul>
 8004eb8:	a35b      	add	r3, pc, #364	; (adr r3, 8005028 <__ieee754_pow+0x9d0>)
 8004eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ebe:	4604      	mov	r4, r0
 8004ec0:	460d      	mov	r5, r1
 8004ec2:	f7fb fb3d 	bl	8000540 <__aeabi_dmul>
 8004ec6:	a35a      	add	r3, pc, #360	; (adr r3, 8005030 <__ieee754_pow+0x9d8>)
 8004ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ecc:	f7fb f980 	bl	80001d0 <__aeabi_dsub>
 8004ed0:	4622      	mov	r2, r4
 8004ed2:	462b      	mov	r3, r5
 8004ed4:	f7fb fb34 	bl	8000540 <__aeabi_dmul>
 8004ed8:	a357      	add	r3, pc, #348	; (adr r3, 8005038 <__ieee754_pow+0x9e0>)
 8004eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ede:	f7fb f979 	bl	80001d4 <__adddf3>
 8004ee2:	4622      	mov	r2, r4
 8004ee4:	462b      	mov	r3, r5
 8004ee6:	f7fb fb2b 	bl	8000540 <__aeabi_dmul>
 8004eea:	a355      	add	r3, pc, #340	; (adr r3, 8005040 <__ieee754_pow+0x9e8>)
 8004eec:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ef0:	f7fb f96e 	bl	80001d0 <__aeabi_dsub>
 8004ef4:	4622      	mov	r2, r4
 8004ef6:	462b      	mov	r3, r5
 8004ef8:	f7fb fb22 	bl	8000540 <__aeabi_dmul>
 8004efc:	a352      	add	r3, pc, #328	; (adr r3, 8005048 <__ieee754_pow+0x9f0>)
 8004efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f02:	f7fb f967 	bl	80001d4 <__adddf3>
 8004f06:	4622      	mov	r2, r4
 8004f08:	462b      	mov	r3, r5
 8004f0a:	f7fb fb19 	bl	8000540 <__aeabi_dmul>
 8004f0e:	4602      	mov	r2, r0
 8004f10:	460b      	mov	r3, r1
 8004f12:	4640      	mov	r0, r8
 8004f14:	4649      	mov	r1, r9
 8004f16:	f7fb f95b 	bl	80001d0 <__aeabi_dsub>
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	460d      	mov	r5, r1
 8004f1e:	4602      	mov	r2, r0
 8004f20:	460b      	mov	r3, r1
 8004f22:	4640      	mov	r0, r8
 8004f24:	4649      	mov	r1, r9
 8004f26:	f7fb fb0b 	bl	8000540 <__aeabi_dmul>
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	e9cd 0100 	strd	r0, r1, [sp]
 8004f30:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004f34:	4620      	mov	r0, r4
 8004f36:	4629      	mov	r1, r5
 8004f38:	f7fb f94a 	bl	80001d0 <__aeabi_dsub>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f44:	f7fb fc26 	bl	8000794 <__aeabi_ddiv>
 8004f48:	4632      	mov	r2, r6
 8004f4a:	4604      	mov	r4, r0
 8004f4c:	460d      	mov	r5, r1
 8004f4e:	463b      	mov	r3, r7
 8004f50:	4640      	mov	r0, r8
 8004f52:	4649      	mov	r1, r9
 8004f54:	f7fb faf4 	bl	8000540 <__aeabi_dmul>
 8004f58:	4632      	mov	r2, r6
 8004f5a:	463b      	mov	r3, r7
 8004f5c:	f7fb f93a 	bl	80001d4 <__adddf3>
 8004f60:	4602      	mov	r2, r0
 8004f62:	460b      	mov	r3, r1
 8004f64:	4620      	mov	r0, r4
 8004f66:	4629      	mov	r1, r5
 8004f68:	f7fb f932 	bl	80001d0 <__aeabi_dsub>
 8004f6c:	4642      	mov	r2, r8
 8004f6e:	464b      	mov	r3, r9
 8004f70:	f7fb f92e 	bl	80001d0 <__aeabi_dsub>
 8004f74:	4602      	mov	r2, r0
 8004f76:	460b      	mov	r3, r1
 8004f78:	2000      	movs	r0, #0
 8004f7a:	4939      	ldr	r1, [pc, #228]	; (8005060 <__ieee754_pow+0xa08>)
 8004f7c:	f7fb f928 	bl	80001d0 <__aeabi_dsub>
 8004f80:	eb01 540a 	add.w	r4, r1, sl, lsl #20
 8004f84:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	da2f      	bge.n	8004fee <__ieee754_pow+0x996>
 8004f8e:	4650      	mov	r0, sl
 8004f90:	ec43 2b10 	vmov	d0, r2, r3
 8004f94:	f001 f8fc 	bl	8006190 <scalbn>
 8004f98:	ec51 0b10 	vmov	r0, r1, d0
 8004f9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004fa0:	f7ff bbf1 	b.w	8004786 <__ieee754_pow+0x12e>
 8004fa4:	4b2f      	ldr	r3, [pc, #188]	; (8005064 <__ieee754_pow+0xa0c>)
 8004fa6:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8004faa:	429e      	cmp	r6, r3
 8004fac:	f77f af0c 	ble.w	8004dc8 <__ieee754_pow+0x770>
 8004fb0:	4b2d      	ldr	r3, [pc, #180]	; (8005068 <__ieee754_pow+0xa10>)
 8004fb2:	440b      	add	r3, r1
 8004fb4:	4303      	orrs	r3, r0
 8004fb6:	d00b      	beq.n	8004fd0 <__ieee754_pow+0x978>
 8004fb8:	a325      	add	r3, pc, #148	; (adr r3, 8005050 <__ieee754_pow+0x9f8>)
 8004fba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fbe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004fc2:	f7fb fabd 	bl	8000540 <__aeabi_dmul>
 8004fc6:	a322      	add	r3, pc, #136	; (adr r3, 8005050 <__ieee754_pow+0x9f8>)
 8004fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fcc:	f7ff bbdb 	b.w	8004786 <__ieee754_pow+0x12e>
 8004fd0:	4622      	mov	r2, r4
 8004fd2:	462b      	mov	r3, r5
 8004fd4:	f7fb f8fc 	bl	80001d0 <__aeabi_dsub>
 8004fd8:	4642      	mov	r2, r8
 8004fda:	464b      	mov	r3, r9
 8004fdc:	f7fb fd36 	bl	8000a4c <__aeabi_dcmpge>
 8004fe0:	2800      	cmp	r0, #0
 8004fe2:	f43f aef1 	beq.w	8004dc8 <__ieee754_pow+0x770>
 8004fe6:	e7e7      	b.n	8004fb8 <__ieee754_pow+0x960>
 8004fe8:	f04f 0a00 	mov.w	sl, #0
 8004fec:	e718      	b.n	8004e20 <__ieee754_pow+0x7c8>
 8004fee:	4621      	mov	r1, r4
 8004ff0:	e7d4      	b.n	8004f9c <__ieee754_pow+0x944>
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	491a      	ldr	r1, [pc, #104]	; (8005060 <__ieee754_pow+0xa08>)
 8004ff6:	f7ff bb8f 	b.w	8004718 <__ieee754_pow+0xc0>
 8004ffa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004ffe:	f7ff bb8b 	b.w	8004718 <__ieee754_pow+0xc0>
 8005002:	4630      	mov	r0, r6
 8005004:	4639      	mov	r1, r7
 8005006:	f7ff bb87 	b.w	8004718 <__ieee754_pow+0xc0>
 800500a:	4693      	mov	fp, r2
 800500c:	f7ff bb98 	b.w	8004740 <__ieee754_pow+0xe8>
 8005010:	00000000 	.word	0x00000000
 8005014:	3fe62e43 	.word	0x3fe62e43
 8005018:	fefa39ef 	.word	0xfefa39ef
 800501c:	3fe62e42 	.word	0x3fe62e42
 8005020:	0ca86c39 	.word	0x0ca86c39
 8005024:	be205c61 	.word	0xbe205c61
 8005028:	72bea4d0 	.word	0x72bea4d0
 800502c:	3e663769 	.word	0x3e663769
 8005030:	c5d26bf1 	.word	0xc5d26bf1
 8005034:	3ebbbd41 	.word	0x3ebbbd41
 8005038:	af25de2c 	.word	0xaf25de2c
 800503c:	3f11566a 	.word	0x3f11566a
 8005040:	16bebd93 	.word	0x16bebd93
 8005044:	3f66c16c 	.word	0x3f66c16c
 8005048:	5555553e 	.word	0x5555553e
 800504c:	3fc55555 	.word	0x3fc55555
 8005050:	c2f8f359 	.word	0xc2f8f359
 8005054:	01a56e1f 	.word	0x01a56e1f
 8005058:	3fe00000 	.word	0x3fe00000
 800505c:	000fffff 	.word	0x000fffff
 8005060:	3ff00000 	.word	0x3ff00000
 8005064:	4090cbff 	.word	0x4090cbff
 8005068:	3f6f3400 	.word	0x3f6f3400
 800506c:	652b82fe 	.word	0x652b82fe
 8005070:	3c971547 	.word	0x3c971547
 8005074:	00000000 	.word	0x00000000

08005078 <__ieee754_rem_pio2>:
 8005078:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800507c:	ec57 6b10 	vmov	r6, r7, d0
 8005080:	4bc3      	ldr	r3, [pc, #780]	; (8005390 <__ieee754_rem_pio2+0x318>)
 8005082:	b08d      	sub	sp, #52	; 0x34
 8005084:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 8005088:	4598      	cmp	r8, r3
 800508a:	4604      	mov	r4, r0
 800508c:	9704      	str	r7, [sp, #16]
 800508e:	dc07      	bgt.n	80050a0 <__ieee754_rem_pio2+0x28>
 8005090:	2200      	movs	r2, #0
 8005092:	2300      	movs	r3, #0
 8005094:	ed84 0b00 	vstr	d0, [r4]
 8005098:	e9c0 2302 	strd	r2, r3, [r0, #8]
 800509c:	2500      	movs	r5, #0
 800509e:	e027      	b.n	80050f0 <__ieee754_rem_pio2+0x78>
 80050a0:	4bbc      	ldr	r3, [pc, #752]	; (8005394 <__ieee754_rem_pio2+0x31c>)
 80050a2:	4598      	cmp	r8, r3
 80050a4:	dc75      	bgt.n	8005192 <__ieee754_rem_pio2+0x11a>
 80050a6:	9b04      	ldr	r3, [sp, #16]
 80050a8:	4dbb      	ldr	r5, [pc, #748]	; (8005398 <__ieee754_rem_pio2+0x320>)
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	ee10 0a10 	vmov	r0, s0
 80050b0:	a3a9      	add	r3, pc, #676	; (adr r3, 8005358 <__ieee754_rem_pio2+0x2e0>)
 80050b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b6:	4639      	mov	r1, r7
 80050b8:	dd36      	ble.n	8005128 <__ieee754_rem_pio2+0xb0>
 80050ba:	f7fb f889 	bl	80001d0 <__aeabi_dsub>
 80050be:	45a8      	cmp	r8, r5
 80050c0:	4606      	mov	r6, r0
 80050c2:	460f      	mov	r7, r1
 80050c4:	d018      	beq.n	80050f8 <__ieee754_rem_pio2+0x80>
 80050c6:	a3a6      	add	r3, pc, #664	; (adr r3, 8005360 <__ieee754_rem_pio2+0x2e8>)
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	f7fb f880 	bl	80001d0 <__aeabi_dsub>
 80050d0:	4602      	mov	r2, r0
 80050d2:	460b      	mov	r3, r1
 80050d4:	e9c4 2300 	strd	r2, r3, [r4]
 80050d8:	4630      	mov	r0, r6
 80050da:	4639      	mov	r1, r7
 80050dc:	f7fb f878 	bl	80001d0 <__aeabi_dsub>
 80050e0:	a39f      	add	r3, pc, #636	; (adr r3, 8005360 <__ieee754_rem_pio2+0x2e8>)
 80050e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e6:	f7fb f873 	bl	80001d0 <__aeabi_dsub>
 80050ea:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80050ee:	2501      	movs	r5, #1
 80050f0:	4628      	mov	r0, r5
 80050f2:	b00d      	add	sp, #52	; 0x34
 80050f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050f8:	a39b      	add	r3, pc, #620	; (adr r3, 8005368 <__ieee754_rem_pio2+0x2f0>)
 80050fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050fe:	f7fb f867 	bl	80001d0 <__aeabi_dsub>
 8005102:	a39b      	add	r3, pc, #620	; (adr r3, 8005370 <__ieee754_rem_pio2+0x2f8>)
 8005104:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005108:	4606      	mov	r6, r0
 800510a:	460f      	mov	r7, r1
 800510c:	f7fb f860 	bl	80001d0 <__aeabi_dsub>
 8005110:	4602      	mov	r2, r0
 8005112:	460b      	mov	r3, r1
 8005114:	e9c4 2300 	strd	r2, r3, [r4]
 8005118:	4630      	mov	r0, r6
 800511a:	4639      	mov	r1, r7
 800511c:	f7fb f858 	bl	80001d0 <__aeabi_dsub>
 8005120:	a393      	add	r3, pc, #588	; (adr r3, 8005370 <__ieee754_rem_pio2+0x2f8>)
 8005122:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005126:	e7de      	b.n	80050e6 <__ieee754_rem_pio2+0x6e>
 8005128:	f7fb f854 	bl	80001d4 <__adddf3>
 800512c:	45a8      	cmp	r8, r5
 800512e:	4606      	mov	r6, r0
 8005130:	460f      	mov	r7, r1
 8005132:	d016      	beq.n	8005162 <__ieee754_rem_pio2+0xea>
 8005134:	a38a      	add	r3, pc, #552	; (adr r3, 8005360 <__ieee754_rem_pio2+0x2e8>)
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	f7fb f84b 	bl	80001d4 <__adddf3>
 800513e:	4602      	mov	r2, r0
 8005140:	460b      	mov	r3, r1
 8005142:	e9c4 2300 	strd	r2, r3, [r4]
 8005146:	4630      	mov	r0, r6
 8005148:	4639      	mov	r1, r7
 800514a:	f7fb f841 	bl	80001d0 <__aeabi_dsub>
 800514e:	a384      	add	r3, pc, #528	; (adr r3, 8005360 <__ieee754_rem_pio2+0x2e8>)
 8005150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005154:	f7fb f83e 	bl	80001d4 <__adddf3>
 8005158:	f04f 35ff 	mov.w	r5, #4294967295
 800515c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005160:	e7c6      	b.n	80050f0 <__ieee754_rem_pio2+0x78>
 8005162:	a381      	add	r3, pc, #516	; (adr r3, 8005368 <__ieee754_rem_pio2+0x2f0>)
 8005164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005168:	f7fb f834 	bl	80001d4 <__adddf3>
 800516c:	a380      	add	r3, pc, #512	; (adr r3, 8005370 <__ieee754_rem_pio2+0x2f8>)
 800516e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005172:	4606      	mov	r6, r0
 8005174:	460f      	mov	r7, r1
 8005176:	f7fb f82d 	bl	80001d4 <__adddf3>
 800517a:	4602      	mov	r2, r0
 800517c:	460b      	mov	r3, r1
 800517e:	e9c4 2300 	strd	r2, r3, [r4]
 8005182:	4630      	mov	r0, r6
 8005184:	4639      	mov	r1, r7
 8005186:	f7fb f823 	bl	80001d0 <__aeabi_dsub>
 800518a:	a379      	add	r3, pc, #484	; (adr r3, 8005370 <__ieee754_rem_pio2+0x2f8>)
 800518c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005190:	e7e0      	b.n	8005154 <__ieee754_rem_pio2+0xdc>
 8005192:	4b82      	ldr	r3, [pc, #520]	; (800539c <__ieee754_rem_pio2+0x324>)
 8005194:	4598      	cmp	r8, r3
 8005196:	f300 80d0 	bgt.w	800533a <__ieee754_rem_pio2+0x2c2>
 800519a:	f000 fed3 	bl	8005f44 <fabs>
 800519e:	ec57 6b10 	vmov	r6, r7, d0
 80051a2:	ee10 0a10 	vmov	r0, s0
 80051a6:	a374      	add	r3, pc, #464	; (adr r3, 8005378 <__ieee754_rem_pio2+0x300>)
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	4639      	mov	r1, r7
 80051ae:	f7fb f9c7 	bl	8000540 <__aeabi_dmul>
 80051b2:	2200      	movs	r2, #0
 80051b4:	4b7a      	ldr	r3, [pc, #488]	; (80053a0 <__ieee754_rem_pio2+0x328>)
 80051b6:	f7fb f80d 	bl	80001d4 <__adddf3>
 80051ba:	f7fb fc71 	bl	8000aa0 <__aeabi_d2iz>
 80051be:	4605      	mov	r5, r0
 80051c0:	f7fb f954 	bl	800046c <__aeabi_i2d>
 80051c4:	a364      	add	r3, pc, #400	; (adr r3, 8005358 <__ieee754_rem_pio2+0x2e0>)
 80051c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80051ce:	f7fb f9b7 	bl	8000540 <__aeabi_dmul>
 80051d2:	4602      	mov	r2, r0
 80051d4:	460b      	mov	r3, r1
 80051d6:	4630      	mov	r0, r6
 80051d8:	4639      	mov	r1, r7
 80051da:	f7fa fff9 	bl	80001d0 <__aeabi_dsub>
 80051de:	a360      	add	r3, pc, #384	; (adr r3, 8005360 <__ieee754_rem_pio2+0x2e8>)
 80051e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e4:	4682      	mov	sl, r0
 80051e6:	468b      	mov	fp, r1
 80051e8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80051ec:	f7fb f9a8 	bl	8000540 <__aeabi_dmul>
 80051f0:	2d1f      	cmp	r5, #31
 80051f2:	4606      	mov	r6, r0
 80051f4:	460f      	mov	r7, r1
 80051f6:	dc0c      	bgt.n	8005212 <__ieee754_rem_pio2+0x19a>
 80051f8:	1e6a      	subs	r2, r5, #1
 80051fa:	4b6a      	ldr	r3, [pc, #424]	; (80053a4 <__ieee754_rem_pio2+0x32c>)
 80051fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005200:	4543      	cmp	r3, r8
 8005202:	d006      	beq.n	8005212 <__ieee754_rem_pio2+0x19a>
 8005204:	4632      	mov	r2, r6
 8005206:	463b      	mov	r3, r7
 8005208:	4650      	mov	r0, sl
 800520a:	4659      	mov	r1, fp
 800520c:	f7fa ffe0 	bl	80001d0 <__aeabi_dsub>
 8005210:	e00e      	b.n	8005230 <__ieee754_rem_pio2+0x1b8>
 8005212:	4632      	mov	r2, r6
 8005214:	463b      	mov	r3, r7
 8005216:	4650      	mov	r0, sl
 8005218:	4659      	mov	r1, fp
 800521a:	f7fa ffd9 	bl	80001d0 <__aeabi_dsub>
 800521e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005222:	9305      	str	r3, [sp, #20]
 8005224:	9a05      	ldr	r2, [sp, #20]
 8005226:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800522a:	1ad3      	subs	r3, r2, r3
 800522c:	2b10      	cmp	r3, #16
 800522e:	dc02      	bgt.n	8005236 <__ieee754_rem_pio2+0x1be>
 8005230:	e9c4 0100 	strd	r0, r1, [r4]
 8005234:	e039      	b.n	80052aa <__ieee754_rem_pio2+0x232>
 8005236:	a34c      	add	r3, pc, #304	; (adr r3, 8005368 <__ieee754_rem_pio2+0x2f0>)
 8005238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800523c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005240:	f7fb f97e 	bl	8000540 <__aeabi_dmul>
 8005244:	4606      	mov	r6, r0
 8005246:	460f      	mov	r7, r1
 8005248:	4602      	mov	r2, r0
 800524a:	460b      	mov	r3, r1
 800524c:	4650      	mov	r0, sl
 800524e:	4659      	mov	r1, fp
 8005250:	f7fa ffbe 	bl	80001d0 <__aeabi_dsub>
 8005254:	4602      	mov	r2, r0
 8005256:	460b      	mov	r3, r1
 8005258:	4680      	mov	r8, r0
 800525a:	4689      	mov	r9, r1
 800525c:	4650      	mov	r0, sl
 800525e:	4659      	mov	r1, fp
 8005260:	f7fa ffb6 	bl	80001d0 <__aeabi_dsub>
 8005264:	4632      	mov	r2, r6
 8005266:	463b      	mov	r3, r7
 8005268:	f7fa ffb2 	bl	80001d0 <__aeabi_dsub>
 800526c:	a340      	add	r3, pc, #256	; (adr r3, 8005370 <__ieee754_rem_pio2+0x2f8>)
 800526e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005272:	4606      	mov	r6, r0
 8005274:	460f      	mov	r7, r1
 8005276:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800527a:	f7fb f961 	bl	8000540 <__aeabi_dmul>
 800527e:	4632      	mov	r2, r6
 8005280:	463b      	mov	r3, r7
 8005282:	f7fa ffa5 	bl	80001d0 <__aeabi_dsub>
 8005286:	4602      	mov	r2, r0
 8005288:	460b      	mov	r3, r1
 800528a:	4606      	mov	r6, r0
 800528c:	460f      	mov	r7, r1
 800528e:	4640      	mov	r0, r8
 8005290:	4649      	mov	r1, r9
 8005292:	f7fa ff9d 	bl	80001d0 <__aeabi_dsub>
 8005296:	9a05      	ldr	r2, [sp, #20]
 8005298:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800529c:	1ad3      	subs	r3, r2, r3
 800529e:	2b31      	cmp	r3, #49	; 0x31
 80052a0:	dc20      	bgt.n	80052e4 <__ieee754_rem_pio2+0x26c>
 80052a2:	e9c4 0100 	strd	r0, r1, [r4]
 80052a6:	46c2      	mov	sl, r8
 80052a8:	46cb      	mov	fp, r9
 80052aa:	e9d4 8900 	ldrd	r8, r9, [r4]
 80052ae:	4650      	mov	r0, sl
 80052b0:	4642      	mov	r2, r8
 80052b2:	464b      	mov	r3, r9
 80052b4:	4659      	mov	r1, fp
 80052b6:	f7fa ff8b 	bl	80001d0 <__aeabi_dsub>
 80052ba:	463b      	mov	r3, r7
 80052bc:	4632      	mov	r2, r6
 80052be:	f7fa ff87 	bl	80001d0 <__aeabi_dsub>
 80052c2:	9b04      	ldr	r3, [sp, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80052ca:	f6bf af11 	bge.w	80050f0 <__ieee754_rem_pio2+0x78>
 80052ce:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80052d2:	6063      	str	r3, [r4, #4]
 80052d4:	f8c4 8000 	str.w	r8, [r4]
 80052d8:	60a0      	str	r0, [r4, #8]
 80052da:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80052de:	60e3      	str	r3, [r4, #12]
 80052e0:	426d      	negs	r5, r5
 80052e2:	e705      	b.n	80050f0 <__ieee754_rem_pio2+0x78>
 80052e4:	a326      	add	r3, pc, #152	; (adr r3, 8005380 <__ieee754_rem_pio2+0x308>)
 80052e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80052ee:	f7fb f927 	bl	8000540 <__aeabi_dmul>
 80052f2:	4606      	mov	r6, r0
 80052f4:	460f      	mov	r7, r1
 80052f6:	4602      	mov	r2, r0
 80052f8:	460b      	mov	r3, r1
 80052fa:	4640      	mov	r0, r8
 80052fc:	4649      	mov	r1, r9
 80052fe:	f7fa ff67 	bl	80001d0 <__aeabi_dsub>
 8005302:	4602      	mov	r2, r0
 8005304:	460b      	mov	r3, r1
 8005306:	4682      	mov	sl, r0
 8005308:	468b      	mov	fp, r1
 800530a:	4640      	mov	r0, r8
 800530c:	4649      	mov	r1, r9
 800530e:	f7fa ff5f 	bl	80001d0 <__aeabi_dsub>
 8005312:	4632      	mov	r2, r6
 8005314:	463b      	mov	r3, r7
 8005316:	f7fa ff5b 	bl	80001d0 <__aeabi_dsub>
 800531a:	a31b      	add	r3, pc, #108	; (adr r3, 8005388 <__ieee754_rem_pio2+0x310>)
 800531c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005320:	4606      	mov	r6, r0
 8005322:	460f      	mov	r7, r1
 8005324:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005328:	f7fb f90a 	bl	8000540 <__aeabi_dmul>
 800532c:	4632      	mov	r2, r6
 800532e:	463b      	mov	r3, r7
 8005330:	f7fa ff4e 	bl	80001d0 <__aeabi_dsub>
 8005334:	4606      	mov	r6, r0
 8005336:	460f      	mov	r7, r1
 8005338:	e764      	b.n	8005204 <__ieee754_rem_pio2+0x18c>
 800533a:	4b1b      	ldr	r3, [pc, #108]	; (80053a8 <__ieee754_rem_pio2+0x330>)
 800533c:	4598      	cmp	r8, r3
 800533e:	dd35      	ble.n	80053ac <__ieee754_rem_pio2+0x334>
 8005340:	ee10 2a10 	vmov	r2, s0
 8005344:	463b      	mov	r3, r7
 8005346:	4630      	mov	r0, r6
 8005348:	4639      	mov	r1, r7
 800534a:	f7fa ff41 	bl	80001d0 <__aeabi_dsub>
 800534e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005352:	e9c4 0100 	strd	r0, r1, [r4]
 8005356:	e6a1      	b.n	800509c <__ieee754_rem_pio2+0x24>
 8005358:	54400000 	.word	0x54400000
 800535c:	3ff921fb 	.word	0x3ff921fb
 8005360:	1a626331 	.word	0x1a626331
 8005364:	3dd0b461 	.word	0x3dd0b461
 8005368:	1a600000 	.word	0x1a600000
 800536c:	3dd0b461 	.word	0x3dd0b461
 8005370:	2e037073 	.word	0x2e037073
 8005374:	3ba3198a 	.word	0x3ba3198a
 8005378:	6dc9c883 	.word	0x6dc9c883
 800537c:	3fe45f30 	.word	0x3fe45f30
 8005380:	2e000000 	.word	0x2e000000
 8005384:	3ba3198a 	.word	0x3ba3198a
 8005388:	252049c1 	.word	0x252049c1
 800538c:	397b839a 	.word	0x397b839a
 8005390:	3fe921fb 	.word	0x3fe921fb
 8005394:	4002d97b 	.word	0x4002d97b
 8005398:	3ff921fb 	.word	0x3ff921fb
 800539c:	413921fb 	.word	0x413921fb
 80053a0:	3fe00000 	.word	0x3fe00000
 80053a4:	08006308 	.word	0x08006308
 80053a8:	7fefffff 	.word	0x7fefffff
 80053ac:	ea4f 5528 	mov.w	r5, r8, asr #20
 80053b0:	f2a5 4516 	subw	r5, r5, #1046	; 0x416
 80053b4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80053b8:	4630      	mov	r0, r6
 80053ba:	460f      	mov	r7, r1
 80053bc:	f7fb fb70 	bl	8000aa0 <__aeabi_d2iz>
 80053c0:	f7fb f854 	bl	800046c <__aeabi_i2d>
 80053c4:	4602      	mov	r2, r0
 80053c6:	460b      	mov	r3, r1
 80053c8:	4630      	mov	r0, r6
 80053ca:	4639      	mov	r1, r7
 80053cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80053d0:	f7fa fefe 	bl	80001d0 <__aeabi_dsub>
 80053d4:	2200      	movs	r2, #0
 80053d6:	4b1f      	ldr	r3, [pc, #124]	; (8005454 <__ieee754_rem_pio2+0x3dc>)
 80053d8:	f7fb f8b2 	bl	8000540 <__aeabi_dmul>
 80053dc:	460f      	mov	r7, r1
 80053de:	4606      	mov	r6, r0
 80053e0:	f7fb fb5e 	bl	8000aa0 <__aeabi_d2iz>
 80053e4:	f7fb f842 	bl	800046c <__aeabi_i2d>
 80053e8:	4602      	mov	r2, r0
 80053ea:	460b      	mov	r3, r1
 80053ec:	4630      	mov	r0, r6
 80053ee:	4639      	mov	r1, r7
 80053f0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80053f4:	f7fa feec 	bl	80001d0 <__aeabi_dsub>
 80053f8:	2200      	movs	r2, #0
 80053fa:	4b16      	ldr	r3, [pc, #88]	; (8005454 <__ieee754_rem_pio2+0x3dc>)
 80053fc:	f7fb f8a0 	bl	8000540 <__aeabi_dmul>
 8005400:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8005404:	f10d 0930 	add.w	r9, sp, #48	; 0x30
 8005408:	f04f 0803 	mov.w	r8, #3
 800540c:	2600      	movs	r6, #0
 800540e:	2700      	movs	r7, #0
 8005410:	4632      	mov	r2, r6
 8005412:	463b      	mov	r3, r7
 8005414:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005418:	f108 3aff 	add.w	sl, r8, #4294967295
 800541c:	f7fb faf8 	bl	8000a10 <__aeabi_dcmpeq>
 8005420:	b9b0      	cbnz	r0, 8005450 <__ieee754_rem_pio2+0x3d8>
 8005422:	4b0d      	ldr	r3, [pc, #52]	; (8005458 <__ieee754_rem_pio2+0x3e0>)
 8005424:	9301      	str	r3, [sp, #4]
 8005426:	2302      	movs	r3, #2
 8005428:	9300      	str	r3, [sp, #0]
 800542a:	462a      	mov	r2, r5
 800542c:	4643      	mov	r3, r8
 800542e:	4621      	mov	r1, r4
 8005430:	a806      	add	r0, sp, #24
 8005432:	f000 f98d 	bl	8005750 <__kernel_rem_pio2>
 8005436:	9b04      	ldr	r3, [sp, #16]
 8005438:	2b00      	cmp	r3, #0
 800543a:	4605      	mov	r5, r0
 800543c:	f6bf ae58 	bge.w	80050f0 <__ieee754_rem_pio2+0x78>
 8005440:	6863      	ldr	r3, [r4, #4]
 8005442:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8005446:	6063      	str	r3, [r4, #4]
 8005448:	68e3      	ldr	r3, [r4, #12]
 800544a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800544e:	e746      	b.n	80052de <__ieee754_rem_pio2+0x266>
 8005450:	46d0      	mov	r8, sl
 8005452:	e7dd      	b.n	8005410 <__ieee754_rem_pio2+0x398>
 8005454:	41700000 	.word	0x41700000
 8005458:	08006388 	.word	0x08006388

0800545c <__ieee754_sqrt>:
 800545c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005460:	4955      	ldr	r1, [pc, #340]	; (80055b8 <__ieee754_sqrt+0x15c>)
 8005462:	ec55 4b10 	vmov	r4, r5, d0
 8005466:	43a9      	bics	r1, r5
 8005468:	462b      	mov	r3, r5
 800546a:	462a      	mov	r2, r5
 800546c:	d112      	bne.n	8005494 <__ieee754_sqrt+0x38>
 800546e:	ee10 2a10 	vmov	r2, s0
 8005472:	ee10 0a10 	vmov	r0, s0
 8005476:	4629      	mov	r1, r5
 8005478:	f7fb f862 	bl	8000540 <__aeabi_dmul>
 800547c:	4602      	mov	r2, r0
 800547e:	460b      	mov	r3, r1
 8005480:	4620      	mov	r0, r4
 8005482:	4629      	mov	r1, r5
 8005484:	f7fa fea6 	bl	80001d4 <__adddf3>
 8005488:	4604      	mov	r4, r0
 800548a:	460d      	mov	r5, r1
 800548c:	ec45 4b10 	vmov	d0, r4, r5
 8005490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005494:	2d00      	cmp	r5, #0
 8005496:	ee10 0a10 	vmov	r0, s0
 800549a:	4621      	mov	r1, r4
 800549c:	dc0f      	bgt.n	80054be <__ieee754_sqrt+0x62>
 800549e:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 80054a2:	4330      	orrs	r0, r6
 80054a4:	d0f2      	beq.n	800548c <__ieee754_sqrt+0x30>
 80054a6:	b155      	cbz	r5, 80054be <__ieee754_sqrt+0x62>
 80054a8:	ee10 2a10 	vmov	r2, s0
 80054ac:	4620      	mov	r0, r4
 80054ae:	4629      	mov	r1, r5
 80054b0:	f7fa fe8e 	bl	80001d0 <__aeabi_dsub>
 80054b4:	4602      	mov	r2, r0
 80054b6:	460b      	mov	r3, r1
 80054b8:	f7fb f96c 	bl	8000794 <__aeabi_ddiv>
 80054bc:	e7e4      	b.n	8005488 <__ieee754_sqrt+0x2c>
 80054be:	151b      	asrs	r3, r3, #20
 80054c0:	d073      	beq.n	80055aa <__ieee754_sqrt+0x14e>
 80054c2:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80054c6:	07dd      	lsls	r5, r3, #31
 80054c8:	f3c2 0213 	ubfx	r2, r2, #0, #20
 80054cc:	bf48      	it	mi
 80054ce:	0fc8      	lsrmi	r0, r1, #31
 80054d0:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80054d4:	bf44      	itt	mi
 80054d6:	0049      	lslmi	r1, r1, #1
 80054d8:	eb00 0242 	addmi.w	r2, r0, r2, lsl #1
 80054dc:	2500      	movs	r5, #0
 80054de:	1058      	asrs	r0, r3, #1
 80054e0:	0fcb      	lsrs	r3, r1, #31
 80054e2:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80054e6:	0049      	lsls	r1, r1, #1
 80054e8:	2316      	movs	r3, #22
 80054ea:	462c      	mov	r4, r5
 80054ec:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
 80054f0:	19a7      	adds	r7, r4, r6
 80054f2:	4297      	cmp	r7, r2
 80054f4:	bfde      	ittt	le
 80054f6:	19bc      	addle	r4, r7, r6
 80054f8:	1bd2      	suble	r2, r2, r7
 80054fa:	19ad      	addle	r5, r5, r6
 80054fc:	0fcf      	lsrs	r7, r1, #31
 80054fe:	3b01      	subs	r3, #1
 8005500:	eb07 0242 	add.w	r2, r7, r2, lsl #1
 8005504:	ea4f 0141 	mov.w	r1, r1, lsl #1
 8005508:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800550c:	d1f0      	bne.n	80054f0 <__ieee754_sqrt+0x94>
 800550e:	f04f 0c20 	mov.w	ip, #32
 8005512:	469e      	mov	lr, r3
 8005514:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 8005518:	42a2      	cmp	r2, r4
 800551a:	eb06 070e 	add.w	r7, r6, lr
 800551e:	dc02      	bgt.n	8005526 <__ieee754_sqrt+0xca>
 8005520:	d112      	bne.n	8005548 <__ieee754_sqrt+0xec>
 8005522:	428f      	cmp	r7, r1
 8005524:	d810      	bhi.n	8005548 <__ieee754_sqrt+0xec>
 8005526:	2f00      	cmp	r7, #0
 8005528:	eb07 0e06 	add.w	lr, r7, r6
 800552c:	da42      	bge.n	80055b4 <__ieee754_sqrt+0x158>
 800552e:	f1be 0f00 	cmp.w	lr, #0
 8005532:	db3f      	blt.n	80055b4 <__ieee754_sqrt+0x158>
 8005534:	f104 0801 	add.w	r8, r4, #1
 8005538:	1b12      	subs	r2, r2, r4
 800553a:	428f      	cmp	r7, r1
 800553c:	bf88      	it	hi
 800553e:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005542:	1bc9      	subs	r1, r1, r7
 8005544:	4433      	add	r3, r6
 8005546:	4644      	mov	r4, r8
 8005548:	0052      	lsls	r2, r2, #1
 800554a:	f1bc 0c01 	subs.w	ip, ip, #1
 800554e:	eb02 72d1 	add.w	r2, r2, r1, lsr #31
 8005552:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005556:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800555a:	d1dd      	bne.n	8005518 <__ieee754_sqrt+0xbc>
 800555c:	430a      	orrs	r2, r1
 800555e:	d006      	beq.n	800556e <__ieee754_sqrt+0x112>
 8005560:	1c5c      	adds	r4, r3, #1
 8005562:	bf13      	iteet	ne
 8005564:	3301      	addne	r3, #1
 8005566:	3501      	addeq	r5, #1
 8005568:	4663      	moveq	r3, ip
 800556a:	f023 0301 	bicne.w	r3, r3, #1
 800556e:	106a      	asrs	r2, r5, #1
 8005570:	085b      	lsrs	r3, r3, #1
 8005572:	07e9      	lsls	r1, r5, #31
 8005574:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 8005578:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 800557c:	bf48      	it	mi
 800557e:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8005582:	eb02 5500 	add.w	r5, r2, r0, lsl #20
 8005586:	461c      	mov	r4, r3
 8005588:	e780      	b.n	800548c <__ieee754_sqrt+0x30>
 800558a:	0aca      	lsrs	r2, r1, #11
 800558c:	3815      	subs	r0, #21
 800558e:	0549      	lsls	r1, r1, #21
 8005590:	2a00      	cmp	r2, #0
 8005592:	d0fa      	beq.n	800558a <__ieee754_sqrt+0x12e>
 8005594:	02d6      	lsls	r6, r2, #11
 8005596:	d50a      	bpl.n	80055ae <__ieee754_sqrt+0x152>
 8005598:	f1c3 0420 	rsb	r4, r3, #32
 800559c:	fa21 f404 	lsr.w	r4, r1, r4
 80055a0:	1e5d      	subs	r5, r3, #1
 80055a2:	4099      	lsls	r1, r3
 80055a4:	4322      	orrs	r2, r4
 80055a6:	1b43      	subs	r3, r0, r5
 80055a8:	e78b      	b.n	80054c2 <__ieee754_sqrt+0x66>
 80055aa:	4618      	mov	r0, r3
 80055ac:	e7f0      	b.n	8005590 <__ieee754_sqrt+0x134>
 80055ae:	0052      	lsls	r2, r2, #1
 80055b0:	3301      	adds	r3, #1
 80055b2:	e7ef      	b.n	8005594 <__ieee754_sqrt+0x138>
 80055b4:	46a0      	mov	r8, r4
 80055b6:	e7bf      	b.n	8005538 <__ieee754_sqrt+0xdc>
 80055b8:	7ff00000 	.word	0x7ff00000
 80055bc:	00000000 	.word	0x00000000

080055c0 <__kernel_cos>:
 80055c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80055c4:	ec59 8b10 	vmov	r8, r9, d0
 80055c8:	f029 4600 	bic.w	r6, r9, #2147483648	; 0x80000000
 80055cc:	f1b6 5f79 	cmp.w	r6, #1044381696	; 0x3e400000
 80055d0:	ed2d 8b02 	vpush	{d8}
 80055d4:	eeb0 8a41 	vmov.f32	s16, s2
 80055d8:	eef0 8a61 	vmov.f32	s17, s3
 80055dc:	da07      	bge.n	80055ee <__kernel_cos+0x2e>
 80055de:	ee10 0a10 	vmov	r0, s0
 80055e2:	4649      	mov	r1, r9
 80055e4:	f7fb fa5c 	bl	8000aa0 <__aeabi_d2iz>
 80055e8:	2800      	cmp	r0, #0
 80055ea:	f000 8089 	beq.w	8005700 <__kernel_cos+0x140>
 80055ee:	4642      	mov	r2, r8
 80055f0:	464b      	mov	r3, r9
 80055f2:	4640      	mov	r0, r8
 80055f4:	4649      	mov	r1, r9
 80055f6:	f7fa ffa3 	bl	8000540 <__aeabi_dmul>
 80055fa:	2200      	movs	r2, #0
 80055fc:	4b4e      	ldr	r3, [pc, #312]	; (8005738 <__kernel_cos+0x178>)
 80055fe:	4604      	mov	r4, r0
 8005600:	460d      	mov	r5, r1
 8005602:	f7fa ff9d 	bl	8000540 <__aeabi_dmul>
 8005606:	a340      	add	r3, pc, #256	; (adr r3, 8005708 <__kernel_cos+0x148>)
 8005608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800560c:	4682      	mov	sl, r0
 800560e:	468b      	mov	fp, r1
 8005610:	4620      	mov	r0, r4
 8005612:	4629      	mov	r1, r5
 8005614:	f7fa ff94 	bl	8000540 <__aeabi_dmul>
 8005618:	a33d      	add	r3, pc, #244	; (adr r3, 8005710 <__kernel_cos+0x150>)
 800561a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800561e:	f7fa fdd9 	bl	80001d4 <__adddf3>
 8005622:	4622      	mov	r2, r4
 8005624:	462b      	mov	r3, r5
 8005626:	f7fa ff8b 	bl	8000540 <__aeabi_dmul>
 800562a:	a33b      	add	r3, pc, #236	; (adr r3, 8005718 <__kernel_cos+0x158>)
 800562c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005630:	f7fa fdce 	bl	80001d0 <__aeabi_dsub>
 8005634:	4622      	mov	r2, r4
 8005636:	462b      	mov	r3, r5
 8005638:	f7fa ff82 	bl	8000540 <__aeabi_dmul>
 800563c:	a338      	add	r3, pc, #224	; (adr r3, 8005720 <__kernel_cos+0x160>)
 800563e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005642:	f7fa fdc7 	bl	80001d4 <__adddf3>
 8005646:	4622      	mov	r2, r4
 8005648:	462b      	mov	r3, r5
 800564a:	f7fa ff79 	bl	8000540 <__aeabi_dmul>
 800564e:	a336      	add	r3, pc, #216	; (adr r3, 8005728 <__kernel_cos+0x168>)
 8005650:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005654:	f7fa fdbc 	bl	80001d0 <__aeabi_dsub>
 8005658:	4622      	mov	r2, r4
 800565a:	462b      	mov	r3, r5
 800565c:	f7fa ff70 	bl	8000540 <__aeabi_dmul>
 8005660:	a333      	add	r3, pc, #204	; (adr r3, 8005730 <__kernel_cos+0x170>)
 8005662:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005666:	f7fa fdb5 	bl	80001d4 <__adddf3>
 800566a:	4622      	mov	r2, r4
 800566c:	462b      	mov	r3, r5
 800566e:	f7fa ff67 	bl	8000540 <__aeabi_dmul>
 8005672:	4622      	mov	r2, r4
 8005674:	462b      	mov	r3, r5
 8005676:	f7fa ff63 	bl	8000540 <__aeabi_dmul>
 800567a:	ec53 2b18 	vmov	r2, r3, d8
 800567e:	4604      	mov	r4, r0
 8005680:	460d      	mov	r5, r1
 8005682:	4640      	mov	r0, r8
 8005684:	4649      	mov	r1, r9
 8005686:	f7fa ff5b 	bl	8000540 <__aeabi_dmul>
 800568a:	460b      	mov	r3, r1
 800568c:	4602      	mov	r2, r0
 800568e:	4629      	mov	r1, r5
 8005690:	4620      	mov	r0, r4
 8005692:	f7fa fd9d 	bl	80001d0 <__aeabi_dsub>
 8005696:	4b29      	ldr	r3, [pc, #164]	; (800573c <__kernel_cos+0x17c>)
 8005698:	429e      	cmp	r6, r3
 800569a:	4680      	mov	r8, r0
 800569c:	4689      	mov	r9, r1
 800569e:	dc11      	bgt.n	80056c4 <__kernel_cos+0x104>
 80056a0:	4602      	mov	r2, r0
 80056a2:	460b      	mov	r3, r1
 80056a4:	4650      	mov	r0, sl
 80056a6:	4659      	mov	r1, fp
 80056a8:	f7fa fd92 	bl	80001d0 <__aeabi_dsub>
 80056ac:	460b      	mov	r3, r1
 80056ae:	4924      	ldr	r1, [pc, #144]	; (8005740 <__kernel_cos+0x180>)
 80056b0:	4602      	mov	r2, r0
 80056b2:	2000      	movs	r0, #0
 80056b4:	f7fa fd8c 	bl	80001d0 <__aeabi_dsub>
 80056b8:	ecbd 8b02 	vpop	{d8}
 80056bc:	ec41 0b10 	vmov	d0, r0, r1
 80056c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056c4:	4b1f      	ldr	r3, [pc, #124]	; (8005744 <__kernel_cos+0x184>)
 80056c6:	491e      	ldr	r1, [pc, #120]	; (8005740 <__kernel_cos+0x180>)
 80056c8:	429e      	cmp	r6, r3
 80056ca:	bfcc      	ite	gt
 80056cc:	4d1e      	ldrgt	r5, [pc, #120]	; (8005748 <__kernel_cos+0x188>)
 80056ce:	f5a6 1500 	suble.w	r5, r6, #2097152	; 0x200000
 80056d2:	2400      	movs	r4, #0
 80056d4:	4622      	mov	r2, r4
 80056d6:	462b      	mov	r3, r5
 80056d8:	2000      	movs	r0, #0
 80056da:	f7fa fd79 	bl	80001d0 <__aeabi_dsub>
 80056de:	4622      	mov	r2, r4
 80056e0:	4606      	mov	r6, r0
 80056e2:	460f      	mov	r7, r1
 80056e4:	462b      	mov	r3, r5
 80056e6:	4650      	mov	r0, sl
 80056e8:	4659      	mov	r1, fp
 80056ea:	f7fa fd71 	bl	80001d0 <__aeabi_dsub>
 80056ee:	4642      	mov	r2, r8
 80056f0:	464b      	mov	r3, r9
 80056f2:	f7fa fd6d 	bl	80001d0 <__aeabi_dsub>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4630      	mov	r0, r6
 80056fc:	4639      	mov	r1, r7
 80056fe:	e7d9      	b.n	80056b4 <__kernel_cos+0xf4>
 8005700:	2000      	movs	r0, #0
 8005702:	490f      	ldr	r1, [pc, #60]	; (8005740 <__kernel_cos+0x180>)
 8005704:	e7d8      	b.n	80056b8 <__kernel_cos+0xf8>
 8005706:	bf00      	nop
 8005708:	be8838d4 	.word	0xbe8838d4
 800570c:	bda8fae9 	.word	0xbda8fae9
 8005710:	bdb4b1c4 	.word	0xbdb4b1c4
 8005714:	3e21ee9e 	.word	0x3e21ee9e
 8005718:	809c52ad 	.word	0x809c52ad
 800571c:	3e927e4f 	.word	0x3e927e4f
 8005720:	19cb1590 	.word	0x19cb1590
 8005724:	3efa01a0 	.word	0x3efa01a0
 8005728:	16c15177 	.word	0x16c15177
 800572c:	3f56c16c 	.word	0x3f56c16c
 8005730:	5555554c 	.word	0x5555554c
 8005734:	3fa55555 	.word	0x3fa55555
 8005738:	3fe00000 	.word	0x3fe00000
 800573c:	3fd33332 	.word	0x3fd33332
 8005740:	3ff00000 	.word	0x3ff00000
 8005744:	3fe90000 	.word	0x3fe90000
 8005748:	3fd20000 	.word	0x3fd20000
 800574c:	00000000 	.word	0x00000000

08005750 <__kernel_rem_pio2>:
 8005750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005754:	ed2d 8b02 	vpush	{d8}
 8005758:	f5ad 7d1b 	sub.w	sp, sp, #620	; 0x26c
 800575c:	1ed4      	subs	r4, r2, #3
 800575e:	9308      	str	r3, [sp, #32]
 8005760:	9101      	str	r1, [sp, #4]
 8005762:	4bc5      	ldr	r3, [pc, #788]	; (8005a78 <__kernel_rem_pio2+0x328>)
 8005764:	99a6      	ldr	r1, [sp, #664]	; 0x298
 8005766:	9009      	str	r0, [sp, #36]	; 0x24
 8005768:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800576c:	9304      	str	r3, [sp, #16]
 800576e:	9b08      	ldr	r3, [sp, #32]
 8005770:	3b01      	subs	r3, #1
 8005772:	9307      	str	r3, [sp, #28]
 8005774:	2318      	movs	r3, #24
 8005776:	fb94 f4f3 	sdiv	r4, r4, r3
 800577a:	f06f 0317 	mvn.w	r3, #23
 800577e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8005782:	fb04 3303 	mla	r3, r4, r3, r3
 8005786:	eb03 0a02 	add.w	sl, r3, r2
 800578a:	9b04      	ldr	r3, [sp, #16]
 800578c:	9a07      	ldr	r2, [sp, #28]
 800578e:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005a68 <__kernel_rem_pio2+0x318>
 8005792:	eb03 0802 	add.w	r8, r3, r2
 8005796:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005798:	1aa7      	subs	r7, r4, r2
 800579a:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 800579e:	ae22      	add	r6, sp, #136	; 0x88
 80057a0:	2500      	movs	r5, #0
 80057a2:	4545      	cmp	r5, r8
 80057a4:	dd13      	ble.n	80057ce <__kernel_rem_pio2+0x7e>
 80057a6:	ed9f 8bb0 	vldr	d8, [pc, #704]	; 8005a68 <__kernel_rem_pio2+0x318>
 80057aa:	f50d 7be4 	add.w	fp, sp, #456	; 0x1c8
 80057ae:	2600      	movs	r6, #0
 80057b0:	9b04      	ldr	r3, [sp, #16]
 80057b2:	429e      	cmp	r6, r3
 80057b4:	dc32      	bgt.n	800581c <__kernel_rem_pio2+0xcc>
 80057b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057b8:	9302      	str	r3, [sp, #8]
 80057ba:	9b08      	ldr	r3, [sp, #32]
 80057bc:	199d      	adds	r5, r3, r6
 80057be:	ab22      	add	r3, sp, #136	; 0x88
 80057c0:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80057c4:	9306      	str	r3, [sp, #24]
 80057c6:	ec59 8b18 	vmov	r8, r9, d8
 80057ca:	2700      	movs	r7, #0
 80057cc:	e01f      	b.n	800580e <__kernel_rem_pio2+0xbe>
 80057ce:	42ef      	cmn	r7, r5
 80057d0:	d407      	bmi.n	80057e2 <__kernel_rem_pio2+0x92>
 80057d2:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80057d6:	f7fa fe49 	bl	800046c <__aeabi_i2d>
 80057da:	e8e6 0102 	strd	r0, r1, [r6], #8
 80057de:	3501      	adds	r5, #1
 80057e0:	e7df      	b.n	80057a2 <__kernel_rem_pio2+0x52>
 80057e2:	ec51 0b18 	vmov	r0, r1, d8
 80057e6:	e7f8      	b.n	80057da <__kernel_rem_pio2+0x8a>
 80057e8:	9906      	ldr	r1, [sp, #24]
 80057ea:	9d02      	ldr	r5, [sp, #8]
 80057ec:	e971 2302 	ldrd	r2, r3, [r1, #-8]!
 80057f0:	9106      	str	r1, [sp, #24]
 80057f2:	e8f5 0102 	ldrd	r0, r1, [r5], #8
 80057f6:	9502      	str	r5, [sp, #8]
 80057f8:	f7fa fea2 	bl	8000540 <__aeabi_dmul>
 80057fc:	4602      	mov	r2, r0
 80057fe:	460b      	mov	r3, r1
 8005800:	4640      	mov	r0, r8
 8005802:	4649      	mov	r1, r9
 8005804:	f7fa fce6 	bl	80001d4 <__adddf3>
 8005808:	3701      	adds	r7, #1
 800580a:	4680      	mov	r8, r0
 800580c:	4689      	mov	r9, r1
 800580e:	9b07      	ldr	r3, [sp, #28]
 8005810:	429f      	cmp	r7, r3
 8005812:	dde9      	ble.n	80057e8 <__kernel_rem_pio2+0x98>
 8005814:	e8eb 8902 	strd	r8, r9, [fp], #8
 8005818:	3601      	adds	r6, #1
 800581a:	e7c9      	b.n	80057b0 <__kernel_rem_pio2+0x60>
 800581c:	9b04      	ldr	r3, [sp, #16]
 800581e:	aa0e      	add	r2, sp, #56	; 0x38
 8005820:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005824:	930c      	str	r3, [sp, #48]	; 0x30
 8005826:	9ba7      	ldr	r3, [sp, #668]	; 0x29c
 8005828:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800582c:	9c04      	ldr	r4, [sp, #16]
 800582e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005830:	ab9a      	add	r3, sp, #616	; 0x268
 8005832:	f104 5b00 	add.w	fp, r4, #536870912	; 0x20000000
 8005836:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800583a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800583e:	e953 8928 	ldrd	r8, r9, [r3, #-160]	; 0xa0
 8005842:	ea4f 0bcb 	mov.w	fp, fp, lsl #3
 8005846:	ab9a      	add	r3, sp, #616	; 0x268
 8005848:	445b      	add	r3, fp
 800584a:	f1a3 0698 	sub.w	r6, r3, #152	; 0x98
 800584e:	2500      	movs	r5, #0
 8005850:	1b63      	subs	r3, r4, r5
 8005852:	2b00      	cmp	r3, #0
 8005854:	dc78      	bgt.n	8005948 <__kernel_rem_pio2+0x1f8>
 8005856:	4650      	mov	r0, sl
 8005858:	ec49 8b10 	vmov	d0, r8, r9
 800585c:	f000 fc98 	bl	8006190 <scalbn>
 8005860:	ec57 6b10 	vmov	r6, r7, d0
 8005864:	2200      	movs	r2, #0
 8005866:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 800586a:	ee10 0a10 	vmov	r0, s0
 800586e:	4639      	mov	r1, r7
 8005870:	f7fa fe66 	bl	8000540 <__aeabi_dmul>
 8005874:	ec41 0b10 	vmov	d0, r0, r1
 8005878:	f000 fb76 	bl	8005f68 <floor>
 800587c:	2200      	movs	r2, #0
 800587e:	ec51 0b10 	vmov	r0, r1, d0
 8005882:	4b7e      	ldr	r3, [pc, #504]	; (8005a7c <__kernel_rem_pio2+0x32c>)
 8005884:	f7fa fe5c 	bl	8000540 <__aeabi_dmul>
 8005888:	4602      	mov	r2, r0
 800588a:	460b      	mov	r3, r1
 800588c:	4630      	mov	r0, r6
 800588e:	4639      	mov	r1, r7
 8005890:	f7fa fc9e 	bl	80001d0 <__aeabi_dsub>
 8005894:	460f      	mov	r7, r1
 8005896:	4606      	mov	r6, r0
 8005898:	f7fb f902 	bl	8000aa0 <__aeabi_d2iz>
 800589c:	9006      	str	r0, [sp, #24]
 800589e:	f7fa fde5 	bl	800046c <__aeabi_i2d>
 80058a2:	4602      	mov	r2, r0
 80058a4:	460b      	mov	r3, r1
 80058a6:	4630      	mov	r0, r6
 80058a8:	4639      	mov	r1, r7
 80058aa:	f7fa fc91 	bl	80001d0 <__aeabi_dsub>
 80058ae:	f1ba 0f00 	cmp.w	sl, #0
 80058b2:	4606      	mov	r6, r0
 80058b4:	460f      	mov	r7, r1
 80058b6:	dd6c      	ble.n	8005992 <__kernel_rem_pio2+0x242>
 80058b8:	1e62      	subs	r2, r4, #1
 80058ba:	ab0e      	add	r3, sp, #56	; 0x38
 80058bc:	f1ca 0118 	rsb	r1, sl, #24
 80058c0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80058c4:	9d06      	ldr	r5, [sp, #24]
 80058c6:	fa40 f301 	asr.w	r3, r0, r1
 80058ca:	441d      	add	r5, r3
 80058cc:	408b      	lsls	r3, r1
 80058ce:	1ac0      	subs	r0, r0, r3
 80058d0:	ab0e      	add	r3, sp, #56	; 0x38
 80058d2:	9506      	str	r5, [sp, #24]
 80058d4:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 80058d8:	f1ca 0317 	rsb	r3, sl, #23
 80058dc:	fa40 f303 	asr.w	r3, r0, r3
 80058e0:	9302      	str	r3, [sp, #8]
 80058e2:	9b02      	ldr	r3, [sp, #8]
 80058e4:	2b00      	cmp	r3, #0
 80058e6:	dd62      	ble.n	80059ae <__kernel_rem_pio2+0x25e>
 80058e8:	9b06      	ldr	r3, [sp, #24]
 80058ea:	2200      	movs	r2, #0
 80058ec:	3301      	adds	r3, #1
 80058ee:	9306      	str	r3, [sp, #24]
 80058f0:	4615      	mov	r5, r2
 80058f2:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 80058f6:	4294      	cmp	r4, r2
 80058f8:	f300 8095 	bgt.w	8005a26 <__kernel_rem_pio2+0x2d6>
 80058fc:	f1ba 0f00 	cmp.w	sl, #0
 8005900:	dd07      	ble.n	8005912 <__kernel_rem_pio2+0x1c2>
 8005902:	f1ba 0f01 	cmp.w	sl, #1
 8005906:	f000 80a2 	beq.w	8005a4e <__kernel_rem_pio2+0x2fe>
 800590a:	f1ba 0f02 	cmp.w	sl, #2
 800590e:	f000 80c1 	beq.w	8005a94 <__kernel_rem_pio2+0x344>
 8005912:	9b02      	ldr	r3, [sp, #8]
 8005914:	2b02      	cmp	r3, #2
 8005916:	d14a      	bne.n	80059ae <__kernel_rem_pio2+0x25e>
 8005918:	4632      	mov	r2, r6
 800591a:	463b      	mov	r3, r7
 800591c:	2000      	movs	r0, #0
 800591e:	4958      	ldr	r1, [pc, #352]	; (8005a80 <__kernel_rem_pio2+0x330>)
 8005920:	f7fa fc56 	bl	80001d0 <__aeabi_dsub>
 8005924:	4606      	mov	r6, r0
 8005926:	460f      	mov	r7, r1
 8005928:	2d00      	cmp	r5, #0
 800592a:	d040      	beq.n	80059ae <__kernel_rem_pio2+0x25e>
 800592c:	4650      	mov	r0, sl
 800592e:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005a70 <__kernel_rem_pio2+0x320>
 8005932:	f000 fc2d 	bl	8006190 <scalbn>
 8005936:	4630      	mov	r0, r6
 8005938:	4639      	mov	r1, r7
 800593a:	ec53 2b10 	vmov	r2, r3, d0
 800593e:	f7fa fc47 	bl	80001d0 <__aeabi_dsub>
 8005942:	4606      	mov	r6, r0
 8005944:	460f      	mov	r7, r1
 8005946:	e032      	b.n	80059ae <__kernel_rem_pio2+0x25e>
 8005948:	2200      	movs	r2, #0
 800594a:	4b4e      	ldr	r3, [pc, #312]	; (8005a84 <__kernel_rem_pio2+0x334>)
 800594c:	4640      	mov	r0, r8
 800594e:	4649      	mov	r1, r9
 8005950:	f7fa fdf6 	bl	8000540 <__aeabi_dmul>
 8005954:	f7fb f8a4 	bl	8000aa0 <__aeabi_d2iz>
 8005958:	f7fa fd88 	bl	800046c <__aeabi_i2d>
 800595c:	2200      	movs	r2, #0
 800595e:	4b4a      	ldr	r3, [pc, #296]	; (8005a88 <__kernel_rem_pio2+0x338>)
 8005960:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005964:	f7fa fdec 	bl	8000540 <__aeabi_dmul>
 8005968:	4602      	mov	r2, r0
 800596a:	460b      	mov	r3, r1
 800596c:	4640      	mov	r0, r8
 800596e:	4649      	mov	r1, r9
 8005970:	f7fa fc2e 	bl	80001d0 <__aeabi_dsub>
 8005974:	f7fb f894 	bl	8000aa0 <__aeabi_d2iz>
 8005978:	ab0e      	add	r3, sp, #56	; 0x38
 800597a:	f843 0025 	str.w	r0, [r3, r5, lsl #2]
 800597e:	e976 2302 	ldrd	r2, r3, [r6, #-8]!
 8005982:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005986:	f7fa fc25 	bl	80001d4 <__adddf3>
 800598a:	3501      	adds	r5, #1
 800598c:	4680      	mov	r8, r0
 800598e:	4689      	mov	r9, r1
 8005990:	e75e      	b.n	8005850 <__kernel_rem_pio2+0x100>
 8005992:	d105      	bne.n	80059a0 <__kernel_rem_pio2+0x250>
 8005994:	1e63      	subs	r3, r4, #1
 8005996:	aa0e      	add	r2, sp, #56	; 0x38
 8005998:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800599c:	15c3      	asrs	r3, r0, #23
 800599e:	e79f      	b.n	80058e0 <__kernel_rem_pio2+0x190>
 80059a0:	2200      	movs	r2, #0
 80059a2:	4b3a      	ldr	r3, [pc, #232]	; (8005a8c <__kernel_rem_pio2+0x33c>)
 80059a4:	f7fb f852 	bl	8000a4c <__aeabi_dcmpge>
 80059a8:	2800      	cmp	r0, #0
 80059aa:	d139      	bne.n	8005a20 <__kernel_rem_pio2+0x2d0>
 80059ac:	9002      	str	r0, [sp, #8]
 80059ae:	2200      	movs	r2, #0
 80059b0:	2300      	movs	r3, #0
 80059b2:	4630      	mov	r0, r6
 80059b4:	4639      	mov	r1, r7
 80059b6:	f7fb f82b 	bl	8000a10 <__aeabi_dcmpeq>
 80059ba:	2800      	cmp	r0, #0
 80059bc:	f000 80c7 	beq.w	8005b4e <__kernel_rem_pio2+0x3fe>
 80059c0:	1e65      	subs	r5, r4, #1
 80059c2:	462b      	mov	r3, r5
 80059c4:	2200      	movs	r2, #0
 80059c6:	9904      	ldr	r1, [sp, #16]
 80059c8:	428b      	cmp	r3, r1
 80059ca:	da6a      	bge.n	8005aa2 <__kernel_rem_pio2+0x352>
 80059cc:	2a00      	cmp	r2, #0
 80059ce:	f000 8088 	beq.w	8005ae2 <__kernel_rem_pio2+0x392>
 80059d2:	ab0e      	add	r3, sp, #56	; 0x38
 80059d4:	f1aa 0a18 	sub.w	sl, sl, #24
 80059d8:	f853 3025 	ldr.w	r3, [r3, r5, lsl #2]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	f000 80b4 	beq.w	8005b4a <__kernel_rem_pio2+0x3fa>
 80059e2:	4650      	mov	r0, sl
 80059e4:	ed9f 0b22 	vldr	d0, [pc, #136]	; 8005a70 <__kernel_rem_pio2+0x320>
 80059e8:	f000 fbd2 	bl	8006190 <scalbn>
 80059ec:	00ec      	lsls	r4, r5, #3
 80059ee:	ab72      	add	r3, sp, #456	; 0x1c8
 80059f0:	191e      	adds	r6, r3, r4
 80059f2:	ec59 8b10 	vmov	r8, r9, d0
 80059f6:	f106 0a08 	add.w	sl, r6, #8
 80059fa:	462f      	mov	r7, r5
 80059fc:	2f00      	cmp	r7, #0
 80059fe:	f280 80df 	bge.w	8005bc0 <__kernel_rem_pio2+0x470>
 8005a02:	ed9f 8b19 	vldr	d8, [pc, #100]	; 8005a68 <__kernel_rem_pio2+0x318>
 8005a06:	f04f 0a00 	mov.w	sl, #0
 8005a0a:	eba5 030a 	sub.w	r3, r5, sl
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	f2c0 810a 	blt.w	8005c28 <__kernel_rem_pio2+0x4d8>
 8005a14:	f8df b078 	ldr.w	fp, [pc, #120]	; 8005a90 <__kernel_rem_pio2+0x340>
 8005a18:	ec59 8b18 	vmov	r8, r9, d8
 8005a1c:	2700      	movs	r7, #0
 8005a1e:	e0f5      	b.n	8005c0c <__kernel_rem_pio2+0x4bc>
 8005a20:	2302      	movs	r3, #2
 8005a22:	9302      	str	r3, [sp, #8]
 8005a24:	e760      	b.n	80058e8 <__kernel_rem_pio2+0x198>
 8005a26:	ab0e      	add	r3, sp, #56	; 0x38
 8005a28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a2c:	b94d      	cbnz	r5, 8005a42 <__kernel_rem_pio2+0x2f2>
 8005a2e:	b12b      	cbz	r3, 8005a3c <__kernel_rem_pio2+0x2ec>
 8005a30:	a80e      	add	r0, sp, #56	; 0x38
 8005a32:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005a36:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005a3a:	2301      	movs	r3, #1
 8005a3c:	3201      	adds	r2, #1
 8005a3e:	461d      	mov	r5, r3
 8005a40:	e759      	b.n	80058f6 <__kernel_rem_pio2+0x1a6>
 8005a42:	a80e      	add	r0, sp, #56	; 0x38
 8005a44:	1acb      	subs	r3, r1, r3
 8005a46:	f840 3022 	str.w	r3, [r0, r2, lsl #2]
 8005a4a:	462b      	mov	r3, r5
 8005a4c:	e7f6      	b.n	8005a3c <__kernel_rem_pio2+0x2ec>
 8005a4e:	1e62      	subs	r2, r4, #1
 8005a50:	ab0e      	add	r3, sp, #56	; 0x38
 8005a52:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a56:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005a5a:	a90e      	add	r1, sp, #56	; 0x38
 8005a5c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005a60:	e757      	b.n	8005912 <__kernel_rem_pio2+0x1c2>
 8005a62:	bf00      	nop
 8005a64:	f3af 8000 	nop.w
	...
 8005a74:	3ff00000 	.word	0x3ff00000
 8005a78:	080064d0 	.word	0x080064d0
 8005a7c:	40200000 	.word	0x40200000
 8005a80:	3ff00000 	.word	0x3ff00000
 8005a84:	3e700000 	.word	0x3e700000
 8005a88:	41700000 	.word	0x41700000
 8005a8c:	3fe00000 	.word	0x3fe00000
 8005a90:	08006490 	.word	0x08006490
 8005a94:	1e62      	subs	r2, r4, #1
 8005a96:	ab0e      	add	r3, sp, #56	; 0x38
 8005a98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a9c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005aa0:	e7db      	b.n	8005a5a <__kernel_rem_pio2+0x30a>
 8005aa2:	a90e      	add	r1, sp, #56	; 0x38
 8005aa4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005aa8:	3b01      	subs	r3, #1
 8005aaa:	430a      	orrs	r2, r1
 8005aac:	e78b      	b.n	80059c6 <__kernel_rem_pio2+0x276>
 8005aae:	3301      	adds	r3, #1
 8005ab0:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005ab4:	2900      	cmp	r1, #0
 8005ab6:	d0fa      	beq.n	8005aae <__kernel_rem_pio2+0x35e>
 8005ab8:	9a08      	ldr	r2, [sp, #32]
 8005aba:	4422      	add	r2, r4
 8005abc:	00d2      	lsls	r2, r2, #3
 8005abe:	a922      	add	r1, sp, #136	; 0x88
 8005ac0:	18e3      	adds	r3, r4, r3
 8005ac2:	9206      	str	r2, [sp, #24]
 8005ac4:	440a      	add	r2, r1
 8005ac6:	9302      	str	r3, [sp, #8]
 8005ac8:	f10b 0108 	add.w	r1, fp, #8
 8005acc:	f102 0308 	add.w	r3, r2, #8
 8005ad0:	1c66      	adds	r6, r4, #1
 8005ad2:	910a      	str	r1, [sp, #40]	; 0x28
 8005ad4:	2500      	movs	r5, #0
 8005ad6:	930d      	str	r3, [sp, #52]	; 0x34
 8005ad8:	9b02      	ldr	r3, [sp, #8]
 8005ada:	42b3      	cmp	r3, r6
 8005adc:	da04      	bge.n	8005ae8 <__kernel_rem_pio2+0x398>
 8005ade:	461c      	mov	r4, r3
 8005ae0:	e6a6      	b.n	8005830 <__kernel_rem_pio2+0xe0>
 8005ae2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e7e3      	b.n	8005ab0 <__kernel_rem_pio2+0x360>
 8005ae8:	9b06      	ldr	r3, [sp, #24]
 8005aea:	18ef      	adds	r7, r5, r3
 8005aec:	ab22      	add	r3, sp, #136	; 0x88
 8005aee:	441f      	add	r7, r3
 8005af0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005af2:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8005af6:	f7fa fcb9 	bl	800046c <__aeabi_i2d>
 8005afa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005afc:	461c      	mov	r4, r3
 8005afe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005b00:	e9c7 0100 	strd	r0, r1, [r7]
 8005b04:	eb03 0b05 	add.w	fp, r3, r5
 8005b08:	2700      	movs	r7, #0
 8005b0a:	f04f 0800 	mov.w	r8, #0
 8005b0e:	f04f 0900 	mov.w	r9, #0
 8005b12:	9b07      	ldr	r3, [sp, #28]
 8005b14:	429f      	cmp	r7, r3
 8005b16:	dd08      	ble.n	8005b2a <__kernel_rem_pio2+0x3da>
 8005b18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b1a:	aa72      	add	r2, sp, #456	; 0x1c8
 8005b1c:	18eb      	adds	r3, r5, r3
 8005b1e:	4413      	add	r3, r2
 8005b20:	e9c3 8902 	strd	r8, r9, [r3, #8]
 8005b24:	3601      	adds	r6, #1
 8005b26:	3508      	adds	r5, #8
 8005b28:	e7d6      	b.n	8005ad8 <__kernel_rem_pio2+0x388>
 8005b2a:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005b2e:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005b32:	f7fa fd05 	bl	8000540 <__aeabi_dmul>
 8005b36:	4602      	mov	r2, r0
 8005b38:	460b      	mov	r3, r1
 8005b3a:	4640      	mov	r0, r8
 8005b3c:	4649      	mov	r1, r9
 8005b3e:	f7fa fb49 	bl	80001d4 <__adddf3>
 8005b42:	3701      	adds	r7, #1
 8005b44:	4680      	mov	r8, r0
 8005b46:	4689      	mov	r9, r1
 8005b48:	e7e3      	b.n	8005b12 <__kernel_rem_pio2+0x3c2>
 8005b4a:	3d01      	subs	r5, #1
 8005b4c:	e741      	b.n	80059d2 <__kernel_rem_pio2+0x282>
 8005b4e:	f1ca 0000 	rsb	r0, sl, #0
 8005b52:	ec47 6b10 	vmov	d0, r6, r7
 8005b56:	f000 fb1b 	bl	8006190 <scalbn>
 8005b5a:	ec57 6b10 	vmov	r6, r7, d0
 8005b5e:	2200      	movs	r2, #0
 8005b60:	4b99      	ldr	r3, [pc, #612]	; (8005dc8 <__kernel_rem_pio2+0x678>)
 8005b62:	ee10 0a10 	vmov	r0, s0
 8005b66:	4639      	mov	r1, r7
 8005b68:	f7fa ff70 	bl	8000a4c <__aeabi_dcmpge>
 8005b6c:	b1f8      	cbz	r0, 8005bae <__kernel_rem_pio2+0x45e>
 8005b6e:	2200      	movs	r2, #0
 8005b70:	4b96      	ldr	r3, [pc, #600]	; (8005dcc <__kernel_rem_pio2+0x67c>)
 8005b72:	4630      	mov	r0, r6
 8005b74:	4639      	mov	r1, r7
 8005b76:	f7fa fce3 	bl	8000540 <__aeabi_dmul>
 8005b7a:	f7fa ff91 	bl	8000aa0 <__aeabi_d2iz>
 8005b7e:	4680      	mov	r8, r0
 8005b80:	f7fa fc74 	bl	800046c <__aeabi_i2d>
 8005b84:	2200      	movs	r2, #0
 8005b86:	4b90      	ldr	r3, [pc, #576]	; (8005dc8 <__kernel_rem_pio2+0x678>)
 8005b88:	f7fa fcda 	bl	8000540 <__aeabi_dmul>
 8005b8c:	460b      	mov	r3, r1
 8005b8e:	4602      	mov	r2, r0
 8005b90:	4639      	mov	r1, r7
 8005b92:	4630      	mov	r0, r6
 8005b94:	f7fa fb1c 	bl	80001d0 <__aeabi_dsub>
 8005b98:	f7fa ff82 	bl	8000aa0 <__aeabi_d2iz>
 8005b9c:	1c65      	adds	r5, r4, #1
 8005b9e:	ab0e      	add	r3, sp, #56	; 0x38
 8005ba0:	f10a 0a18 	add.w	sl, sl, #24
 8005ba4:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005ba8:	f843 8025 	str.w	r8, [r3, r5, lsl #2]
 8005bac:	e719      	b.n	80059e2 <__kernel_rem_pio2+0x292>
 8005bae:	4630      	mov	r0, r6
 8005bb0:	4639      	mov	r1, r7
 8005bb2:	f7fa ff75 	bl	8000aa0 <__aeabi_d2iz>
 8005bb6:	ab0e      	add	r3, sp, #56	; 0x38
 8005bb8:	4625      	mov	r5, r4
 8005bba:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005bbe:	e710      	b.n	80059e2 <__kernel_rem_pio2+0x292>
 8005bc0:	ab0e      	add	r3, sp, #56	; 0x38
 8005bc2:	f853 0027 	ldr.w	r0, [r3, r7, lsl #2]
 8005bc6:	f7fa fc51 	bl	800046c <__aeabi_i2d>
 8005bca:	4642      	mov	r2, r8
 8005bcc:	464b      	mov	r3, r9
 8005bce:	f7fa fcb7 	bl	8000540 <__aeabi_dmul>
 8005bd2:	2200      	movs	r2, #0
 8005bd4:	e96a 0102 	strd	r0, r1, [sl, #-8]!
 8005bd8:	4b7c      	ldr	r3, [pc, #496]	; (8005dcc <__kernel_rem_pio2+0x67c>)
 8005bda:	4640      	mov	r0, r8
 8005bdc:	4649      	mov	r1, r9
 8005bde:	f7fa fcaf 	bl	8000540 <__aeabi_dmul>
 8005be2:	3f01      	subs	r7, #1
 8005be4:	4680      	mov	r8, r0
 8005be6:	4689      	mov	r9, r1
 8005be8:	e708      	b.n	80059fc <__kernel_rem_pio2+0x2ac>
 8005bea:	eb06 03c7 	add.w	r3, r6, r7, lsl #3
 8005bee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bf2:	e8fb 0102 	ldrd	r0, r1, [fp], #8
 8005bf6:	f7fa fca3 	bl	8000540 <__aeabi_dmul>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4640      	mov	r0, r8
 8005c00:	4649      	mov	r1, r9
 8005c02:	f7fa fae7 	bl	80001d4 <__adddf3>
 8005c06:	3701      	adds	r7, #1
 8005c08:	4680      	mov	r8, r0
 8005c0a:	4689      	mov	r9, r1
 8005c0c:	9b04      	ldr	r3, [sp, #16]
 8005c0e:	429f      	cmp	r7, r3
 8005c10:	dc01      	bgt.n	8005c16 <__kernel_rem_pio2+0x4c6>
 8005c12:	45ba      	cmp	sl, r7
 8005c14:	dae9      	bge.n	8005bea <__kernel_rem_pio2+0x49a>
 8005c16:	ab4a      	add	r3, sp, #296	; 0x128
 8005c18:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005c1c:	e9c3 8900 	strd	r8, r9, [r3]
 8005c20:	f10a 0a01 	add.w	sl, sl, #1
 8005c24:	3e08      	subs	r6, #8
 8005c26:	e6f0      	b.n	8005a0a <__kernel_rem_pio2+0x2ba>
 8005c28:	9ba6      	ldr	r3, [sp, #664]	; 0x298
 8005c2a:	2b03      	cmp	r3, #3
 8005c2c:	d85b      	bhi.n	8005ce6 <__kernel_rem_pio2+0x596>
 8005c2e:	e8df f003 	tbb	[pc, r3]
 8005c32:	264a      	.short	0x264a
 8005c34:	0226      	.short	0x0226
 8005c36:	ab9a      	add	r3, sp, #616	; 0x268
 8005c38:	441c      	add	r4, r3
 8005c3a:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005c3e:	46a2      	mov	sl, r4
 8005c40:	46ab      	mov	fp, r5
 8005c42:	f1bb 0f00 	cmp.w	fp, #0
 8005c46:	dc6c      	bgt.n	8005d22 <__kernel_rem_pio2+0x5d2>
 8005c48:	46a2      	mov	sl, r4
 8005c4a:	46ab      	mov	fp, r5
 8005c4c:	f1bb 0f01 	cmp.w	fp, #1
 8005c50:	f300 8086 	bgt.w	8005d60 <__kernel_rem_pio2+0x610>
 8005c54:	2000      	movs	r0, #0
 8005c56:	2100      	movs	r1, #0
 8005c58:	2d01      	cmp	r5, #1
 8005c5a:	f300 80a0 	bgt.w	8005d9e <__kernel_rem_pio2+0x64e>
 8005c5e:	9b02      	ldr	r3, [sp, #8]
 8005c60:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005c64:	e9dd 564c 	ldrd	r5, r6, [sp, #304]	; 0x130
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	f040 809e 	bne.w	8005daa <__kernel_rem_pio2+0x65a>
 8005c6e:	9b01      	ldr	r3, [sp, #4]
 8005c70:	e9c3 7800 	strd	r7, r8, [r3]
 8005c74:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005c78:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005c7c:	e033      	b.n	8005ce6 <__kernel_rem_pio2+0x596>
 8005c7e:	3408      	adds	r4, #8
 8005c80:	ab4a      	add	r3, sp, #296	; 0x128
 8005c82:	441c      	add	r4, r3
 8005c84:	462e      	mov	r6, r5
 8005c86:	2000      	movs	r0, #0
 8005c88:	2100      	movs	r1, #0
 8005c8a:	2e00      	cmp	r6, #0
 8005c8c:	da3a      	bge.n	8005d04 <__kernel_rem_pio2+0x5b4>
 8005c8e:	9b02      	ldr	r3, [sp, #8]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d03d      	beq.n	8005d10 <__kernel_rem_pio2+0x5c0>
 8005c94:	4602      	mov	r2, r0
 8005c96:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005c9a:	9c01      	ldr	r4, [sp, #4]
 8005c9c:	e9c4 2300 	strd	r2, r3, [r4]
 8005ca0:	4602      	mov	r2, r0
 8005ca2:	460b      	mov	r3, r1
 8005ca4:	e9dd 014a 	ldrd	r0, r1, [sp, #296]	; 0x128
 8005ca8:	f7fa fa92 	bl	80001d0 <__aeabi_dsub>
 8005cac:	ae4c      	add	r6, sp, #304	; 0x130
 8005cae:	2401      	movs	r4, #1
 8005cb0:	42a5      	cmp	r5, r4
 8005cb2:	da30      	bge.n	8005d16 <__kernel_rem_pio2+0x5c6>
 8005cb4:	9b02      	ldr	r3, [sp, #8]
 8005cb6:	b113      	cbz	r3, 8005cbe <__kernel_rem_pio2+0x56e>
 8005cb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	9b01      	ldr	r3, [sp, #4]
 8005cc0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005cc4:	e00f      	b.n	8005ce6 <__kernel_rem_pio2+0x596>
 8005cc6:	ab9a      	add	r3, sp, #616	; 0x268
 8005cc8:	441c      	add	r4, r3
 8005cca:	f5a4 749c 	sub.w	r4, r4, #312	; 0x138
 8005cce:	2000      	movs	r0, #0
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	2d00      	cmp	r5, #0
 8005cd4:	da10      	bge.n	8005cf8 <__kernel_rem_pio2+0x5a8>
 8005cd6:	9b02      	ldr	r3, [sp, #8]
 8005cd8:	b113      	cbz	r3, 8005ce0 <__kernel_rem_pio2+0x590>
 8005cda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005cde:	4619      	mov	r1, r3
 8005ce0:	9b01      	ldr	r3, [sp, #4]
 8005ce2:	e9c3 0100 	strd	r0, r1, [r3]
 8005ce6:	9b06      	ldr	r3, [sp, #24]
 8005ce8:	f003 0007 	and.w	r0, r3, #7
 8005cec:	f50d 7d1b 	add.w	sp, sp, #620	; 0x26c
 8005cf0:	ecbd 8b02 	vpop	{d8}
 8005cf4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005cf8:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005cfc:	f7fa fa6a 	bl	80001d4 <__adddf3>
 8005d00:	3d01      	subs	r5, #1
 8005d02:	e7e6      	b.n	8005cd2 <__kernel_rem_pio2+0x582>
 8005d04:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005d08:	f7fa fa64 	bl	80001d4 <__adddf3>
 8005d0c:	3e01      	subs	r6, #1
 8005d0e:	e7bc      	b.n	8005c8a <__kernel_rem_pio2+0x53a>
 8005d10:	4602      	mov	r2, r0
 8005d12:	460b      	mov	r3, r1
 8005d14:	e7c1      	b.n	8005c9a <__kernel_rem_pio2+0x54a>
 8005d16:	e8f6 2302 	ldrd	r2, r3, [r6], #8
 8005d1a:	f7fa fa5b 	bl	80001d4 <__adddf3>
 8005d1e:	3401      	adds	r4, #1
 8005d20:	e7c6      	b.n	8005cb0 <__kernel_rem_pio2+0x560>
 8005d22:	e95a 8904 	ldrd	r8, r9, [sl, #-16]
 8005d26:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005d2a:	4640      	mov	r0, r8
 8005d2c:	ec53 2b17 	vmov	r2, r3, d7
 8005d30:	4649      	mov	r1, r9
 8005d32:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005d36:	f7fa fa4d 	bl	80001d4 <__adddf3>
 8005d3a:	4602      	mov	r2, r0
 8005d3c:	460b      	mov	r3, r1
 8005d3e:	4606      	mov	r6, r0
 8005d40:	460f      	mov	r7, r1
 8005d42:	4640      	mov	r0, r8
 8005d44:	4649      	mov	r1, r9
 8005d46:	f7fa fa43 	bl	80001d0 <__aeabi_dsub>
 8005d4a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d4e:	f7fa fa41 	bl	80001d4 <__adddf3>
 8005d52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d56:	e9ca 0100 	strd	r0, r1, [sl]
 8005d5a:	e94a 6702 	strd	r6, r7, [sl, #-8]
 8005d5e:	e770      	b.n	8005c42 <__kernel_rem_pio2+0x4f2>
 8005d60:	e95a 6704 	ldrd	r6, r7, [sl, #-16]
 8005d64:	ed3a 7b02 	vldmdb	sl!, {d7}
 8005d68:	4630      	mov	r0, r6
 8005d6a:	ec53 2b17 	vmov	r2, r3, d7
 8005d6e:	4639      	mov	r1, r7
 8005d70:	ed8d 7b04 	vstr	d7, [sp, #16]
 8005d74:	f7fa fa2e 	bl	80001d4 <__adddf3>
 8005d78:	4602      	mov	r2, r0
 8005d7a:	460b      	mov	r3, r1
 8005d7c:	4680      	mov	r8, r0
 8005d7e:	4689      	mov	r9, r1
 8005d80:	4630      	mov	r0, r6
 8005d82:	4639      	mov	r1, r7
 8005d84:	f7fa fa24 	bl	80001d0 <__aeabi_dsub>
 8005d88:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005d8c:	f7fa fa22 	bl	80001d4 <__adddf3>
 8005d90:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005d94:	e9ca 0100 	strd	r0, r1, [sl]
 8005d98:	e94a 8902 	strd	r8, r9, [sl, #-8]
 8005d9c:	e756      	b.n	8005c4c <__kernel_rem_pio2+0x4fc>
 8005d9e:	e974 2302 	ldrd	r2, r3, [r4, #-8]!
 8005da2:	f7fa fa17 	bl	80001d4 <__adddf3>
 8005da6:	3d01      	subs	r5, #1
 8005da8:	e756      	b.n	8005c58 <__kernel_rem_pio2+0x508>
 8005daa:	9b01      	ldr	r3, [sp, #4]
 8005dac:	9a01      	ldr	r2, [sp, #4]
 8005dae:	601f      	str	r7, [r3, #0]
 8005db0:	f108 4400 	add.w	r4, r8, #2147483648	; 0x80000000
 8005db4:	605c      	str	r4, [r3, #4]
 8005db6:	609d      	str	r5, [r3, #8]
 8005db8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005dbc:	60d3      	str	r3, [r2, #12]
 8005dbe:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dc2:	6110      	str	r0, [r2, #16]
 8005dc4:	6153      	str	r3, [r2, #20]
 8005dc6:	e78e      	b.n	8005ce6 <__kernel_rem_pio2+0x596>
 8005dc8:	41700000 	.word	0x41700000
 8005dcc:	3e700000 	.word	0x3e700000

08005dd0 <__kernel_sin>:
 8005dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005dd4:	ec55 4b10 	vmov	r4, r5, d0
 8005dd8:	b085      	sub	sp, #20
 8005dda:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005dde:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005de2:	ed8d 1b00 	vstr	d1, [sp]
 8005de6:	9002      	str	r0, [sp, #8]
 8005de8:	da06      	bge.n	8005df8 <__kernel_sin+0x28>
 8005dea:	ee10 0a10 	vmov	r0, s0
 8005dee:	4629      	mov	r1, r5
 8005df0:	f7fa fe56 	bl	8000aa0 <__aeabi_d2iz>
 8005df4:	2800      	cmp	r0, #0
 8005df6:	d051      	beq.n	8005e9c <__kernel_sin+0xcc>
 8005df8:	4622      	mov	r2, r4
 8005dfa:	462b      	mov	r3, r5
 8005dfc:	4620      	mov	r0, r4
 8005dfe:	4629      	mov	r1, r5
 8005e00:	f7fa fb9e 	bl	8000540 <__aeabi_dmul>
 8005e04:	4682      	mov	sl, r0
 8005e06:	468b      	mov	fp, r1
 8005e08:	4602      	mov	r2, r0
 8005e0a:	460b      	mov	r3, r1
 8005e0c:	4620      	mov	r0, r4
 8005e0e:	4629      	mov	r1, r5
 8005e10:	f7fa fb96 	bl	8000540 <__aeabi_dmul>
 8005e14:	a341      	add	r3, pc, #260	; (adr r3, 8005f1c <__kernel_sin+0x14c>)
 8005e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e1a:	4680      	mov	r8, r0
 8005e1c:	4689      	mov	r9, r1
 8005e1e:	4650      	mov	r0, sl
 8005e20:	4659      	mov	r1, fp
 8005e22:	f7fa fb8d 	bl	8000540 <__aeabi_dmul>
 8005e26:	a33f      	add	r3, pc, #252	; (adr r3, 8005f24 <__kernel_sin+0x154>)
 8005e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e2c:	f7fa f9d0 	bl	80001d0 <__aeabi_dsub>
 8005e30:	4652      	mov	r2, sl
 8005e32:	465b      	mov	r3, fp
 8005e34:	f7fa fb84 	bl	8000540 <__aeabi_dmul>
 8005e38:	a33c      	add	r3, pc, #240	; (adr r3, 8005f2c <__kernel_sin+0x15c>)
 8005e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e3e:	f7fa f9c9 	bl	80001d4 <__adddf3>
 8005e42:	4652      	mov	r2, sl
 8005e44:	465b      	mov	r3, fp
 8005e46:	f7fa fb7b 	bl	8000540 <__aeabi_dmul>
 8005e4a:	a33a      	add	r3, pc, #232	; (adr r3, 8005f34 <__kernel_sin+0x164>)
 8005e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e50:	f7fa f9be 	bl	80001d0 <__aeabi_dsub>
 8005e54:	4652      	mov	r2, sl
 8005e56:	465b      	mov	r3, fp
 8005e58:	f7fa fb72 	bl	8000540 <__aeabi_dmul>
 8005e5c:	a337      	add	r3, pc, #220	; (adr r3, 8005f3c <__kernel_sin+0x16c>)
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	f7fa f9b7 	bl	80001d4 <__adddf3>
 8005e66:	9b02      	ldr	r3, [sp, #8]
 8005e68:	4606      	mov	r6, r0
 8005e6a:	460f      	mov	r7, r1
 8005e6c:	b9db      	cbnz	r3, 8005ea6 <__kernel_sin+0xd6>
 8005e6e:	4602      	mov	r2, r0
 8005e70:	460b      	mov	r3, r1
 8005e72:	4650      	mov	r0, sl
 8005e74:	4659      	mov	r1, fp
 8005e76:	f7fa fb63 	bl	8000540 <__aeabi_dmul>
 8005e7a:	a325      	add	r3, pc, #148	; (adr r3, 8005f10 <__kernel_sin+0x140>)
 8005e7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e80:	f7fa f9a6 	bl	80001d0 <__aeabi_dsub>
 8005e84:	4642      	mov	r2, r8
 8005e86:	464b      	mov	r3, r9
 8005e88:	f7fa fb5a 	bl	8000540 <__aeabi_dmul>
 8005e8c:	4602      	mov	r2, r0
 8005e8e:	460b      	mov	r3, r1
 8005e90:	4620      	mov	r0, r4
 8005e92:	4629      	mov	r1, r5
 8005e94:	f7fa f99e 	bl	80001d4 <__adddf3>
 8005e98:	4604      	mov	r4, r0
 8005e9a:	460d      	mov	r5, r1
 8005e9c:	ec45 4b10 	vmov	d0, r4, r5
 8005ea0:	b005      	add	sp, #20
 8005ea2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	4b1b      	ldr	r3, [pc, #108]	; (8005f18 <__kernel_sin+0x148>)
 8005eaa:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005eae:	f7fa fb47 	bl	8000540 <__aeabi_dmul>
 8005eb2:	4632      	mov	r2, r6
 8005eb4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005eb8:	463b      	mov	r3, r7
 8005eba:	4640      	mov	r0, r8
 8005ebc:	4649      	mov	r1, r9
 8005ebe:	f7fa fb3f 	bl	8000540 <__aeabi_dmul>
 8005ec2:	4602      	mov	r2, r0
 8005ec4:	460b      	mov	r3, r1
 8005ec6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005eca:	f7fa f981 	bl	80001d0 <__aeabi_dsub>
 8005ece:	4652      	mov	r2, sl
 8005ed0:	465b      	mov	r3, fp
 8005ed2:	f7fa fb35 	bl	8000540 <__aeabi_dmul>
 8005ed6:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005eda:	f7fa f979 	bl	80001d0 <__aeabi_dsub>
 8005ede:	a30c      	add	r3, pc, #48	; (adr r3, 8005f10 <__kernel_sin+0x140>)
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	4606      	mov	r6, r0
 8005ee6:	460f      	mov	r7, r1
 8005ee8:	4640      	mov	r0, r8
 8005eea:	4649      	mov	r1, r9
 8005eec:	f7fa fb28 	bl	8000540 <__aeabi_dmul>
 8005ef0:	4602      	mov	r2, r0
 8005ef2:	460b      	mov	r3, r1
 8005ef4:	4630      	mov	r0, r6
 8005ef6:	4639      	mov	r1, r7
 8005ef8:	f7fa f96c 	bl	80001d4 <__adddf3>
 8005efc:	4602      	mov	r2, r0
 8005efe:	460b      	mov	r3, r1
 8005f00:	4620      	mov	r0, r4
 8005f02:	4629      	mov	r1, r5
 8005f04:	f7fa f964 	bl	80001d0 <__aeabi_dsub>
 8005f08:	e7c6      	b.n	8005e98 <__kernel_sin+0xc8>
 8005f0a:	bf00      	nop
 8005f0c:	f3af 8000 	nop.w
 8005f10:	55555549 	.word	0x55555549
 8005f14:	3fc55555 	.word	0x3fc55555
 8005f18:	3fe00000 	.word	0x3fe00000
 8005f1c:	5acfd57c 	.word	0x5acfd57c
 8005f20:	3de5d93a 	.word	0x3de5d93a
 8005f24:	8a2b9ceb 	.word	0x8a2b9ceb
 8005f28:	3e5ae5e6 	.word	0x3e5ae5e6
 8005f2c:	57b1fe7d 	.word	0x57b1fe7d
 8005f30:	3ec71de3 	.word	0x3ec71de3
 8005f34:	19c161d5 	.word	0x19c161d5
 8005f38:	3f2a01a0 	.word	0x3f2a01a0
 8005f3c:	1110f8a6 	.word	0x1110f8a6
 8005f40:	3f811111 	.word	0x3f811111

08005f44 <fabs>:
 8005f44:	ec51 0b10 	vmov	r0, r1, d0
 8005f48:	ee10 2a10 	vmov	r2, s0
 8005f4c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005f50:	ec43 2b10 	vmov	d0, r2, r3
 8005f54:	4770      	bx	lr

08005f56 <finite>:
 8005f56:	ee10 3a90 	vmov	r3, s1
 8005f5a:	f043 4000 	orr.w	r0, r3, #2147483648	; 0x80000000
 8005f5e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005f62:	0fc0      	lsrs	r0, r0, #31
 8005f64:	4770      	bx	lr
	...

08005f68 <floor>:
 8005f68:	ec51 0b10 	vmov	r0, r1, d0
 8005f6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005f70:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005f74:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8005f78:	2e13      	cmp	r6, #19
 8005f7a:	460c      	mov	r4, r1
 8005f7c:	ee10 5a10 	vmov	r5, s0
 8005f80:	4680      	mov	r8, r0
 8005f82:	dc34      	bgt.n	8005fee <floor+0x86>
 8005f84:	2e00      	cmp	r6, #0
 8005f86:	da16      	bge.n	8005fb6 <floor+0x4e>
 8005f88:	a335      	add	r3, pc, #212	; (adr r3, 8006060 <floor+0xf8>)
 8005f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8e:	f7fa f921 	bl	80001d4 <__adddf3>
 8005f92:	2200      	movs	r2, #0
 8005f94:	2300      	movs	r3, #0
 8005f96:	f7fa fd63 	bl	8000a60 <__aeabi_dcmpgt>
 8005f9a:	b148      	cbz	r0, 8005fb0 <floor+0x48>
 8005f9c:	2c00      	cmp	r4, #0
 8005f9e:	da59      	bge.n	8006054 <floor+0xec>
 8005fa0:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8005fa4:	4a30      	ldr	r2, [pc, #192]	; (8006068 <floor+0x100>)
 8005fa6:	432b      	orrs	r3, r5
 8005fa8:	2500      	movs	r5, #0
 8005faa:	42ab      	cmp	r3, r5
 8005fac:	bf18      	it	ne
 8005fae:	4614      	movne	r4, r2
 8005fb0:	4621      	mov	r1, r4
 8005fb2:	4628      	mov	r0, r5
 8005fb4:	e025      	b.n	8006002 <floor+0x9a>
 8005fb6:	4f2d      	ldr	r7, [pc, #180]	; (800606c <floor+0x104>)
 8005fb8:	4137      	asrs	r7, r6
 8005fba:	ea01 0307 	and.w	r3, r1, r7
 8005fbe:	4303      	orrs	r3, r0
 8005fc0:	d01f      	beq.n	8006002 <floor+0x9a>
 8005fc2:	a327      	add	r3, pc, #156	; (adr r3, 8006060 <floor+0xf8>)
 8005fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc8:	f7fa f904 	bl	80001d4 <__adddf3>
 8005fcc:	2200      	movs	r2, #0
 8005fce:	2300      	movs	r3, #0
 8005fd0:	f7fa fd46 	bl	8000a60 <__aeabi_dcmpgt>
 8005fd4:	2800      	cmp	r0, #0
 8005fd6:	d0eb      	beq.n	8005fb0 <floor+0x48>
 8005fd8:	2c00      	cmp	r4, #0
 8005fda:	bfbe      	ittt	lt
 8005fdc:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 8005fe0:	fa43 f606 	asrlt.w	r6, r3, r6
 8005fe4:	19a4      	addlt	r4, r4, r6
 8005fe6:	ea24 0407 	bic.w	r4, r4, r7
 8005fea:	2500      	movs	r5, #0
 8005fec:	e7e0      	b.n	8005fb0 <floor+0x48>
 8005fee:	2e33      	cmp	r6, #51	; 0x33
 8005ff0:	dd0b      	ble.n	800600a <floor+0xa2>
 8005ff2:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005ff6:	d104      	bne.n	8006002 <floor+0x9a>
 8005ff8:	ee10 2a10 	vmov	r2, s0
 8005ffc:	460b      	mov	r3, r1
 8005ffe:	f7fa f8e9 	bl	80001d4 <__adddf3>
 8006002:	ec41 0b10 	vmov	d0, r0, r1
 8006006:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800600a:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 800600e:	f04f 33ff 	mov.w	r3, #4294967295
 8006012:	fa23 f707 	lsr.w	r7, r3, r7
 8006016:	4207      	tst	r7, r0
 8006018:	d0f3      	beq.n	8006002 <floor+0x9a>
 800601a:	a311      	add	r3, pc, #68	; (adr r3, 8006060 <floor+0xf8>)
 800601c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006020:	f7fa f8d8 	bl	80001d4 <__adddf3>
 8006024:	2200      	movs	r2, #0
 8006026:	2300      	movs	r3, #0
 8006028:	f7fa fd1a 	bl	8000a60 <__aeabi_dcmpgt>
 800602c:	2800      	cmp	r0, #0
 800602e:	d0bf      	beq.n	8005fb0 <floor+0x48>
 8006030:	2c00      	cmp	r4, #0
 8006032:	da02      	bge.n	800603a <floor+0xd2>
 8006034:	2e14      	cmp	r6, #20
 8006036:	d103      	bne.n	8006040 <floor+0xd8>
 8006038:	3401      	adds	r4, #1
 800603a:	ea25 0507 	bic.w	r5, r5, r7
 800603e:	e7b7      	b.n	8005fb0 <floor+0x48>
 8006040:	2301      	movs	r3, #1
 8006042:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 8006046:	fa03 f606 	lsl.w	r6, r3, r6
 800604a:	4435      	add	r5, r6
 800604c:	4545      	cmp	r5, r8
 800604e:	bf38      	it	cc
 8006050:	18e4      	addcc	r4, r4, r3
 8006052:	e7f2      	b.n	800603a <floor+0xd2>
 8006054:	2500      	movs	r5, #0
 8006056:	462c      	mov	r4, r5
 8006058:	e7aa      	b.n	8005fb0 <floor+0x48>
 800605a:	bf00      	nop
 800605c:	f3af 8000 	nop.w
 8006060:	8800759c 	.word	0x8800759c
 8006064:	7e37e43c 	.word	0x7e37e43c
 8006068:	bff00000 	.word	0xbff00000
 800606c:	000fffff 	.word	0x000fffff

08006070 <matherr>:
 8006070:	2000      	movs	r0, #0
 8006072:	4770      	bx	lr
 8006074:	0000      	movs	r0, r0
	...

08006078 <nan>:
 8006078:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8006080 <nan+0x8>
 800607c:	4770      	bx	lr
 800607e:	bf00      	nop
 8006080:	00000000 	.word	0x00000000
 8006084:	7ff80000 	.word	0x7ff80000

08006088 <rint>:
 8006088:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800608a:	ec51 0b10 	vmov	r0, r1, d0
 800608e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8006092:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8006096:	2e13      	cmp	r6, #19
 8006098:	460b      	mov	r3, r1
 800609a:	ee10 4a10 	vmov	r4, s0
 800609e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 80060a2:	dc56      	bgt.n	8006152 <rint+0xca>
 80060a4:	2e00      	cmp	r6, #0
 80060a6:	da2b      	bge.n	8006100 <rint+0x78>
 80060a8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 80060ac:	4302      	orrs	r2, r0
 80060ae:	d023      	beq.n	80060f8 <rint+0x70>
 80060b0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 80060b4:	4302      	orrs	r2, r0
 80060b6:	4254      	negs	r4, r2
 80060b8:	4314      	orrs	r4, r2
 80060ba:	0c4b      	lsrs	r3, r1, #17
 80060bc:	0b24      	lsrs	r4, r4, #12
 80060be:	045b      	lsls	r3, r3, #17
 80060c0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80060c4:	ea44 0103 	orr.w	r1, r4, r3
 80060c8:	460b      	mov	r3, r1
 80060ca:	492f      	ldr	r1, [pc, #188]	; (8006188 <rint+0x100>)
 80060cc:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
 80060d0:	e9d1 6700 	ldrd	r6, r7, [r1]
 80060d4:	4602      	mov	r2, r0
 80060d6:	4639      	mov	r1, r7
 80060d8:	4630      	mov	r0, r6
 80060da:	f7fa f87b 	bl	80001d4 <__adddf3>
 80060de:	e9cd 0100 	strd	r0, r1, [sp]
 80060e2:	463b      	mov	r3, r7
 80060e4:	4632      	mov	r2, r6
 80060e6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80060ea:	f7fa f871 	bl	80001d0 <__aeabi_dsub>
 80060ee:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80060f2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80060f6:	4639      	mov	r1, r7
 80060f8:	ec41 0b10 	vmov	d0, r0, r1
 80060fc:	b003      	add	sp, #12
 80060fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006100:	4a22      	ldr	r2, [pc, #136]	; (800618c <rint+0x104>)
 8006102:	4132      	asrs	r2, r6
 8006104:	ea01 0702 	and.w	r7, r1, r2
 8006108:	4307      	orrs	r7, r0
 800610a:	d0f5      	beq.n	80060f8 <rint+0x70>
 800610c:	0852      	lsrs	r2, r2, #1
 800610e:	4011      	ands	r1, r2
 8006110:	430c      	orrs	r4, r1
 8006112:	d00b      	beq.n	800612c <rint+0xa4>
 8006114:	ea23 0202 	bic.w	r2, r3, r2
 8006118:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800611c:	2e13      	cmp	r6, #19
 800611e:	fa43 f306 	asr.w	r3, r3, r6
 8006122:	bf0c      	ite	eq
 8006124:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8006128:	2400      	movne	r4, #0
 800612a:	4313      	orrs	r3, r2
 800612c:	4916      	ldr	r1, [pc, #88]	; (8006188 <rint+0x100>)
 800612e:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8006132:	4622      	mov	r2, r4
 8006134:	e9d5 4500 	ldrd	r4, r5, [r5]
 8006138:	4620      	mov	r0, r4
 800613a:	4629      	mov	r1, r5
 800613c:	f7fa f84a 	bl	80001d4 <__adddf3>
 8006140:	e9cd 0100 	strd	r0, r1, [sp]
 8006144:	4622      	mov	r2, r4
 8006146:	462b      	mov	r3, r5
 8006148:	e9dd 0100 	ldrd	r0, r1, [sp]
 800614c:	f7fa f840 	bl	80001d0 <__aeabi_dsub>
 8006150:	e7d2      	b.n	80060f8 <rint+0x70>
 8006152:	2e33      	cmp	r6, #51	; 0x33
 8006154:	dd07      	ble.n	8006166 <rint+0xde>
 8006156:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800615a:	d1cd      	bne.n	80060f8 <rint+0x70>
 800615c:	ee10 2a10 	vmov	r2, s0
 8006160:	f7fa f838 	bl	80001d4 <__adddf3>
 8006164:	e7c8      	b.n	80060f8 <rint+0x70>
 8006166:	f2a2 4613 	subw	r6, r2, #1043	; 0x413
 800616a:	f04f 32ff 	mov.w	r2, #4294967295
 800616e:	40f2      	lsrs	r2, r6
 8006170:	4210      	tst	r0, r2
 8006172:	d0c1      	beq.n	80060f8 <rint+0x70>
 8006174:	0852      	lsrs	r2, r2, #1
 8006176:	4210      	tst	r0, r2
 8006178:	bf1f      	itttt	ne
 800617a:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800617e:	ea20 0202 	bicne.w	r2, r0, r2
 8006182:	4134      	asrne	r4, r6
 8006184:	4314      	orrne	r4, r2
 8006186:	e7d1      	b.n	800612c <rint+0xa4>
 8006188:	080064e0 	.word	0x080064e0
 800618c:	000fffff 	.word	0x000fffff

08006190 <scalbn>:
 8006190:	b570      	push	{r4, r5, r6, lr}
 8006192:	ec55 4b10 	vmov	r4, r5, d0
 8006196:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800619a:	4606      	mov	r6, r0
 800619c:	462b      	mov	r3, r5
 800619e:	b9aa      	cbnz	r2, 80061cc <scalbn+0x3c>
 80061a0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80061a4:	4323      	orrs	r3, r4
 80061a6:	d03b      	beq.n	8006220 <scalbn+0x90>
 80061a8:	4b31      	ldr	r3, [pc, #196]	; (8006270 <scalbn+0xe0>)
 80061aa:	4629      	mov	r1, r5
 80061ac:	2200      	movs	r2, #0
 80061ae:	ee10 0a10 	vmov	r0, s0
 80061b2:	f7fa f9c5 	bl	8000540 <__aeabi_dmul>
 80061b6:	4b2f      	ldr	r3, [pc, #188]	; (8006274 <scalbn+0xe4>)
 80061b8:	429e      	cmp	r6, r3
 80061ba:	4604      	mov	r4, r0
 80061bc:	460d      	mov	r5, r1
 80061be:	da12      	bge.n	80061e6 <scalbn+0x56>
 80061c0:	a327      	add	r3, pc, #156	; (adr r3, 8006260 <scalbn+0xd0>)
 80061c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061c6:	f7fa f9bb 	bl	8000540 <__aeabi_dmul>
 80061ca:	e009      	b.n	80061e0 <scalbn+0x50>
 80061cc:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80061d0:	428a      	cmp	r2, r1
 80061d2:	d10c      	bne.n	80061ee <scalbn+0x5e>
 80061d4:	ee10 2a10 	vmov	r2, s0
 80061d8:	4620      	mov	r0, r4
 80061da:	4629      	mov	r1, r5
 80061dc:	f7f9 fffa 	bl	80001d4 <__adddf3>
 80061e0:	4604      	mov	r4, r0
 80061e2:	460d      	mov	r5, r1
 80061e4:	e01c      	b.n	8006220 <scalbn+0x90>
 80061e6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80061ea:	460b      	mov	r3, r1
 80061ec:	3a36      	subs	r2, #54	; 0x36
 80061ee:	4432      	add	r2, r6
 80061f0:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80061f4:	428a      	cmp	r2, r1
 80061f6:	dd0b      	ble.n	8006210 <scalbn+0x80>
 80061f8:	ec45 4b11 	vmov	d1, r4, r5
 80061fc:	ed9f 0b1a 	vldr	d0, [pc, #104]	; 8006268 <scalbn+0xd8>
 8006200:	f000 f83c 	bl	800627c <copysign>
 8006204:	a318      	add	r3, pc, #96	; (adr r3, 8006268 <scalbn+0xd8>)
 8006206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800620a:	ec51 0b10 	vmov	r0, r1, d0
 800620e:	e7da      	b.n	80061c6 <scalbn+0x36>
 8006210:	2a00      	cmp	r2, #0
 8006212:	dd08      	ble.n	8006226 <scalbn+0x96>
 8006214:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8006218:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800621c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006220:	ec45 4b10 	vmov	d0, r4, r5
 8006224:	bd70      	pop	{r4, r5, r6, pc}
 8006226:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800622a:	da0d      	bge.n	8006248 <scalbn+0xb8>
 800622c:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006230:	429e      	cmp	r6, r3
 8006232:	ec45 4b11 	vmov	d1, r4, r5
 8006236:	dce1      	bgt.n	80061fc <scalbn+0x6c>
 8006238:	ed9f 0b09 	vldr	d0, [pc, #36]	; 8006260 <scalbn+0xd0>
 800623c:	f000 f81e 	bl	800627c <copysign>
 8006240:	a307      	add	r3, pc, #28	; (adr r3, 8006260 <scalbn+0xd0>)
 8006242:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006246:	e7e0      	b.n	800620a <scalbn+0x7a>
 8006248:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800624c:	3236      	adds	r2, #54	; 0x36
 800624e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006252:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006256:	4620      	mov	r0, r4
 8006258:	4629      	mov	r1, r5
 800625a:	2200      	movs	r2, #0
 800625c:	4b06      	ldr	r3, [pc, #24]	; (8006278 <scalbn+0xe8>)
 800625e:	e7b2      	b.n	80061c6 <scalbn+0x36>
 8006260:	c2f8f359 	.word	0xc2f8f359
 8006264:	01a56e1f 	.word	0x01a56e1f
 8006268:	8800759c 	.word	0x8800759c
 800626c:	7e37e43c 	.word	0x7e37e43c
 8006270:	43500000 	.word	0x43500000
 8006274:	ffff3cb0 	.word	0xffff3cb0
 8006278:	3c900000 	.word	0x3c900000

0800627c <copysign>:
 800627c:	ec51 0b10 	vmov	r0, r1, d0
 8006280:	ee11 0a90 	vmov	r0, s3
 8006284:	ee10 2a10 	vmov	r2, s0
 8006288:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800628c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8006290:	ea41 0300 	orr.w	r3, r1, r0
 8006294:	ec43 2b10 	vmov	d0, r2, r3
 8006298:	4770      	bx	lr
	...

0800629c <_init>:
 800629c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629e:	bf00      	nop
 80062a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062a2:	bc08      	pop	{r3}
 80062a4:	469e      	mov	lr, r3
 80062a6:	4770      	bx	lr

080062a8 <_fini>:
 80062a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80062aa:	bf00      	nop
 80062ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80062ae:	bc08      	pop	{r3}
 80062b0:	469e      	mov	lr, r3
 80062b2:	4770      	bx	lr
